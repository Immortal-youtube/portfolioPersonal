{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinMsg = exports.Msg = exports.Response = exports.Query = void 0;\n\nconst BSON = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"./wire_protocol/constants\"); // Incrementing request id\n\n\nlet _requestId = 0; // Query flags\n\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128; // Response flags\n\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n\n/** @internal */\n\nclass Query {\n  constructor(ns, query, options) {\n    // Basic options needed to be passed in\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (ns == null) throw new error_1.MongoRuntimeError('Namespace must be specified for query'); // TODO(NODE-3483): Replace with MongoCommandError\n\n    if (query == null) throw new error_1.MongoRuntimeError('A query document must be specified for query'); // Validate that we are not passing 0x00 in the collection name\n\n    if (ns.indexOf('\\x00') !== -1) {\n      // TODO(NODE-3483): Use MongoNamespace static method\n      throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n    } // Basic options\n\n\n    this.ns = ns;\n    this.query = query; // Additional options\n\n    this.numberToSkip = options.numberToSkip || 0;\n    this.numberToReturn = options.numberToReturn || 0;\n    this.returnFieldSelector = options.returnFieldSelector || undefined;\n    this.requestId = Query.getRequestId(); // special case for pre-3.2 find commands, delete ASAP\n\n    this.pre32Limit = options.pre32Limit; // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.batchSize = this.numberToReturn; // Flags\n\n    this.tailable = false;\n    this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n    this.oplogReplay = false;\n    this.noCursorTimeout = false;\n    this.awaitData = false;\n    this.exhaust = false;\n    this.partial = false;\n  }\n  /** Assign next request Id. */\n\n\n  incRequestId() {\n    this.requestId = _requestId++;\n  }\n  /** Peek next request Id. */\n\n\n  nextRequestId() {\n    return _requestId + 1;\n  }\n  /** Increment then return next request Id. */\n\n\n  static getRequestId() {\n    return ++_requestId;\n  } // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n\n\n  toBin() {\n    const buffers = [];\n    let projection = null; // Set up the flags\n\n    let flags = 0;\n\n    if (this.tailable) {\n      flags |= OPTS_TAILABLE_CURSOR;\n    }\n\n    if (this.secondaryOk) {\n      flags |= OPTS_SECONDARY;\n    }\n\n    if (this.oplogReplay) {\n      flags |= OPTS_OPLOG_REPLAY;\n    }\n\n    if (this.noCursorTimeout) {\n      flags |= OPTS_NO_CURSOR_TIMEOUT;\n    }\n\n    if (this.awaitData) {\n      flags |= OPTS_AWAIT_DATA;\n    }\n\n    if (this.exhaust) {\n      flags |= OPTS_EXHAUST;\n    }\n\n    if (this.partial) {\n      flags |= OPTS_PARTIAL;\n    } // If batchSize is different to this.numberToReturn\n\n\n    if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize; // Allocate write protocol header buffer\n\n    const header = Buffer.alloc(4 * 4 + // Header\n    4 + // Flags\n    Buffer.byteLength(this.ns) + 1 + // namespace\n    4 + // numberToSkip\n    4 // numberToReturn\n    ); // Add header to buffers\n\n    buffers.push(header); // Serialize the query\n\n    const query = BSON.serialize(this.query, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    }); // Add query document\n\n    buffers.push(query);\n\n    if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n      // Serialize the projection document\n      projection = BSON.serialize(this.returnFieldSelector, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      }); // Add projection document\n\n      buffers.push(projection);\n    } // Total message size\n\n\n    const totalLength = header.length + query.length + (projection ? projection.length : 0); // Set up the index\n\n    let index = 4; // Write total document length\n\n    header[3] = totalLength >> 24 & 0xff;\n    header[2] = totalLength >> 16 & 0xff;\n    header[1] = totalLength >> 8 & 0xff;\n    header[0] = totalLength & 0xff; // Write header information requestId\n\n    header[index + 3] = this.requestId >> 24 & 0xff;\n    header[index + 2] = this.requestId >> 16 & 0xff;\n    header[index + 1] = this.requestId >> 8 & 0xff;\n    header[index] = this.requestId & 0xff;\n    index = index + 4; // Write header information responseTo\n\n    header[index + 3] = 0 >> 24 & 0xff;\n    header[index + 2] = 0 >> 16 & 0xff;\n    header[index + 1] = 0 >> 8 & 0xff;\n    header[index] = 0 & 0xff;\n    index = index + 4; // Write header information OP_QUERY\n\n    header[index + 3] = constants_1.OP_QUERY >> 24 & 0xff;\n    header[index + 2] = constants_1.OP_QUERY >> 16 & 0xff;\n    header[index + 1] = constants_1.OP_QUERY >> 8 & 0xff;\n    header[index] = constants_1.OP_QUERY & 0xff;\n    index = index + 4; // Write header information flags\n\n    header[index + 3] = flags >> 24 & 0xff;\n    header[index + 2] = flags >> 16 & 0xff;\n    header[index + 1] = flags >> 8 & 0xff;\n    header[index] = flags & 0xff;\n    index = index + 4; // Write collection name\n\n    index = index + header.write(this.ns, index, 'utf8') + 1;\n    header[index - 1] = 0; // Write header information flags numberToSkip\n\n    header[index + 3] = this.numberToSkip >> 24 & 0xff;\n    header[index + 2] = this.numberToSkip >> 16 & 0xff;\n    header[index + 1] = this.numberToSkip >> 8 & 0xff;\n    header[index] = this.numberToSkip & 0xff;\n    index = index + 4; // Write header information flags numberToReturn\n\n    header[index + 3] = this.numberToReturn >> 24 & 0xff;\n    header[index + 2] = this.numberToReturn >> 16 & 0xff;\n    header[index + 1] = this.numberToReturn >> 8 & 0xff;\n    header[index] = this.numberToReturn & 0xff;\n    index = index + 4; // Return the buffers\n\n    return buffers;\n  }\n\n}\n\nexports.Query = Query;\n/** @internal */\n\nclass Response {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.documents = new Array(0);\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    }; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Flag values\n\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {}; // Allow the return of raw documents instead of parsing\n\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    let bsonSize; // Set up the options\n\n    const _options = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp\n    }; // Position within OP_REPLY at which documents start\n    // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n\n    this.index = 20; // Read the message body\n\n    this.responseFlags = this.data.readInt32LE(0);\n    this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n    this.startingFrom = this.data.readInt32LE(12);\n    this.numberReturned = this.data.readInt32LE(16); // Preallocate document array\n\n    this.documents = new Array(this.numberReturned);\n    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0; // Parse Body\n\n    for (let i = 0; i < this.numberReturned; i++) {\n      bsonSize = this.data[this.index] | this.data[this.index + 1] << 8 | this.data[this.index + 2] << 16 | this.data[this.index + 3] << 24; // If we have raw results specified slice the return document\n\n      if (raw) {\n        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n      } else {\n        this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n      } // Adjust the index\n\n\n      this.index = this.index + bsonSize;\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    } // Set parsed\n\n\n    this.parsed = true;\n  }\n\n}\n\nexports.Response = Response; // Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\n\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\n\nclass Msg {\n  constructor(ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new error_1.MongoInvalidArgumentError('Query document must be specified for query'); // Basic options\n\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = (0, utils_1.databaseNamespace)(ns);\n\n    if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    } // Ensure empty options\n\n\n    this.options = options ?? {}; // Additional options\n\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId(); // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16; // flags\n\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(4 * 4 + // Header\n    4 // Flags\n    );\n    buffers.push(header);\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n    header.writeInt32LE(totalLength, 0); // messageLength\n\n    header.writeInt32LE(this.requestId, 4); // requestID\n\n    header.writeInt32LE(0, 8); // responseTo\n\n    header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n\n    header.writeUInt32LE(flags, 16); // flags\n\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return BSON.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n\n  static getRequestId() {\n    _requestId = _requestId + 1 & 0x7fffffff;\n    return _requestId;\n  }\n\n}\n\nexports.Msg = Msg;\n/** @internal */\n\nclass BinMsg {\n  constructor(message, msgHeader, msgBody, opts) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    }; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Read response flags\n\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues = typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers = typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n    this.index = 4; // Allow the return of raw documents instead of parsing\n\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    const validation = this.parseBsonSerializationOptions(options); // Set up the options\n\n    const bsonOptions = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp,\n      validation // Due to the strictness of the BSON libraries validation option we need this cast\n\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n\n      if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n        this.index += bsonSize;\n      } else if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        // TODO(NODE-3483): Replace with MongoDeprecationError\n        throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      bsonOptions.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0], bsonOptions);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n\n  parseBsonSerializationOptions(_ref) {\n    let {\n      enableUtf8Validation\n    } = _ref;\n\n    if (enableUtf8Validation === false) {\n      return {\n        utf8: false\n      };\n    }\n\n    return {\n      utf8: {\n        writeErrors: false\n      }\n    };\n  }\n\n}\n\nexports.BinMsg = BinMsg;","map":{"version":3,"mappings":"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","names":["_requestId","OPTS_TAILABLE_CURSOR","OPTS_SECONDARY","OPTS_OPLOG_REPLAY","OPTS_NO_CURSOR_TIMEOUT","OPTS_AWAIT_DATA","OPTS_EXHAUST","OPTS_PARTIAL","CURSOR_NOT_FOUND","QUERY_FAILURE","SHARD_CONFIG_STALE","AWAIT_CAPABLE","Query","constructor","ns","query","options","error_1","indexOf","numberToSkip","numberToReturn","returnFieldSelector","undefined","requestId","getRequestId","pre32Limit","serializeFunctions","ignoreUndefined","maxBsonSize","checkKeys","batchSize","tailable","secondaryOk","oplogReplay","noCursorTimeout","awaitData","exhaust","partial","incRequestId","nextRequestId","toBin","buffers","projection","flags","header","Buffer","alloc","byteLength","push","BSON","serialize","Object","keys","length","totalLength","index","constants_1","write","exports","Response","message","msgHeader","msgBody","opts","Array","parsed","raw","data","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","responseTo","opCode","fromCompressed","isParsed","parse","documentsReturnedIn","bsonSize","_options","responseFlags","readInt32LE","cursorId","Long","startingFrom","numberReturned","documents","cursorNotFound","queryFailure","shardConfigStale","awaitCapable","i","slice","deserialize","fieldsAsRaw","doc","OPTS_CHECKSUM_PRESENT","OPTS_MORE_TO_COME","OPTS_EXHAUST_ALLOWED","Msg","command","$db","readPreference","mode","read_preference_1","PRIMARY","$readPreference","toJSON","checksumPresent","moreToCome","exhaustAllowed","makeDocumentSegment","writeInt32LE","writeUInt32LE","document","payloadTypeBuffer","documentBuffer","serializeBson","BinMsg","validation","parseBsonSerializationOptions","bsonOptions","payloadType","readUInt8","readUInt32LE","bin","enableUtf8Validation","utf8","writeErrors"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\commands.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document, Long } from '../bson';\nimport * as BSON from '../bson';\nimport { MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { ReadPreference } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { databaseNamespace } from '../utils';\nimport type { CommandOptions } from './connection';\nimport { OP_MSG, OP_QUERY } from './wire_protocol/constants';\n\n// Incrementing request id\nlet _requestId = 0;\n\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n\n/** @internal */\nexport type WriteProtocolMessageType = Query | Msg;\n\n/** @internal */\nexport interface OpQueryOptions extends CommandOptions {\n  socketTimeoutMS?: number;\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  numberToSkip?: number;\n  numberToReturn?: number;\n  returnFieldSelector?: Document;\n  pre32Limit?: number;\n  serializeFunctions?: boolean;\n  ignoreUndefined?: boolean;\n  maxBsonSize?: number;\n  checkKeys?: boolean;\n  secondaryOk?: boolean;\n\n  requestId?: number;\n  moreToCome?: boolean;\n  exhaustAllowed?: boolean;\n  readPreference?: ReadPreference;\n}\n\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nexport class Query {\n  ns: string;\n  query: Document;\n  numberToSkip: number;\n  numberToReturn: number;\n  returnFieldSelector?: Document;\n  requestId: number;\n  pre32Limit?: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  maxBsonSize: number;\n  checkKeys: boolean;\n  batchSize: number;\n  tailable: boolean;\n  secondaryOk: boolean;\n  oplogReplay: boolean;\n  noCursorTimeout: boolean;\n  awaitData: boolean;\n  exhaust: boolean;\n  partial: boolean;\n  documentsReturnedIn?: string;\n\n  constructor(ns: string, query: Document, options: OpQueryOptions) {\n    // Basic options needed to be passed in\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (ns == null) throw new MongoRuntimeError('Namespace must be specified for query');\n    // TODO(NODE-3483): Replace with MongoCommandError\n    if (query == null) throw new MongoRuntimeError('A query document must be specified for query');\n\n    // Validate that we are not passing 0x00 in the collection name\n    if (ns.indexOf('\\x00') !== -1) {\n      // TODO(NODE-3483): Use MongoNamespace static method\n      throw new MongoRuntimeError('Namespace cannot contain a null character');\n    }\n\n    // Basic options\n    this.ns = ns;\n    this.query = query;\n\n    // Additional options\n    this.numberToSkip = options.numberToSkip || 0;\n    this.numberToReturn = options.numberToReturn || 0;\n    this.returnFieldSelector = options.returnFieldSelector || undefined;\n    this.requestId = Query.getRequestId();\n\n    // special case for pre-3.2 find commands, delete ASAP\n    this.pre32Limit = options.pre32Limit;\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.batchSize = this.numberToReturn;\n\n    // Flags\n    this.tailable = false;\n    this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n    this.oplogReplay = false;\n    this.noCursorTimeout = false;\n    this.awaitData = false;\n    this.exhaust = false;\n    this.partial = false;\n  }\n\n  /** Assign next request Id. */\n  incRequestId(): void {\n    this.requestId = _requestId++;\n  }\n\n  /** Peek next request Id. */\n  nextRequestId(): number {\n    return _requestId + 1;\n  }\n\n  /** Increment then return next request Id. */\n  static getRequestId(): number {\n    return ++_requestId;\n  }\n\n  // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n  toBin(): Uint8Array[] {\n    const buffers = [];\n    let projection = null;\n\n    // Set up the flags\n    let flags = 0;\n    if (this.tailable) {\n      flags |= OPTS_TAILABLE_CURSOR;\n    }\n\n    if (this.secondaryOk) {\n      flags |= OPTS_SECONDARY;\n    }\n\n    if (this.oplogReplay) {\n      flags |= OPTS_OPLOG_REPLAY;\n    }\n\n    if (this.noCursorTimeout) {\n      flags |= OPTS_NO_CURSOR_TIMEOUT;\n    }\n\n    if (this.awaitData) {\n      flags |= OPTS_AWAIT_DATA;\n    }\n\n    if (this.exhaust) {\n      flags |= OPTS_EXHAUST;\n    }\n\n    if (this.partial) {\n      flags |= OPTS_PARTIAL;\n    }\n\n    // If batchSize is different to this.numberToReturn\n    if (this.batchSize !== this.numberToReturn) this.numberToReturn = this.batchSize;\n\n    // Allocate write protocol header buffer\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 + // Flags\n        Buffer.byteLength(this.ns) +\n        1 + // namespace\n        4 + // numberToSkip\n        4 // numberToReturn\n    );\n\n    // Add header to buffers\n    buffers.push(header);\n\n    // Serialize the query\n    const query = BSON.serialize(this.query, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n\n    // Add query document\n    buffers.push(query);\n\n    if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n      // Serialize the projection document\n      projection = BSON.serialize(this.returnFieldSelector, {\n        checkKeys: this.checkKeys,\n        serializeFunctions: this.serializeFunctions,\n        ignoreUndefined: this.ignoreUndefined\n      });\n      // Add projection document\n      buffers.push(projection);\n    }\n\n    // Total message size\n    const totalLength = header.length + query.length + (projection ? projection.length : 0);\n\n    // Set up the index\n    let index = 4;\n\n    // Write total document length\n    header[3] = (totalLength >> 24) & 0xff;\n    header[2] = (totalLength >> 16) & 0xff;\n    header[1] = (totalLength >> 8) & 0xff;\n    header[0] = totalLength & 0xff;\n\n    // Write header information requestId\n    header[index + 3] = (this.requestId >> 24) & 0xff;\n    header[index + 2] = (this.requestId >> 16) & 0xff;\n    header[index + 1] = (this.requestId >> 8) & 0xff;\n    header[index] = this.requestId & 0xff;\n    index = index + 4;\n\n    // Write header information responseTo\n    header[index + 3] = (0 >> 24) & 0xff;\n    header[index + 2] = (0 >> 16) & 0xff;\n    header[index + 1] = (0 >> 8) & 0xff;\n    header[index] = 0 & 0xff;\n    index = index + 4;\n\n    // Write header information OP_QUERY\n    header[index + 3] = (OP_QUERY >> 24) & 0xff;\n    header[index + 2] = (OP_QUERY >> 16) & 0xff;\n    header[index + 1] = (OP_QUERY >> 8) & 0xff;\n    header[index] = OP_QUERY & 0xff;\n    index = index + 4;\n\n    // Write header information flags\n    header[index + 3] = (flags >> 24) & 0xff;\n    header[index + 2] = (flags >> 16) & 0xff;\n    header[index + 1] = (flags >> 8) & 0xff;\n    header[index] = flags & 0xff;\n    index = index + 4;\n\n    // Write collection name\n    index = index + header.write(this.ns, index, 'utf8') + 1;\n    header[index - 1] = 0;\n\n    // Write header information flags numberToSkip\n    header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n    header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n    header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n    header[index] = this.numberToSkip & 0xff;\n    index = index + 4;\n\n    // Write header information flags numberToReturn\n    header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n    header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n    header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n    header[index] = this.numberToReturn & 0xff;\n    index = index + 4;\n\n    // Return the buffers\n    return buffers;\n  }\n}\n\n/** @internal */\nexport interface MessageHeader {\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n}\n\n/** @internal */\nexport interface OpResponseOptions extends BSONSerializeOptions {\n  documentsReturnedIn?: string | null;\n}\n\n/** @internal */\nexport class Response {\n  parsed: boolean;\n  raw: Buffer;\n  data: Buffer;\n  opts: OpResponseOptions;\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n  responseFlags?: number;\n  cursorId?: Long;\n  startingFrom?: number;\n  numberReturned?: number;\n  documents: (Document | Buffer)[] = new Array(0);\n  cursorNotFound?: boolean;\n  queryFailure?: boolean;\n  shardConfigStale?: boolean;\n  awaitCapable?: boolean;\n  promoteLongs: boolean;\n  promoteValues: boolean;\n  promoteBuffers: boolean;\n  bsonRegExp?: boolean;\n  index?: number;\n\n  constructor(\n    message: Buffer,\n    msgHeader: MessageHeader,\n    msgBody: Buffer,\n    opts?: OpResponseOptions\n  ) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Flag values\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues =\n      typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers =\n      typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n  }\n\n  isParsed(): boolean {\n    return this.parsed;\n  }\n\n  parse(options: OpResponseOptions): void {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    let bsonSize;\n\n    // Set up the options\n    const _options: BSONSerializeOptions = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp\n    };\n\n    // Position within OP_REPLY at which documents start\n    // (See https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n    this.index = 20;\n\n    // Read the message body\n    this.responseFlags = this.data.readInt32LE(0);\n    this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n    this.startingFrom = this.data.readInt32LE(12);\n    this.numberReturned = this.data.readInt32LE(16);\n\n    // Preallocate document array\n    this.documents = new Array(this.numberReturned);\n\n    this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n    this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n    this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n    this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n\n    // Parse Body\n    for (let i = 0; i < this.numberReturned; i++) {\n      bsonSize =\n        this.data[this.index] |\n        (this.data[this.index + 1] << 8) |\n        (this.data[this.index + 2] << 16) |\n        (this.data[this.index + 3] << 24);\n\n      // If we have raw results specified slice the return document\n      if (raw) {\n        this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n      } else {\n        this.documents[i] = BSON.deserialize(\n          this.data.slice(this.index, this.index + bsonSize),\n          _options\n        );\n      }\n\n      // Adjust the index\n      this.index = this.index + bsonSize;\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw: Document = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n\n      const doc = BSON.deserialize(this.documents[0] as Buffer, _options);\n      this.documents = [doc];\n    }\n\n    // Set parsed\n    this.parsed = true;\n  }\n}\n\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\n/** @internal */\nexport interface OpMsgOptions {\n  requestId: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  checkKeys: boolean;\n  maxBsonSize: number;\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n  readPreference: ReadPreference;\n}\n\n/** @internal */\nexport class Msg {\n  ns: string;\n  command: Document;\n  options: OpQueryOptions;\n  requestId: number;\n  serializeFunctions: boolean;\n  ignoreUndefined: boolean;\n  checkKeys: boolean;\n  maxBsonSize: number;\n  checksumPresent: boolean;\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n\n  constructor(ns: string, command: Document, options: OpQueryOptions) {\n    // Basic options needed to be passed in\n    if (command == null)\n      throw new MongoInvalidArgumentError('Query document must be specified for query');\n\n    // Basic options\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    }\n\n    // Ensure empty options\n    this.options = options ?? {};\n\n    // Additional options\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n\n    // Serialization option\n    this.serializeFunctions =\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined =\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n\n    // flags\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed =\n      typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin(): Buffer[] {\n    const buffers: Buffer[] = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(\n      4 * 4 + // Header\n        4 // Flags\n    );\n\n    buffers.push(header);\n\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n\n    header.writeInt32LE(totalLength, 0); // messageLength\n    header.writeInt32LE(this.requestId, 4); // requestID\n    header.writeInt32LE(0, 8); // responseTo\n    header.writeInt32LE(OP_MSG, 12); // opCode\n    header.writeUInt32LE(flags, 16); // flags\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers: Uint8Array[], document: Document): number {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document: Document): Uint8Array {\n    return BSON.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n\n  static getRequestId(): number {\n    _requestId = (_requestId + 1) & 0x7fffffff;\n    return _requestId;\n  }\n}\n\n/** @internal */\nexport class BinMsg {\n  parsed: boolean;\n  raw: Buffer;\n  data: Buffer;\n  opts: OpResponseOptions;\n  length: number;\n  requestId: number;\n  responseTo: number;\n  opCode: number;\n  fromCompressed?: boolean;\n  responseFlags: number;\n  checksumPresent: boolean;\n  moreToCome: boolean;\n  exhaustAllowed: boolean;\n  promoteLongs: boolean;\n  promoteValues: boolean;\n  promoteBuffers: boolean;\n  bsonRegExp: boolean;\n  documents: (Document | Buffer)[];\n  index?: number;\n\n  constructor(\n    message: Buffer,\n    msgHeader: MessageHeader,\n    msgBody: Buffer,\n    opts?: OpResponseOptions\n  ) {\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.opts = opts ?? {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false,\n      bsonRegExp: false\n    };\n\n    // Read the message header\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed;\n\n    // Read response flags\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n    this.promoteValues =\n      typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n    this.promoteBuffers =\n      typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n    this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n\n    this.documents = [];\n  }\n\n  isParsed(): boolean {\n    return this.parsed;\n  }\n\n  parse(options: OpResponseOptions): void {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options ?? {};\n\n    this.index = 4;\n    // Allow the return of raw documents instead of parsing\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n    const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n    const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n    const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n    const validation = this.parseBsonSerializationOptions(options);\n\n    // Set up the options\n    const bsonOptions: BSONSerializeOptions = {\n      promoteLongs,\n      promoteValues,\n      promoteBuffers,\n      bsonRegExp,\n      validation\n      // Due to the strictness of the BSON libraries validation option we need this cast\n    } as BSONSerializeOptions & { validation: { utf8: { writeErrors: boolean } } };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n      if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n        this.index += bsonSize;\n      } else if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n\n        // TODO(NODE-3483): Replace with MongoDeprecationError\n        throw new MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw: Document = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      bsonOptions.fieldsAsRaw = fieldsAsRaw;\n      const doc = BSON.deserialize(this.documents[0] as Buffer, bsonOptions);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n\n  parseBsonSerializationOptions({ enableUtf8Validation }: BSONSerializeOptions): {\n    utf8: { writeErrors: false } | false;\n  } {\n    if (enableUtf8Validation === false) {\n      return { utf8: false };\n    }\n\n    return { utf8: { writeErrors: false } };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}