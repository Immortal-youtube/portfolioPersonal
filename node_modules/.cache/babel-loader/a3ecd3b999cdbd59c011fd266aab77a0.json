{"ast":null,"code":"import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift()];\n  }\n\n  let key = `AWS4${credentials.secretAccessKey}`;\n\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n\n  return signingKeyCache[cacheKey] = key;\n};\nexport const clearCredentialCache = () => {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(cacheKey => {\n    delete signingKeyCache[cacheKey];\n  });\n};\n\nconst hmac = (ctor, secret, data) => {\n  const hash = new ctor(secret);\n  hash.update(toUint8Array(data));\n  return hash.digest();\n};","map":{"version":3,"names":["toHex","toUint8Array","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","getSigningKey","sha256Constructor","credentials","credsHash","hmac","secretAccessKey","accessKeyId","cacheKey","sessionToken","push","length","shift","key","signable","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js"],"sourcesContent":["import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nexport const clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(toUint8Array(data));\n    return hash.digest();\n};\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,4BAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,aAApD;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,OAApB,KAAiC,GAAEF,SAAU,IAAGC,MAAO,IAAGC,OAAQ,IAAGP,mBAAoB,EAA7G;AACP,OAAO,MAAMQ,aAAa,GAAG,OAAOC,iBAAP,EAA0BC,WAA1B,EAAuCL,SAAvC,EAAkDC,MAAlD,EAA0DC,OAA1D,KAAsE;EAC/F,MAAMI,SAAS,GAAG,MAAMC,IAAI,CAACH,iBAAD,EAAoBC,WAAW,CAACG,eAAhC,EAAiDH,WAAW,CAACI,WAA7D,CAA5B;EACA,MAAMC,QAAQ,GAAI,GAAEV,SAAU,IAAGC,MAAO,IAAGC,OAAQ,IAAGT,KAAK,CAACa,SAAD,CAAY,IAAGD,WAAW,CAACM,YAAa,EAAnG;;EACA,IAAID,QAAQ,IAAIb,eAAhB,EAAiC;IAC7B,OAAOA,eAAe,CAACa,QAAD,CAAtB;EACH;;EACDZ,UAAU,CAACc,IAAX,CAAgBF,QAAhB;;EACA,OAAOZ,UAAU,CAACe,MAAX,GAAoBjB,cAA3B,EAA2C;IACvC,OAAOC,eAAe,CAACC,UAAU,CAACgB,KAAX,EAAD,CAAtB;EACH;;EACD,IAAIC,GAAG,GAAI,OAAMV,WAAW,CAACG,eAAgB,EAA7C;;EACA,KAAK,MAAMQ,QAAX,IAAuB,CAAChB,SAAD,EAAYC,MAAZ,EAAoBC,OAApB,EAA6BP,mBAA7B,CAAvB,EAA0E;IACtEoB,GAAG,GAAG,MAAMR,IAAI,CAACH,iBAAD,EAAoBW,GAApB,EAAyBC,QAAzB,CAAhB;EACH;;EACD,OAAQnB,eAAe,CAACa,QAAD,CAAf,GAA4BK,GAApC;AACH,CAfM;AAgBP,OAAO,MAAME,oBAAoB,GAAG,MAAM;EACtCnB,UAAU,CAACe,MAAX,GAAoB,CAApB;EACAK,MAAM,CAACC,IAAP,CAAYtB,eAAZ,EAA6BuB,OAA7B,CAAsCV,QAAD,IAAc;IAC/C,OAAOb,eAAe,CAACa,QAAD,CAAtB;EACH,CAFD;AAGH,CALM;;AAMP,MAAMH,IAAI,GAAG,CAACc,IAAD,EAAOC,MAAP,EAAeC,IAAf,KAAwB;EACjC,MAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASC,MAAT,CAAb;EACAE,IAAI,CAACC,MAAL,CAAY/B,YAAY,CAAC6B,IAAD,CAAxB;EACA,OAAOC,IAAI,CAACE,MAAL,EAAP;AACH,CAJD"},"metadata":{},"sourceType":"module"}