{"ast":null,"code":"export const constructStack = () => {\n  let absoluteEntries = [];\n  let relativeEntries = [];\n  const entriesNameSet = new Set();\n\n  const sort = entries => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n\n  const removeByName = toRemove => {\n    let isRemoved = false;\n\n    const filterCb = entry => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = toRemove => {\n    let isRemoved = false;\n\n    const filterCb = entry => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = toStack => {\n    absoluteEntries.forEach(entry => {\n      toStack.add(entry.middleware, { ...entry\n      });\n    });\n    relativeEntries.forEach(entry => {\n      toStack.addRelativeTo(entry.middleware, { ...entry\n      });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = from => {\n    const expandedMiddlewareList = [];\n    from.before.forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  const getMiddlewareList = function () {\n    let debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const normalizedAbsoluteEntries = [];\n    const normalizedRelativeEntries = [];\n    const normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(entry => {\n      const normalizedEntry = { ...entry,\n        before: [],\n        after: []\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(entry => {\n      const normalizedEntry = { ...entry,\n        before: [],\n        after: []\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(entry => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n\n        if (toMiddleware === undefined) {\n          if (debug) {\n            return;\n          }\n\n          throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n        }\n\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {\n      wholeList.push(...expendedMiddlewareList);\n      return wholeList;\n    }, []);\n    return mainChain;\n  };\n\n  const stack = {\n    add: function (middleware) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        name,\n        override\n      } = options;\n      const entry = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options\n      };\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex(entry => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n          }\n\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: (middleware, options) => {\n      const {\n        name,\n        override\n      } = options;\n      const entry = {\n        middleware,\n        ...options\n      };\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex(entry => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n          }\n\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      relativeEntries.push(entry);\n    },\n    clone: () => cloneTo(constructStack()),\n    use: plugin => {\n      plugin.applyToStack(stack);\n    },\n    remove: toRemove => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: toRemove => {\n      let isRemoved = false;\n\n      const filterCb = entry => {\n        const {\n          tags,\n          name\n        } = entry;\n\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n\n        return true;\n      };\n\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: from => {\n      const cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    identify: () => {\n      return getMiddlewareList(true).map(mw => {\n        return mw.name + \": \" + (mw.tags || []).join(\",\");\n      });\n    },\n    resolve: (handler, context) => {\n      for (const middleware of getMiddlewareList().map(entry => entry.middleware).reverse()) {\n        handler = middleware(handler, context);\n      }\n\n      return handler;\n    }\n  };\n  return stack;\n};\nconst stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nconst priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"names":["constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","sort","entries","a","b","stepWeights","step","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","name","delete","filter","removeByReference","middleware","cloneTo","toStack","forEach","add","addRelativeTo","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","length","after","push","reverse","getMiddlewareList","debug","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","undefined","Error","relation","mainChain","map","reduce","wholeList","expendedMiddlewareList","stack","options","override","has","toOverrideIndex","findIndex","toOverride","splice","clone","use","plugin","applyToStack","remove","removeByTag","tags","includes","concat","cloned","identify","mw","join","resolve","handler","context","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js"],"sourcesContent":["export const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                return mw.name + \": \" + (mw.tags || []).join(\",\");\n            });\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}