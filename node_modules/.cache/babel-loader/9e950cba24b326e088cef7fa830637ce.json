{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst delete_1 = require(\"../operations/delete\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst insert_1 = require(\"../operations/insert\");\n\nconst operation_1 = require(\"../operations/operation\");\n\nconst update_1 = require(\"../operations/update\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\n\n\nconst kServerError = Symbol('serverError');\n/** @public */\n\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\n\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n\n}\n\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\n\nclass BulkWriteResult {\n  static generateIdMap(ids) {\n    const idMap = {};\n\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n\n    return idMap;\n  }\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n\n\n  constructor(bulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n\n\n  get ok() {\n    return this.result.ok;\n  }\n  /** The number of inserted documents */\n\n\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /** Number of upserted documents */\n\n\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /** Number of matched documents */\n\n\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /** Number of documents updated physically on disk */\n\n\n  get nModified() {\n    return this.result.nModified;\n  }\n  /** Number of removed documents */\n\n\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /** Returns an array of all inserted ids */\n\n\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Returns an array of all upserted ids */\n\n\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n\n\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n\n\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n\n\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n\n\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n\n\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n\n\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve the write concern error if one exists */\n\n\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg; // TODO: Something better\n\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n\n  toString() {\n    return `BulkWriteResult(${this.result})`;\n  }\n\n  isOk() {\n    return this.result.ok === 1;\n  }\n\n}\n\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\n\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n\n\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n\n\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n\n\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n\n  toJSON() {\n    return this[kServerError];\n  }\n\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n\n}\n\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\n\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n\n\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n\n\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n\n\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n\n\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n\n\n  getOperation() {\n    return this.err.op;\n  }\n\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n\n}\n\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\n\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  } // Do we have a top level error stop processing and return\n\n\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  } // If we have an insert Batch type\n\n\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  } // If we have an insert Batch type\n\n\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0; // We have an array of upserted values, we need to rewrite the indexes\n\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  } // If we have an update Batch type\n\n\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nexports.mergeBatchResults = mergeBatchResults;\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    } // Merge the results together\n\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return; // Execute the next command in line\n\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, { ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  } // Set an operationIf if provided\n\n\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  } // Is the bypassDocumentValidation options specific\n\n\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  } // Is the checkKeys option disabled\n\n\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.s.db.s.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0; // Merge top level error and return\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\n\n\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n\n\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n\n\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n\n\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n\n\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n\n\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n\n\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n\n}\n\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\n\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n\n\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n\n\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n\n\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n\n\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n\n\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n\n\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n\n\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n\n\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n\n\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n\n}\n\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\n\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n\n}\n/** @public */\n\n\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options; // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n\n    const namespace = collection.s.namespace; // Used to mark operation as executed\n\n    const executed = false; // Current item\n\n    const currentOp = undefined; // Set max byte size\n\n    const hello = topology.lastHello(); // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000; // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2; // Final options for retryable writes\n\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db); // Final results\n\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    }; // Internal state\n\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    }; // bypass Validation\n\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n\n\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    } // Save a current selector\n\n\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n\n\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne,\n          multi: false\n        });\n\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, { ...op.updateOne,\n          multi: false\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, { ...op.updateMany,\n          multi: true\n        });\n\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne,\n        limit: 1\n      }));\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany,\n        limit: 0\n      }));\n    } // otherwise an unknown operation was provided\n\n\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get batches() {\n    const batches = [...this.s.batches];\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n\n    return batches;\n  }\n\n  async execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.s.executed) {\n      throw new error_1.MongoBatchReExecutionError();\n    }\n\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    } // If we have current batch\n\n\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    } // If we have no operations in the bulk raise an error\n\n\n    if (this.s.batches.length === 0) {\n      throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection.s.db.s.client, operation);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n\n  get() {\n    return this.s.currentIndex;\n  }\n\n});\n\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"mappings":"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","names":["kServerError","Symbol","exports","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","generateIdMap","ids","idMap","doc","index","_id","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","defineProperty","value","enumerable","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","error_1","WriteConcernFailed","toString","isOk","error","errInfo","toJSON","WriteError","getOperation","op","JSON","stringify","mergeBatchResults","batch","writeError","message","push","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","collection","db","client","insert_1","namespace","update_1","delete_1","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","selector","updateOne","replaceOne","replacement","deleteOne","delete","upsert","collation","arrayFilters","hint","BulkWriteShimOperation","operation_1","execute","server","session","BulkOperationBase","topology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","write_concern_1","fromOptions","bsonOptions","insert","document","shouldForceServerObjectId","bson_1","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","operation","msg","prototype","get","bulkOp"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import { BSONSerializeOptions, Document, ObjectId, resolveBSONOptions } from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, UpdateStatement } from '../operations/update';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport {\n  applyRetryableWrites,\n  Callback,\n  getTopology,\n  hasAtomicOperators,\n  MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @internal */\nconst kServerError = Symbol('serverError');\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = typeof BatchType[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the replaced document. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /** A document or pipeline containing update operators. */\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/** @internal */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  private readonly result: BulkResult;\n  /** Number of documents inserted. */\n  readonly insertedCount: number;\n  /** Number of documents matched for update. */\n  readonly matchedCount: number;\n  /** Number of documents modified. */\n  readonly modifiedCount: number;\n  /** Number of documents deleted. */\n  readonly deletedCount: number;\n  /** Number of documents upserted. */\n  readonly upsertedCount: number;\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  readonly upsertedIds: { [key: number]: any };\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  readonly insertedIds: { [key: number]: any };\n\n  private static generateIdMap(ids: Document[]): { [key: number]: any } {\n    const idMap: { [index: number]: any } = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /** The number of inserted documents */\n  get nInserted(): number {\n    return this.result.nInserted;\n  }\n\n  /** Number of upserted documents */\n  get nUpserted(): number {\n    return this.result.nUpserted;\n  }\n\n  /** Number of matched documents */\n  get nMatched(): number {\n    return this.result.nMatched;\n  }\n\n  /** Number of documents updated physically on disk */\n  get nModified(): number {\n    return this.result.nModified;\n  }\n\n  /** Number of removed documents */\n  get nRemoved(): number {\n    return this.result.nRemoved;\n  }\n\n  /** Returns an array of all inserted ids */\n  getInsertedIds(): Document[] {\n    return this.result.insertedIds;\n  }\n\n  /** Returns an array of all upserted ids */\n  getUpsertedIds(): Document[] {\n    return this.result.upserted;\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\n    }\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${this.result})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  [kServerError]: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this[kServerError] = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this[kServerError].code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this[kServerError].errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this[kServerError].errInfo;\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this[kServerError];\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions,\n  callback: Callback<BulkWriteResult>\n) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift() as Batch;\n\n  function resultHandler(err?: AnyError, result?: Document) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\n      return callback(\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\n      );\n    }\n\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  const finalOptions = resolveOptions(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites =\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n\n  try {\n    if (isInsertBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isUpdateBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    } else if (isDeleteBatch(batch)) {\n      executeOperation(\n        bulkOperation.s.collection.s.db.s.client,\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\n        resultHandler\n      );\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\n\nfunction handleMongoWriteConcernError(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err: MongoWriteConcernError,\n  callback: Callback<BulkWriteResult>\n) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n\n  callback(\n    new MongoBulkWriteError(\n      {\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n      },\n      new BulkWriteResult(bulkResult)\n    )\n  );\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /** Creates a new MongoBulkWriteError */\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document | Document[]): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n  /** Specifies hint for the bulk operation. */\n  hint(hint: Hint): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n  ordered?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  execute(server: Server, session: ClientSession | undefined, callback: Callback<any>): void {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new ObjectId();\n    }\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\n          (op.insertOne as Document)._id = new ObjectId();\n        }\n\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\n      }\n\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new ObjectId();\n      }\n\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  async execute(options: BulkWriteOptions = {}): Promise<BulkWriteResult> {\n    if (this.s.executed) {\n      throw new MongoBatchReExecutionError();\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options, ...options };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n\n    return executeOperation(this.s.collection.s.db.s.client, operation);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      callback(\n        new MongoBulkWriteError(\n          {\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          },\n          writeResult\n        )\n      );\n\n      return true;\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\n\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n\n  return false;\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"]},"metadata":{},"sourceType":"script"}