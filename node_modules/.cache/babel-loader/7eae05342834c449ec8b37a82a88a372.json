{"ast":null,"code":"'use strict';\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n};\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder;\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error('Unknown AST node type ' + node.type + '. ' + 'Maybe you need to change PostCSS stringifier.');\n    }\n    /* c8 ignore stop */\n\n\n    this[node.type](node, semicolon);\n  }\n\n  document(node) {\n    this.body(node);\n  }\n\n  root(node) {\n    this.body(node);\n    if (node.raws.after) this.builder(node.raws.after);\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft');\n    let right = this.raw(node, 'right', 'commentRight');\n    this.builder('/*' + left + node.text + right + '*/', node);\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon');\n    let string = node.prop + between + this.rawValue(node, 'value');\n\n    if (node.important) {\n      string += node.raws.important || ' !important';\n    }\n\n    if (semicolon) string += ';';\n    this.builder(string, node);\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'));\n\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end');\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name;\n    let params = node.params ? this.rawValue(node, 'params') : '';\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName;\n    } else if (params) {\n      name += ' ';\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params);\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '');\n      this.builder(name + params + end, node);\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1;\n\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break;\n      last -= 1;\n    }\n\n    let semicolon = this.raw(node, 'semicolon');\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i];\n      let before = this.raw(child, 'before');\n      if (before) this.builder(before);\n      this.stringify(child, last !== i || semicolon);\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen');\n    this.builder(start + between + '{', node, 'start');\n    let after;\n\n    if (node.nodes && node.nodes.length) {\n      this.body(node);\n      after = this.raw(node, 'after');\n    } else {\n      after = this.raw(node, 'after', 'emptyBody');\n    }\n\n    if (after) this.builder(after);\n    this.builder('}', node, 'end');\n  }\n\n  raw(node, own, detect) {\n    let value;\n    if (!detect) detect = own; // Already had\n\n    if (own) {\n      value = node.raws[own];\n      if (typeof value !== 'undefined') return value;\n    }\n\n    let parent = node.parent;\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || parent.type === 'root' && parent.first === node) {\n        return '';\n      } // `root` nodes in `document` should use only their own raws\n\n\n      if (parent && parent.type === 'document') {\n        return '';\n      }\n    } // Floating child without parent\n\n\n    if (!parent) return DEFAULT_RAW[detect]; // Detect style by other nodes\n\n    let root = node.root();\n    if (!root.rawCache) root.rawCache = {};\n\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect];\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect);\n    } else {\n      let method = 'raw' + capitalize(detect);\n\n      if (this[method]) {\n        value = this[method](root, node);\n      } else {\n        root.walk(i => {\n          value = i.raws[own];\n          if (typeof value !== 'undefined') return false;\n        });\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect];\n    root.rawCache[detect] = value;\n    return value;\n  }\n\n  rawSemicolon(root) {\n    let value;\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  }\n\n  rawEmptyBody(root) {\n    let value;\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent;\n    let value;\n    root.walk(i => {\n      let p = i.parent;\n\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n');\n          value = parts[parts.length - 1];\n          value = value.replace(/\\S/g, '');\n          return false;\n        }\n      }\n    });\n    return value;\n  }\n\n  rawBeforeComment(root, node) {\n    let value;\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (value) {\n      value = value.replace(/\\S/g, '');\n    }\n\n    return value;\n  }\n\n  rawBeforeDecl(root, node) {\n    let value;\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before;\n\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '');\n        }\n\n        return false;\n      }\n    });\n\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule');\n    } else if (value) {\n      value = value.replace(/\\S/g, '');\n    }\n\n    return value;\n  }\n\n  rawBeforeRule(root) {\n    let value;\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/\\S/g, '');\n    return value;\n  }\n\n  rawBeforeClose(root) {\n    let value;\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after;\n\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      }\n    });\n    if (value) value = value.replace(/\\S/g, '');\n    return value;\n  }\n\n  rawBeforeOpen(root) {\n    let value;\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between;\n        if (typeof value !== 'undefined') return false;\n      }\n    });\n    return value;\n  }\n\n  rawColon(root) {\n    let value;\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '');\n        return false;\n      }\n    });\n    return value;\n  }\n\n  beforeAfter(node, detect) {\n    let value;\n\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl');\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment');\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule');\n    } else {\n      value = this.raw(node, null, 'beforeClose');\n    }\n\n    let buf = node.parent;\n    let depth = 0;\n\n    while (buf && buf.type !== 'root') {\n      depth += 1;\n      buf = buf.parent;\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent');\n\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent;\n      }\n    }\n\n    return value;\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop];\n    let raw = node.raws[prop];\n\n    if (raw && raw.value === value) {\n      return raw.raw;\n    }\n\n    return value;\n  }\n\n}\n\nmodule.exports = Stringifier;\nStringifier.default = Stringifier;","map":{"version":3,"names":["DEFAULT_RAW","colon","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","after","emptyBody","commentLeft","commentRight","semicolon","capitalize","str","toUpperCase","slice","Stringifier","constructor","builder","stringify","node","type","Error","document","body","root","raws","comment","left","raw","right","text","decl","between","string","prop","rawValue","important","rule","block","ownSemicolon","atrule","name","params","afterName","nodes","end","last","length","i","child","before","start","own","detect","value","parent","first","rawCache","beforeAfter","method","walk","rawSemicolon","rawEmptyBody","rawIndent","p","parts","split","replace","rawBeforeComment","walkComments","includes","rawBeforeDecl","walkDecls","rawBeforeRule","rawBeforeClose","rawBeforeOpen","rawColon","buf","depth","step","module","exports","default"],"sources":["C:/Users/anshs/SynologyDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/postcss/lib/stringifier.js"],"sourcesContent":["'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG;EAClBC,KAAK,EAAE,IADW;EAElBC,MAAM,EAAE,MAFU;EAGlBC,UAAU,EAAE,IAHM;EAIlBC,UAAU,EAAE,IAJM;EAKlBC,UAAU,EAAE,GALM;EAMlBC,WAAW,EAAE,IANK;EAOlBC,aAAa,EAAE,IAPG;EAQlBC,KAAK,EAAE,IARW;EASlBC,SAAS,EAAE,EATO;EAUlBC,WAAW,EAAE,GAVK;EAWlBC,YAAY,EAAE,GAXI;EAYlBC,SAAS,EAAE;AAZO,CAApB;;AAeA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;EACvB,OAAOA,GAAG,CAAC,CAAD,CAAH,CAAOC,WAAP,KAAuBD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAA9B;AACD;;AAED,MAAMC,WAAN,CAAkB;EAChBC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKA,OAAL,GAAeA,OAAf;EACD;;EAEDC,SAAS,CAACC,IAAD,EAAOT,SAAP,EAAkB;IACzB;IACA,IAAI,CAAC,KAAKS,IAAI,CAACC,IAAV,CAAL,EAAsB;MACpB,MAAM,IAAIC,KAAJ,CACJ,2BACEF,IAAI,CAACC,IADP,GAEE,IAFF,GAGE,+CAJE,CAAN;IAMD;IACD;;;IACA,KAAKD,IAAI,CAACC,IAAV,EAAgBD,IAAhB,EAAsBT,SAAtB;EACD;;EAEDY,QAAQ,CAACH,IAAD,EAAO;IACb,KAAKI,IAAL,CAAUJ,IAAV;EACD;;EAEDK,IAAI,CAACL,IAAD,EAAO;IACT,KAAKI,IAAL,CAAUJ,IAAV;IACA,IAAIA,IAAI,CAACM,IAAL,CAAUnB,KAAd,EAAqB,KAAKW,OAAL,CAAaE,IAAI,CAACM,IAAL,CAAUnB,KAAvB;EACtB;;EAEDoB,OAAO,CAACP,IAAD,EAAO;IACZ,IAAIQ,IAAI,GAAG,KAAKC,GAAL,CAAST,IAAT,EAAe,MAAf,EAAuB,aAAvB,CAAX;IACA,IAAIU,KAAK,GAAG,KAAKD,GAAL,CAAST,IAAT,EAAe,OAAf,EAAwB,cAAxB,CAAZ;IACA,KAAKF,OAAL,CAAa,OAAOU,IAAP,GAAcR,IAAI,CAACW,IAAnB,GAA0BD,KAA1B,GAAkC,IAA/C,EAAqDV,IAArD;EACD;;EAEDY,IAAI,CAACZ,IAAD,EAAOT,SAAP,EAAkB;IACpB,IAAIsB,OAAO,GAAG,KAAKJ,GAAL,CAAST,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAAd;IACA,IAAIc,MAAM,GAAGd,IAAI,CAACe,IAAL,GAAYF,OAAZ,GAAsB,KAAKG,QAAL,CAAchB,IAAd,EAAoB,OAApB,CAAnC;;IAEA,IAAIA,IAAI,CAACiB,SAAT,EAAoB;MAClBH,MAAM,IAAId,IAAI,CAACM,IAAL,CAAUW,SAAV,IAAuB,aAAjC;IACD;;IAED,IAAI1B,SAAJ,EAAeuB,MAAM,IAAI,GAAV;IACf,KAAKhB,OAAL,CAAagB,MAAb,EAAqBd,IAArB;EACD;;EAEDkB,IAAI,CAAClB,IAAD,EAAO;IACT,KAAKmB,KAAL,CAAWnB,IAAX,EAAiB,KAAKgB,QAAL,CAAchB,IAAd,EAAoB,UAApB,CAAjB;;IACA,IAAIA,IAAI,CAACM,IAAL,CAAUc,YAAd,EAA4B;MAC1B,KAAKtB,OAAL,CAAaE,IAAI,CAACM,IAAL,CAAUc,YAAvB,EAAqCpB,IAArC,EAA2C,KAA3C;IACD;EACF;;EAEDqB,MAAM,CAACrB,IAAD,EAAOT,SAAP,EAAkB;IACtB,IAAI+B,IAAI,GAAG,MAAMtB,IAAI,CAACsB,IAAtB;IACA,IAAIC,MAAM,GAAGvB,IAAI,CAACuB,MAAL,GAAc,KAAKP,QAAL,CAAchB,IAAd,EAAoB,QAApB,CAAd,GAA8C,EAA3D;;IAEA,IAAI,OAAOA,IAAI,CAACM,IAAL,CAAUkB,SAAjB,KAA+B,WAAnC,EAAgD;MAC9CF,IAAI,IAAItB,IAAI,CAACM,IAAL,CAAUkB,SAAlB;IACD,CAFD,MAEO,IAAID,MAAJ,EAAY;MACjBD,IAAI,IAAI,GAAR;IACD;;IAED,IAAItB,IAAI,CAACyB,KAAT,EAAgB;MACd,KAAKN,KAAL,CAAWnB,IAAX,EAAiBsB,IAAI,GAAGC,MAAxB;IACD,CAFD,MAEO;MACL,IAAIG,GAAG,GAAG,CAAC1B,IAAI,CAACM,IAAL,CAAUO,OAAV,IAAqB,EAAtB,KAA6BtB,SAAS,GAAG,GAAH,GAAS,EAA/C,CAAV;MACA,KAAKO,OAAL,CAAawB,IAAI,GAAGC,MAAP,GAAgBG,GAA7B,EAAkC1B,IAAlC;IACD;EACF;;EAEDI,IAAI,CAACJ,IAAD,EAAO;IACT,IAAI2B,IAAI,GAAG3B,IAAI,CAACyB,KAAL,CAAWG,MAAX,GAAoB,CAA/B;;IACA,OAAOD,IAAI,GAAG,CAAd,EAAiB;MACf,IAAI3B,IAAI,CAACyB,KAAL,CAAWE,IAAX,EAAiB1B,IAAjB,KAA0B,SAA9B,EAAyC;MACzC0B,IAAI,IAAI,CAAR;IACD;;IAED,IAAIpC,SAAS,GAAG,KAAKkB,GAAL,CAAST,IAAT,EAAe,WAAf,CAAhB;;IACA,KAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,IAAI,CAACyB,KAAL,CAAWG,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;MAC1C,IAAIC,KAAK,GAAG9B,IAAI,CAACyB,KAAL,CAAWI,CAAX,CAAZ;MACA,IAAIE,MAAM,GAAG,KAAKtB,GAAL,CAASqB,KAAT,EAAgB,QAAhB,CAAb;MACA,IAAIC,MAAJ,EAAY,KAAKjC,OAAL,CAAaiC,MAAb;MACZ,KAAKhC,SAAL,CAAe+B,KAAf,EAAsBH,IAAI,KAAKE,CAAT,IAActC,SAApC;IACD;EACF;;EAED4B,KAAK,CAACnB,IAAD,EAAOgC,KAAP,EAAc;IACjB,IAAInB,OAAO,GAAG,KAAKJ,GAAL,CAAST,IAAT,EAAe,SAAf,EAA0B,YAA1B,CAAd;IACA,KAAKF,OAAL,CAAakC,KAAK,GAAGnB,OAAR,GAAkB,GAA/B,EAAoCb,IAApC,EAA0C,OAA1C;IAEA,IAAIb,KAAJ;;IACA,IAAIa,IAAI,CAACyB,KAAL,IAAczB,IAAI,CAACyB,KAAL,CAAWG,MAA7B,EAAqC;MACnC,KAAKxB,IAAL,CAAUJ,IAAV;MACAb,KAAK,GAAG,KAAKsB,GAAL,CAAST,IAAT,EAAe,OAAf,CAAR;IACD,CAHD,MAGO;MACLb,KAAK,GAAG,KAAKsB,GAAL,CAAST,IAAT,EAAe,OAAf,EAAwB,WAAxB,CAAR;IACD;;IAED,IAAIb,KAAJ,EAAW,KAAKW,OAAL,CAAaX,KAAb;IACX,KAAKW,OAAL,CAAa,GAAb,EAAkBE,IAAlB,EAAwB,KAAxB;EACD;;EAEDS,GAAG,CAACT,IAAD,EAAOiC,GAAP,EAAYC,MAAZ,EAAoB;IACrB,IAAIC,KAAJ;IACA,IAAI,CAACD,MAAL,EAAaA,MAAM,GAAGD,GAAT,CAFQ,CAIrB;;IACA,IAAIA,GAAJ,EAAS;MACPE,KAAK,GAAGnC,IAAI,CAACM,IAAL,CAAU2B,GAAV,CAAR;MACA,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC,OAAOA,KAAP;IACnC;;IAED,IAAIC,MAAM,GAAGpC,IAAI,CAACoC,MAAlB;;IAEA,IAAIF,MAAM,KAAK,QAAf,EAAyB;MACvB;MACA,IAAI,CAACE,MAAD,IAAYA,MAAM,CAACnC,IAAP,KAAgB,MAAhB,IAA0BmC,MAAM,CAACC,KAAP,KAAiBrC,IAA3D,EAAkE;QAChE,OAAO,EAAP;MACD,CAJsB,CAMvB;;;MACA,IAAIoC,MAAM,IAAIA,MAAM,CAACnC,IAAP,KAAgB,UAA9B,EAA0C;QACxC,OAAO,EAAP;MACD;IACF,CAtBoB,CAwBrB;;;IACA,IAAI,CAACmC,MAAL,EAAa,OAAOzD,WAAW,CAACuD,MAAD,CAAlB,CAzBQ,CA2BrB;;IACA,IAAI7B,IAAI,GAAGL,IAAI,CAACK,IAAL,EAAX;IACA,IAAI,CAACA,IAAI,CAACiC,QAAV,EAAoBjC,IAAI,CAACiC,QAAL,GAAgB,EAAhB;;IACpB,IAAI,OAAOjC,IAAI,CAACiC,QAAL,CAAcJ,MAAd,CAAP,KAAiC,WAArC,EAAkD;MAChD,OAAO7B,IAAI,CAACiC,QAAL,CAAcJ,MAAd,CAAP;IACD;;IAED,IAAIA,MAAM,KAAK,QAAX,IAAuBA,MAAM,KAAK,OAAtC,EAA+C;MAC7C,OAAO,KAAKK,WAAL,CAAiBvC,IAAjB,EAAuBkC,MAAvB,CAAP;IACD,CAFD,MAEO;MACL,IAAIM,MAAM,GAAG,QAAQhD,UAAU,CAAC0C,MAAD,CAA/B;;MACA,IAAI,KAAKM,MAAL,CAAJ,EAAkB;QAChBL,KAAK,GAAG,KAAKK,MAAL,EAAanC,IAAb,EAAmBL,IAAnB,CAAR;MACD,CAFD,MAEO;QACLK,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;UACbM,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAO2B,GAAP,CAAR;UACA,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC,OAAO,KAAP;QACnC,CAHD;MAID;IACF;;IAED,IAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkCA,KAAK,GAAGxD,WAAW,CAACuD,MAAD,CAAnB;IAElC7B,IAAI,CAACiC,QAAL,CAAcJ,MAAd,IAAwBC,KAAxB;IACA,OAAOA,KAAP;EACD;;EAEDO,YAAY,CAACrC,IAAD,EAAO;IACjB,IAAI8B,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIA,CAAC,CAACJ,KAAF,IAAWI,CAAC,CAACJ,KAAF,CAAQG,MAAnB,IAA6BC,CAAC,CAACF,IAAF,CAAO1B,IAAP,KAAgB,MAAjD,EAAyD;QACvDkC,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOf,SAAf;QACA,IAAI,OAAO4C,KAAP,KAAiB,WAArB,EAAkC,OAAO,KAAP;MACnC;IACF,CALD;IAMA,OAAOA,KAAP;EACD;;EAEDQ,YAAY,CAACtC,IAAD,EAAO;IACjB,IAAI8B,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIA,CAAC,CAACJ,KAAF,IAAWI,CAAC,CAACJ,KAAF,CAAQG,MAAR,KAAmB,CAAlC,EAAqC;QACnCO,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOnB,KAAf;QACA,IAAI,OAAOgD,KAAP,KAAiB,WAArB,EAAkC,OAAO,KAAP;MACnC;IACF,CALD;IAMA,OAAOA,KAAP;EACD;;EAEDS,SAAS,CAACvC,IAAD,EAAO;IACd,IAAIA,IAAI,CAACC,IAAL,CAAUzB,MAAd,EAAsB,OAAOwB,IAAI,CAACC,IAAL,CAAUzB,MAAjB;IACtB,IAAIsD,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIgB,CAAC,GAAGhB,CAAC,CAACO,MAAV;;MACA,IAAIS,CAAC,IAAIA,CAAC,KAAKxC,IAAX,IAAmBwC,CAAC,CAACT,MAArB,IAA+BS,CAAC,CAACT,MAAF,KAAa/B,IAAhD,EAAsD;QACpD,IAAI,OAAOwB,CAAC,CAACvB,IAAF,CAAOyB,MAAd,KAAyB,WAA7B,EAA0C;UACxC,IAAIe,KAAK,GAAGjB,CAAC,CAACvB,IAAF,CAAOyB,MAAP,CAAcgB,KAAd,CAAoB,IAApB,CAAZ;UACAZ,KAAK,GAAGW,KAAK,CAACA,KAAK,CAAClB,MAAN,GAAe,CAAhB,CAAb;UACAO,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;UACA,OAAO,KAAP;QACD;MACF;IACF,CAVD;IAWA,OAAOb,KAAP;EACD;;EAEDc,gBAAgB,CAAC5C,IAAD,EAAOL,IAAP,EAAa;IAC3B,IAAImC,KAAJ;IACA9B,IAAI,CAAC6C,YAAL,CAAkBrB,CAAC,IAAI;MACrB,IAAI,OAAOA,CAAC,CAACvB,IAAF,CAAOyB,MAAd,KAAyB,WAA7B,EAA0C;QACxCI,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOyB,MAAf;;QACA,IAAII,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAJ,EAA0B;UACxBhB,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;QACD;;QACD,OAAO,KAAP;MACD;IACF,CARD;;IASA,IAAI,OAAOb,KAAP,KAAiB,WAArB,EAAkC;MAChCA,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACD,CAFD,MAEO,IAAImC,KAAJ,EAAW;MAChBA,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;IACD;;IACD,OAAOb,KAAP;EACD;;EAEDiB,aAAa,CAAC/C,IAAD,EAAOL,IAAP,EAAa;IACxB,IAAImC,KAAJ;IACA9B,IAAI,CAACgD,SAAL,CAAexB,CAAC,IAAI;MAClB,IAAI,OAAOA,CAAC,CAACvB,IAAF,CAAOyB,MAAd,KAAyB,WAA7B,EAA0C;QACxCI,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOyB,MAAf;;QACA,IAAII,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAJ,EAA0B;UACxBhB,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;QACD;;QACD,OAAO,KAAP;MACD;IACF,CARD;;IASA,IAAI,OAAOb,KAAP,KAAiB,WAArB,EAAkC;MAChCA,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACD,CAFD,MAEO,IAAImC,KAAJ,EAAW;MAChBA,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;IACD;;IACD,OAAOb,KAAP;EACD;;EAEDmB,aAAa,CAACjD,IAAD,EAAO;IAClB,IAAI8B,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIA,CAAC,CAACJ,KAAF,KAAYI,CAAC,CAACO,MAAF,KAAa/B,IAAb,IAAqBA,IAAI,CAACgC,KAAL,KAAeR,CAAhD,CAAJ,EAAwD;QACtD,IAAI,OAAOA,CAAC,CAACvB,IAAF,CAAOyB,MAAd,KAAyB,WAA7B,EAA0C;UACxCI,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOyB,MAAf;;UACA,IAAII,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAJ,EAA0B;YACxBhB,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;UACD;;UACD,OAAO,KAAP;QACD;MACF;IACF,CAVD;IAWA,IAAIb,KAAJ,EAAWA,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;IACX,OAAOb,KAAP;EACD;;EAEDoB,cAAc,CAAClD,IAAD,EAAO;IACnB,IAAI8B,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIA,CAAC,CAACJ,KAAF,IAAWI,CAAC,CAACJ,KAAF,CAAQG,MAAR,GAAiB,CAAhC,EAAmC;QACjC,IAAI,OAAOC,CAAC,CAACvB,IAAF,CAAOnB,KAAd,KAAwB,WAA5B,EAAyC;UACvCgD,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOnB,KAAf;;UACA,IAAIgD,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAJ,EAA0B;YACxBhB,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;UACD;;UACD,OAAO,KAAP;QACD;MACF;IACF,CAVD;IAWA,IAAIb,KAAJ,EAAWA,KAAK,GAAGA,KAAK,CAACa,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;IACX,OAAOb,KAAP;EACD;;EAEDqB,aAAa,CAACnD,IAAD,EAAO;IAClB,IAAI8B,KAAJ;IACA9B,IAAI,CAACoC,IAAL,CAAUZ,CAAC,IAAI;MACb,IAAIA,CAAC,CAAC5B,IAAF,KAAW,MAAf,EAAuB;QACrBkC,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOO,OAAf;QACA,IAAI,OAAOsB,KAAP,KAAiB,WAArB,EAAkC,OAAO,KAAP;MACnC;IACF,CALD;IAMA,OAAOA,KAAP;EACD;;EAEDsB,QAAQ,CAACpD,IAAD,EAAO;IACb,IAAI8B,KAAJ;IACA9B,IAAI,CAACgD,SAAL,CAAexB,CAAC,IAAI;MAClB,IAAI,OAAOA,CAAC,CAACvB,IAAF,CAAOO,OAAd,KAA0B,WAA9B,EAA2C;QACzCsB,KAAK,GAAGN,CAAC,CAACvB,IAAF,CAAOO,OAAP,CAAemC,OAAf,CAAuB,SAAvB,EAAkC,EAAlC,CAAR;QACA,OAAO,KAAP;MACD;IACF,CALD;IAMA,OAAOb,KAAP;EACD;;EAEDI,WAAW,CAACvC,IAAD,EAAOkC,MAAP,EAAe;IACxB,IAAIC,KAAJ;;IACA,IAAInC,IAAI,CAACC,IAAL,KAAc,MAAlB,EAA0B;MACxBkC,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACD,CAFD,MAEO,IAAIA,IAAI,CAACC,IAAL,KAAc,SAAlB,EAA6B;MAClCkC,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,eAArB,CAAR;IACD,CAFM,MAEA,IAAIkC,MAAM,KAAK,QAAf,EAAyB;MAC9BC,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,YAArB,CAAR;IACD,CAFM,MAEA;MACLmC,KAAK,GAAG,KAAK1B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,aAArB,CAAR;IACD;;IAED,IAAI0D,GAAG,GAAG1D,IAAI,CAACoC,MAAf;IACA,IAAIuB,KAAK,GAAG,CAAZ;;IACA,OAAOD,GAAG,IAAIA,GAAG,CAACzD,IAAJ,KAAa,MAA3B,EAAmC;MACjC0D,KAAK,IAAI,CAAT;MACAD,GAAG,GAAGA,GAAG,CAACtB,MAAV;IACD;;IAED,IAAID,KAAK,CAACgB,QAAN,CAAe,IAAf,CAAJ,EAA0B;MACxB,IAAItE,MAAM,GAAG,KAAK4B,GAAL,CAAST,IAAT,EAAe,IAAf,EAAqB,QAArB,CAAb;;MACA,IAAInB,MAAM,CAAC+C,MAAX,EAAmB;QACjB,KAAK,IAAIgC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGD,KAA1B,EAAiCC,IAAI,EAArC,EAAyCzB,KAAK,IAAItD,MAAT;MAC1C;IACF;;IAED,OAAOsD,KAAP;EACD;;EAEDnB,QAAQ,CAAChB,IAAD,EAAOe,IAAP,EAAa;IACnB,IAAIoB,KAAK,GAAGnC,IAAI,CAACe,IAAD,CAAhB;IACA,IAAIN,GAAG,GAAGT,IAAI,CAACM,IAAL,CAAUS,IAAV,CAAV;;IACA,IAAIN,GAAG,IAAIA,GAAG,CAAC0B,KAAJ,KAAcA,KAAzB,EAAgC;MAC9B,OAAO1B,GAAG,CAACA,GAAX;IACD;;IAED,OAAO0B,KAAP;EACD;;AAvUe;;AA0UlB0B,MAAM,CAACC,OAAP,GAAiBlE,WAAjB;AACAA,WAAW,CAACmE,OAAZ,GAAsBnE,WAAtB"},"metadata":{},"sourceType":"script"}