{"ast":null,"code":"import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, _ref) => {\n  let {\n    useFipsEndpoint = false,\n    useDualstackEndpoint = false,\n    signingService,\n    regionHash,\n    partitionHash\n  } = _ref;\n  const partition = getResolvedPartition(region, {\n    partitionHash\n  });\n  const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n  const hostnameOptions = {\n    useFipsEndpoint,\n    useDualstackEndpoint\n  };\n  const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n  const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n  const hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname,\n    partitionHostname\n  });\n\n  if (hostname === undefined) {\n    throw new Error(`Endpoint resolution failed for: ${{\n      resolvedRegion,\n      useFipsEndpoint,\n      useDualstackEndpoint\n    }}`);\n  }\n\n  const signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: regionHash[resolvedRegion]?.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint\n  });\n  return {\n    partition,\n    signingService,\n    hostname,\n    ...(signingRegion && {\n      signingRegion\n    }),\n    ...(regionHash[resolvedRegion]?.signingService && {\n      signingService: regionHash[resolvedRegion].signingService\n    })\n  };\n};","map":{"version":3,"names":["getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","useFipsEndpoint","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","signingRegion","regionRegex"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"sourcesContent":["import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    const partition = getResolvedPartition(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\n"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,2BAAxC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,MAAD,WAAmH;EAAA,IAA1G;IAAEC,eAAe,GAAG,KAApB;IAA2BC,oBAAoB,GAAG,KAAlD;IAAyDC,cAAzD;IAAyEC,UAAzE;IAAqFC;EAArF,CAA0G;EAC5I,MAAMC,SAAS,GAAGT,oBAAoB,CAACG,MAAD,EAAS;IAAEK;EAAF,CAAT,CAAtC;EACA,MAAME,cAAc,GAAGP,MAAM,IAAII,UAAV,GAAuBJ,MAAvB,GAAgCK,aAAa,CAACC,SAAD,CAAb,EAA0BE,QAA1B,IAAsCR,MAA7F;EACA,MAAMS,eAAe,GAAG;IAAER,eAAF;IAAmBC;EAAnB,CAAxB;EACA,MAAMQ,cAAc,GAAGf,uBAAuB,CAACS,UAAU,CAACG,cAAD,CAAV,EAA4BI,QAA7B,EAAuCF,eAAvC,CAA9C;EACA,MAAMG,iBAAiB,GAAGjB,uBAAuB,CAACU,aAAa,CAACC,SAAD,CAAb,EAA0BK,QAA3B,EAAqCF,eAArC,CAAjD;EACA,MAAMI,QAAQ,GAAGjB,mBAAmB,CAACW,cAAD,EAAiB;IAAEG,cAAF;IAAkBE;EAAlB,CAAjB,CAApC;;EACA,IAAIC,QAAQ,KAAKC,SAAjB,EAA4B;IACxB,MAAM,IAAIC,KAAJ,CAAW,mCAAkC;MAAER,cAAF;MAAkBN,eAAlB;MAAmCC;IAAnC,CAA0D,EAAvG,CAAN;EACH;;EACD,MAAMc,aAAa,GAAGlB,wBAAwB,CAACe,QAAD,EAAW;IACrDG,aAAa,EAAEZ,UAAU,CAACG,cAAD,CAAV,EAA4BS,aADU;IAErDC,WAAW,EAAEZ,aAAa,CAACC,SAAD,CAAb,CAAyBW,WAFe;IAGrDhB;EAHqD,CAAX,CAA9C;EAKA,OAAO;IACHK,SADG;IAEHH,cAFG;IAGHU,QAHG;IAIH,IAAIG,aAAa,IAAI;MAAEA;IAAF,CAArB,CAJG;IAKH,IAAIZ,UAAU,CAACG,cAAD,CAAV,EAA4BJ,cAA5B,IAA8C;MAC9CA,cAAc,EAAEC,UAAU,CAACG,cAAD,CAAV,CAA2BJ;IADG,CAAlD;EALG,CAAP;AASH,CAxBM"},"metadata":{},"sourceType":"module"}