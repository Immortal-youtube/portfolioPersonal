{"ast":null,"code":"import { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(input) {\n  let str = \"\";\n\n  for (let i = 0; i < input.length; i += 3) {\n    let bits = 0;\n    let bitLength = 0;\n\n    for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n      bits |= input[j] << (limit - j - 1) * bitsPerByte;\n      bitLength += bitsPerByte;\n    }\n\n    const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n    bits <<= bitClusterCount * bitsPerLetter - bitLength;\n\n    for (let k = 1; k <= bitClusterCount; k++) {\n      const offset = (bitClusterCount - k) * bitsPerLetter;\n      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n    }\n\n    str += \"==\".slice(0, 4 - bitClusterCount);\n  }\n\n  return str;\n}","map":{"version":3,"names":["alphabetByValue","bitsPerByte","bitsPerLetter","maxLetterValue","toBase64","input","str","i","length","bits","bitLength","j","limit","Math","min","bitClusterCount","ceil","k","offset","slice"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-base64/dist-es/toBase64.browser.js"],"sourcesContent":["import { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(input) {\n    let str = \"\";\n    for (let i = 0; i < input.length; i += 3) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n            bits |= input[j] << ((limit - j - 1) * bitsPerByte);\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for (let k = 1; k <= bitClusterCount; k++) {\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,aAAvC,EAAsDC,cAAtD,QAA4E,qBAA5E;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAC5B,IAAIC,GAAG,GAAG,EAAV;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;IACtC,IAAIE,IAAI,GAAG,CAAX;IACA,IAAIC,SAAS,GAAG,CAAhB;;IACA,KAAK,IAAIC,CAAC,GAAGJ,CAAR,EAAWK,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASP,CAAC,GAAG,CAAb,EAAgBF,KAAK,CAACG,MAAtB,CAAxB,EAAuDG,CAAC,GAAGC,KAA3D,EAAkED,CAAC,EAAnE,EAAuE;MACnEF,IAAI,IAAIJ,KAAK,CAACM,CAAD,CAAL,IAAa,CAACC,KAAK,GAAGD,CAAR,GAAY,CAAb,IAAkBV,WAAvC;MACAS,SAAS,IAAIT,WAAb;IACH;;IACD,MAAMc,eAAe,GAAGF,IAAI,CAACG,IAAL,CAAUN,SAAS,GAAGR,aAAtB,CAAxB;IACAO,IAAI,KAAKM,eAAe,GAAGb,aAAlB,GAAkCQ,SAA3C;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,eAArB,EAAsCE,CAAC,EAAvC,EAA2C;MACvC,MAAMC,MAAM,GAAG,CAACH,eAAe,GAAGE,CAAnB,IAAwBf,aAAvC;MACAI,GAAG,IAAIN,eAAe,CAAC,CAACS,IAAI,GAAIN,cAAc,IAAIe,MAA3B,KAAuCA,MAAxC,CAAtB;IACH;;IACDZ,GAAG,IAAI,KAAKa,KAAL,CAAW,CAAX,EAAc,IAAIJ,eAAlB,CAAP;EACH;;EACD,OAAOT,GAAP;AACH"},"metadata":{},"sourceType":"module"}