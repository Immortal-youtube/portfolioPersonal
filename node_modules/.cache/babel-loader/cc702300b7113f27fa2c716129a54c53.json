{"ast":null,"code":"\"use strict\";\n\nconst usm = require(\"./url-state-machine\");\n\nconst urlencoded = require(\"./urlencoded\");\n\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n    this._url = parsedURL; // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n\n    this._query = URLSearchParams.createImpl(globalObject, [query], {\n      doNotStripQMark: true\n    });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n\n    const {\n      query\n    } = parsedURL;\n\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n\n};","map":{"version":3,"names":["usm","require","urlencoded","URLSearchParams","exports","implementation","URLImpl","constructor","globalObject","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","query","_url","_query","createImpl","doNotStripQMark","href","serializeURL","v","_list","splice","parseUrlencodedString","origin","serializeURLOrigin","protocol","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","hasAnOpaquePath","hostname","pathname","serializePath","path","search","input","substring","searchParams","hash","fragment","toJSON"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/URL-impl.js"],"sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}