{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst buffer_1 = require(\"buffer\");\n/**\n * Error strings\n */\n\n\nconst ERRORS = {\n  INVALID_ENCODING: 'Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.',\n  INVALID_SMARTBUFFER_SIZE: 'Invalid size provided. Size must be a valid integer greater than zero.',\n  INVALID_SMARTBUFFER_BUFFER: 'Invalid Buffer provided in SmartBufferOptions.',\n  INVALID_SMARTBUFFER_OBJECT: 'Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.',\n  INVALID_OFFSET: 'An invalid offset value was provided.',\n  INVALID_OFFSET_NON_NUMBER: 'An invalid offset value was provided. A numeric value is required.',\n  INVALID_LENGTH: 'An invalid length value was provided.',\n  INVALID_LENGTH_NON_NUMBER: 'An invalid length value was provived. A numeric value is required.',\n  INVALID_TARGET_OFFSET: 'Target offset is beyond the bounds of the internal SmartBuffer data.',\n  INVALID_TARGET_LENGTH: 'Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.',\n  INVALID_READ_BEYOND_BOUNDS: 'Attempted to read beyond the bounds of the managed data.',\n  INVALID_WRITE_BEYOND_BOUNDS: 'Attempted to write beyond the bounds of the managed data.'\n};\nexports.ERRORS = ERRORS;\n/**\n * Checks if a given encoding is a valid Buffer encoding. (Throws an exception if check fails)\n *\n * @param { String } encoding The encoding string to check.\n */\n\nfunction checkEncoding(encoding) {\n  if (!buffer_1.Buffer.isEncoding(encoding)) {\n    throw new Error(ERRORS.INVALID_ENCODING);\n  }\n}\n\nexports.checkEncoding = checkEncoding;\n/**\n * Checks if a given number is a finite integer. (Throws an exception if check fails)\n *\n * @param { Number } value The number value to check.\n */\n\nfunction isFiniteInteger(value) {\n  return typeof value === 'number' && isFinite(value) && isInteger(value);\n}\n\nexports.isFiniteInteger = isFiniteInteger;\n/**\n * Checks if an offset/length value is valid. (Throws an exception if check fails)\n *\n * @param value The value to check.\n * @param offset True if checking an offset, false if checking a length.\n */\n\nfunction checkOffsetOrLengthValue(value, offset) {\n  if (typeof value === 'number') {\n    // Check for non finite/non integers\n    if (!isFiniteInteger(value) || value < 0) {\n      throw new Error(offset ? ERRORS.INVALID_OFFSET : ERRORS.INVALID_LENGTH);\n    }\n  } else {\n    throw new Error(offset ? ERRORS.INVALID_OFFSET_NON_NUMBER : ERRORS.INVALID_LENGTH_NON_NUMBER);\n  }\n}\n/**\n * Checks if a length value is valid. (Throws an exception if check fails)\n *\n * @param { Number } length The value to check.\n */\n\n\nfunction checkLengthValue(length) {\n  checkOffsetOrLengthValue(length, false);\n}\n\nexports.checkLengthValue = checkLengthValue;\n/**\n * Checks if a offset value is valid. (Throws an exception if check fails)\n *\n * @param { Number } offset The value to check.\n */\n\nfunction checkOffsetValue(offset) {\n  checkOffsetOrLengthValue(offset, true);\n}\n\nexports.checkOffsetValue = checkOffsetValue;\n/**\n * Checks if a target offset value is out of bounds. (Throws an exception if check fails)\n *\n * @param { Number } offset The offset value to check.\n * @param { SmartBuffer } buff The SmartBuffer instance to check against.\n */\n\nfunction checkTargetOffset(offset, buff) {\n  if (offset < 0 || offset > buff.length) {\n    throw new Error(ERRORS.INVALID_TARGET_OFFSET);\n  }\n}\n\nexports.checkTargetOffset = checkTargetOffset;\n/**\n * Determines whether a given number is a integer.\n * @param value The number to check.\n */\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n/**\n * Throws if Node.js version is too low to support bigint\n */\n\n\nfunction bigIntAndBufferInt64Check(bufferMethod) {\n  if (typeof BigInt === 'undefined') {\n    throw new Error('Platform does not support JS BigInt type.');\n  }\n\n  if (typeof buffer_1.Buffer.prototype[bufferMethod] === 'undefined') {\n    throw new Error(`Platform does not support Buffer.prototype.${bufferMethod}.`);\n  }\n}\n\nexports.bigIntAndBufferInt64Check = bigIntAndBufferInt64Check;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;;;;;AAGA,MAAMA,MAAM,GAAG;EACbC,gBAAgB,EAAE,kGADL;EAEbC,wBAAwB,EAAE,wEAFb;EAGbC,0BAA0B,EAAE,gDAHf;EAIbC,0BAA0B,EAAE,2FAJf;EAKbC,cAAc,EAAE,uCALH;EAMbC,yBAAyB,EAAE,oEANd;EAObC,cAAc,EAAE,uCAPH;EAQbC,yBAAyB,EAAE,oEARd;EASbC,qBAAqB,EAAE,sEATV;EAUbC,qBAAqB,EAAE,yFAVV;EAWbC,0BAA0B,EAAE,0DAXf;EAYbC,2BAA2B,EAAE;AAZhB,CAAf;AAoHEC;AArGF;;;;;;AAKA,SAASC,aAAT,CAAuBC,QAAvB,EAA+C;EAC7C,IAAI,CAACC,gBAAOC,UAAP,CAAkBF,QAAlB,CAAL,EAAkC;IAChC,MAAM,IAAIG,KAAJ,CAAUlB,MAAM,CAACC,gBAAjB,CAAN;EACD;AACF;;AA4F0BY;AA1F3B;;;;;;AAKA,SAASM,eAAT,CAAyBC,KAAzB,EAAsC;EACpC,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,QAAQ,CAACD,KAAD,CAArC,IAAgDE,SAAS,CAACF,KAAD,CAAhE;AACD;;AAmFSP;AAjFV;;;;;;;AAMA,SAASU,wBAAT,CAAkCH,KAAlC,EAA8CI,MAA9C,EAA6D;EAC3D,IAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;IAC7B;IACA,IAAI,CAACD,eAAe,CAACC,KAAD,CAAhB,IAA2BA,KAAK,GAAG,CAAvC,EAA0C;MACxC,MAAM,IAAIF,KAAJ,CAAUM,MAAM,GAAGxB,MAAM,CAACK,cAAV,GAA2BL,MAAM,CAACO,cAAlD,CAAN;IACD;EACF,CALD,MAKO;IACL,MAAM,IAAIW,KAAJ,CAAUM,MAAM,GAAGxB,MAAM,CAACM,yBAAV,GAAsCN,MAAM,CAACQ,yBAA7D,CAAN;EACD;AACF;AAED;;;;;;;AAKA,SAASiB,gBAAT,CAA0BC,MAA1B,EAAqC;EACnCH,wBAAwB,CAACG,MAAD,EAAS,KAAT,CAAxB;AACD;;AA0DCb;AAxDF;;;;;;AAKA,SAASc,gBAAT,CAA0BH,MAA1B,EAAqC;EACnCD,wBAAwB,CAACC,MAAD,EAAS,IAAT,CAAxB;AACD;;AAgDyCX;AA9C1C;;;;;;;AAMA,SAASe,iBAAT,CAA2BJ,MAA3B,EAA2CK,IAA3C,EAA4D;EAC1D,IAAIL,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAGK,IAAI,CAACH,MAAhC,EAAwC;IACtC,MAAM,IAAIR,KAAJ,CAAUlB,MAAM,CAACS,qBAAjB,CAAN;EACD;AACF;;AAqCmBI;AAnCpB;;;;;AAIA,SAASS,SAAT,CAAmBF,KAAnB,EAAgC;EAC9B,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,QAAQ,CAACD,KAAD,CAArC,IAAgDU,IAAI,CAACC,KAAL,CAAWX,KAAX,MAAsBA,KAA7E;AACD;AAcD;;;;;AAGA,SAASY,yBAAT,CAAmCC,YAAnC,EAA6D;EAC3D,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;IACjC,MAAM,IAAIhB,KAAJ,CAAU,2CAAV,CAAN;EACD;;EAED,IAAI,OAAOF,gBAAOmB,SAAP,CAAiBF,YAAjB,CAAP,KAA0C,WAA9C,EAA2D;IACzD,MAAM,IAAIf,KAAJ,CAAU,8CAA8Ce,YAAY,GAApE,CAAN;EACD;AACF;;AAIsCpB","names":["ERRORS","INVALID_ENCODING","INVALID_SMARTBUFFER_SIZE","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","INVALID_OFFSET","INVALID_OFFSET_NON_NUMBER","INVALID_LENGTH","INVALID_LENGTH_NON_NUMBER","INVALID_TARGET_OFFSET","INVALID_TARGET_LENGTH","INVALID_READ_BEYOND_BOUNDS","INVALID_WRITE_BEYOND_BOUNDS","exports","checkEncoding","encoding","buffer_1","isEncoding","Error","isFiniteInteger","value","isFinite","isInteger","checkOffsetOrLengthValue","offset","checkLengthValue","length","checkOffsetValue","checkTargetOffset","buff","Math","floor","bigIntAndBufferInt64Check","bufferMethod","BigInt","prototype"],"sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}