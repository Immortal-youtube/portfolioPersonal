{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountDocumentsOperation = void 0;\n\nconst aggregate_1 = require(\"./aggregate\");\n/** @internal */\n\n\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n  constructor(collection, query, options) {\n    const pipeline = [];\n    pipeline.push({\n      $match: query\n    });\n\n    if (typeof options.skip === 'number') {\n      pipeline.push({\n        $skip: options.skip\n      });\n    }\n\n    if (typeof options.limit === 'number') {\n      pipeline.push({\n        $limit: options.limit\n      });\n    }\n\n    pipeline.push({\n      $group: {\n        _id: 1,\n        n: {\n          $sum: 1\n        }\n      }\n    });\n    super(collection.s.namespace, pipeline, options);\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, result) => {\n      if (err || !result) {\n        callback(err);\n        return;\n      } // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n\n\n      const response = result;\n\n      if (response.cursor == null || response.cursor.firstBatch == null) {\n        callback(undefined, 0);\n        return;\n      }\n\n      const docs = response.cursor.firstBatch;\n      callback(undefined, docs.length ? docs[0].n : 0);\n    });\n  }\n\n}\n\nexports.CountDocumentsOperation = CountDocumentsOperation;","map":{"version":3,"mappings":";;;;;;;AAKA;AAUA;;;AACA,MAAaA,uBAAb,SAA6CC,8BAA7C,CAAuE;EACrEC,YAAYC,UAAZ,EAAoCC,KAApC,EAAqDC,OAArD,EAAmF;IACjF,MAAMC,QAAQ,GAAG,EAAjB;IACAA,QAAQ,CAACC,IAAT,CAAc;MAAEC,MAAM,EAAEJ;IAAV,CAAd;;IAEA,IAAI,OAAOC,OAAO,CAACI,IAAf,KAAwB,QAA5B,EAAsC;MACpCH,QAAQ,CAACC,IAAT,CAAc;QAAEG,KAAK,EAAEL,OAAO,CAACI;MAAjB,CAAd;IACD;;IAED,IAAI,OAAOJ,OAAO,CAACM,KAAf,KAAyB,QAA7B,EAAuC;MACrCL,QAAQ,CAACC,IAAT,CAAc;QAAEK,MAAM,EAAEP,OAAO,CAACM;MAAlB,CAAd;IACD;;IAEDL,QAAQ,CAACC,IAAT,CAAc;MAAEM,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAP;QAAUC,CAAC,EAAE;UAAEC,IAAI,EAAE;QAAR;MAAb;IAAV,CAAd;IAEA,MAAMb,UAAU,CAACc,CAAX,CAAaC,SAAnB,EAA8BZ,QAA9B,EAAwCD,OAAxC;EACD;;EAEQc,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGY;IAE1B,MAAMH,OAAN,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B,CAACE,GAAD,EAAMC,MAAN,KAAgB;MAC7C,IAAID,GAAG,IAAI,CAACC,MAAZ,EAAoB;QAClBF,QAAQ,CAACC,GAAD,CAAR;QACA;MACD,CAJ4C,CAM7C;;;MACA,MAAME,QAAQ,GAAGD,MAAjB;;MACA,IAAIC,QAAQ,CAACC,MAAT,IAAmB,IAAnB,IAA2BD,QAAQ,CAACC,MAAT,CAAgBC,UAAhB,IAA8B,IAA7D,EAAmE;QACjEL,QAAQ,CAACM,SAAD,EAAY,CAAZ,CAAR;QACA;MACD;;MAED,MAAMC,IAAI,GAAGJ,QAAQ,CAACC,MAAT,CAAgBC,UAA7B;MACAL,QAAQ,CAACM,SAAD,EAAYC,IAAI,CAACC,MAAL,GAAcD,IAAI,CAAC,CAAD,CAAJ,CAAQd,CAAtB,GAA0B,CAAtC,CAAR;IACD,CAfD;EAgBD;;AAvCoE;;AAAvEgB","names":["CountDocumentsOperation","aggregate_1","constructor","collection","query","options","pipeline","push","$match","skip","$skip","limit","$limit","$group","_id","n","$sum","s","namespace","execute","server","session","callback","err","result","response","cursor","firstBatch","undefined","docs","length","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\count_documents.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AggregateOperation, AggregateOptions } from './aggregate';\n\n/** @public */\nexport interface CountDocumentsOptions extends AggregateOptions {\n  /** The number of documents to skip. */\n  skip?: number;\n  /** The maximum amounts to count before aborting. */\n  limit?: number;\n}\n\n/** @internal */\nexport class CountDocumentsOperation extends AggregateOperation<number> {\n  constructor(collection: Collection, query: Document, options: CountDocumentsOptions) {\n    const pipeline = [];\n    pipeline.push({ $match: query });\n\n    if (typeof options.skip === 'number') {\n      pipeline.push({ $skip: options.skip });\n    }\n\n    if (typeof options.limit === 'number') {\n      pipeline.push({ $limit: options.limit });\n    }\n\n    pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n\n    super(collection.s.namespace, pipeline, options);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<number>\n  ): void {\n    super.execute(server, session, (err, result) => {\n      if (err || !result) {\n        callback(err);\n        return;\n      }\n\n      // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n      const response = result as unknown as Document;\n      if (response.cursor == null || response.cursor.firstBatch == null) {\n        callback(undefined, 0);\n        return;\n      }\n\n      const docs = response.cursor.firstBatch;\n      callback(undefined, docs.length ? docs[0].n : 0);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}