{"ast":null,"code":"import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy } from \"@aws-sdk/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n\n    return maxAttempt;\n  },\n  configFileSelector: profile => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport const resolveRetryConfig = input => {\n  const {\n    retryStrategy\n  } = input;\n  const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n  return { ...input,\n    maxAttempts,\n    retryStrategy: async () => {\n      if (retryStrategy) {\n        return retryStrategy;\n      }\n\n      const retryMode = await normalizeProvider(input.retryMode)();\n\n      if (retryMode === RETRY_MODES.ADAPTIVE) {\n        return new AdaptiveRetryStrategy(maxAttempts);\n      }\n\n      return new StandardRetryStrategy(maxAttempts);\n    }\n  };\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => env[ENV_RETRY_MODE],\n  configFileSelector: profile => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["normalizeProvider","AdaptiveRetryStrategy","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","RETRY_MODES","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","retryStrategy","maxAttempts","retryMode","ADAPTIVE","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js"],"sourcesContent":["import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@aws-sdk/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy } = input;\n    const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(input.retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,0BAAlC;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,EAAsDC,kBAAtD,EAA0EC,WAA1E,EAAuFC,qBAAvF,QAAqH,qBAArH;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,mBAAmB,GAAG,cAA5B;AACP,OAAO,MAAMC,+BAA+B,GAAG;EAC3CC,2BAA2B,EAAGC,GAAD,IAAS;IAClC,MAAMC,KAAK,GAAGD,GAAG,CAACJ,gBAAD,CAAjB;IACA,IAAI,CAACK,KAAL,EACI,OAAOC,SAAP;IACJ,MAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAA3B;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC1B,MAAM,IAAII,KAAJ,CAAW,wBAAuBX,gBAAiB,2BAA0BK,KAAM,GAAnF,CAAN;IACH;;IACD,OAAOE,UAAP;EACH,CAV0C;EAW3CK,kBAAkB,EAAGC,OAAD,IAAa;IAC7B,MAAMR,KAAK,GAAGQ,OAAO,CAACZ,mBAAD,CAArB;IACA,IAAI,CAACI,KAAL,EACI,OAAOC,SAAP;IACJ,MAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAA3B;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC1B,MAAM,IAAII,KAAJ,CAAW,4BAA2BV,mBAAoB,2BAA0BI,KAAM,GAA1F,CAAN;IACH;;IACD,OAAOE,UAAP;EACH,CApB0C;EAqB3CO,OAAO,EAAElB;AArBkC,CAAxC;AAuBP,OAAO,MAAMmB,kBAAkB,GAAIC,KAAD,IAAW;EACzC,MAAM;IAAEC;EAAF,IAAoBD,KAA1B;EACA,MAAME,WAAW,GAAGxB,iBAAiB,CAACsB,KAAK,CAACE,WAAN,IAAqBtB,oBAAtB,CAArC;EACA,OAAO,EACH,GAAGoB,KADA;IAEHE,WAFG;IAGHD,aAAa,EAAE,YAAY;MACvB,IAAIA,aAAJ,EAAmB;QACf,OAAOA,aAAP;MACH;;MACD,MAAME,SAAS,GAAG,MAAMzB,iBAAiB,CAACsB,KAAK,CAACG,SAAP,CAAjB,EAAxB;;MACA,IAAIA,SAAS,KAAKrB,WAAW,CAACsB,QAA9B,EAAwC;QACpC,OAAO,IAAIzB,qBAAJ,CAA0BuB,WAA1B,CAAP;MACH;;MACD,OAAO,IAAInB,qBAAJ,CAA0BmB,WAA1B,CAAP;IACH;EAZE,CAAP;AAcH,CAjBM;AAkBP,OAAO,MAAMG,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,iBAAiB,GAAG,YAA1B;AACP,OAAO,MAAMC,8BAA8B,GAAG;EAC1CpB,2BAA2B,EAAGC,GAAD,IAASA,GAAG,CAACiB,cAAD,CADC;EAE1CT,kBAAkB,EAAGC,OAAD,IAAaA,OAAO,CAACS,iBAAD,CAFE;EAG1CR,OAAO,EAAEjB;AAHiC,CAAvC"},"metadata":{},"sourceType":"module"}