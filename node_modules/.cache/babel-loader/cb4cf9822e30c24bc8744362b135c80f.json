{"ast":null,"code":"import { alphabetByEncoding, bitsPerByte, bitsPerLetter } from \"./constants.browser\";\nexport const fromBase64 = input => {\n  let totalByteLength = input.length / 4 * 3;\n\n  if (input.slice(-2) === \"==\") {\n    totalByteLength -= 2;\n  } else if (input.slice(-1) === \"=\") {\n    totalByteLength--;\n  }\n\n  const out = new ArrayBuffer(totalByteLength);\n  const dataView = new DataView(out);\n\n  for (let i = 0; i < input.length; i += 4) {\n    let bits = 0;\n    let bitLength = 0;\n\n    for (let j = i, limit = i + 3; j <= limit; j++) {\n      if (input[j] !== \"=\") {\n        if (!(input[j] in alphabetByEncoding)) {\n          throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n        }\n\n        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n        bitLength += bitsPerLetter;\n      } else {\n        bits >>= bitsPerLetter;\n      }\n    }\n\n    const chunkOffset = i / 4 * 3;\n    bits >>= bitLength % bitsPerByte;\n    const byteLength = Math.floor(bitLength / bitsPerByte);\n\n    for (let k = 0; k < byteLength; k++) {\n      const offset = (byteLength - k - 1) * bitsPerByte;\n      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n    }\n  }\n\n  return new Uint8Array(out);\n};","map":{"version":3,"names":["alphabetByEncoding","bitsPerByte","bitsPerLetter","fromBase64","input","totalByteLength","length","slice","out","ArrayBuffer","dataView","DataView","i","bits","bitLength","j","limit","TypeError","chunkOffset","byteLength","Math","floor","k","offset","setUint8","Uint8Array"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-base64/dist-es/fromBase64.browser.js"],"sourcesContent":["import { alphabetByEncoding, bitsPerByte, bitsPerLetter } from \"./constants.browser\";\nexport const fromBase64 = (input) => {\n    let totalByteLength = (input.length / 4) * 3;\n    if (input.slice(-2) === \"==\") {\n        totalByteLength -= 2;\n    }\n    else if (input.slice(-1) === \"=\") {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for (let i = 0; i < input.length; i += 4) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = i + 3; j <= limit; j++) {\n            if (input[j] !== \"=\") {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);\n                bitLength += bitsPerLetter;\n            }\n            else {\n                bits >>= bitsPerLetter;\n            }\n        }\n        const chunkOffset = (i / 4) * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for (let k = 0; k < byteLength; k++) {\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n};\n"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,WAA7B,EAA0CC,aAA1C,QAA+D,qBAA/D;AACA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;EACjC,IAAIC,eAAe,GAAID,KAAK,CAACE,MAAN,GAAe,CAAhB,GAAqB,CAA3C;;EACA,IAAIF,KAAK,CAACG,KAAN,CAAY,CAAC,CAAb,MAAoB,IAAxB,EAA8B;IAC1BF,eAAe,IAAI,CAAnB;EACH,CAFD,MAGK,IAAID,KAAK,CAACG,KAAN,CAAY,CAAC,CAAb,MAAoB,GAAxB,EAA6B;IAC9BF,eAAe;EAClB;;EACD,MAAMG,GAAG,GAAG,IAAIC,WAAJ,CAAgBJ,eAAhB,CAAZ;EACA,MAAMK,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,GAAb,CAAjB;;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACE,MAA1B,EAAkCM,CAAC,IAAI,CAAvC,EAA0C;IACtC,IAAIC,IAAI,GAAG,CAAX;IACA,IAAIC,SAAS,GAAG,CAAhB;;IACA,KAAK,IAAIC,CAAC,GAAGH,CAAR,EAAWI,KAAK,GAAGJ,CAAC,GAAG,CAA5B,EAA+BG,CAAC,IAAIC,KAApC,EAA2CD,CAAC,EAA5C,EAAgD;MAC5C,IAAIX,KAAK,CAACW,CAAD,CAAL,KAAa,GAAjB,EAAsB;QAClB,IAAI,EAAEX,KAAK,CAACW,CAAD,CAAL,IAAYf,kBAAd,CAAJ,EAAuC;UACnC,MAAM,IAAIiB,SAAJ,CAAe,qBAAoBb,KAAK,CAACW,CAAD,CAAI,oBAA5C,CAAN;QACH;;QACDF,IAAI,IAAIb,kBAAkB,CAACI,KAAK,CAACW,CAAD,CAAN,CAAlB,IAAiC,CAACC,KAAK,GAAGD,CAAT,IAAcb,aAAvD;QACAY,SAAS,IAAIZ,aAAb;MACH,CAND,MAOK;QACDW,IAAI,KAAKX,aAAT;MACH;IACJ;;IACD,MAAMgB,WAAW,GAAIN,CAAC,GAAG,CAAL,GAAU,CAA9B;IACAC,IAAI,KAAKC,SAAS,GAAGb,WAArB;IACA,MAAMkB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWP,SAAS,GAAGb,WAAvB,CAAnB;;IACA,KAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;MACjC,MAAMC,MAAM,GAAG,CAACJ,UAAU,GAAGG,CAAb,GAAiB,CAAlB,IAAuBrB,WAAtC;MACAS,QAAQ,CAACc,QAAT,CAAkBN,WAAW,GAAGI,CAAhC,EAAmC,CAACT,IAAI,GAAI,OAAOU,MAAhB,KAA4BA,MAA/D;IACH;EACJ;;EACD,OAAO,IAAIE,UAAJ,CAAejB,GAAf,CAAP;AACH,CAlCM"},"metadata":{},"sourceType":"module"}