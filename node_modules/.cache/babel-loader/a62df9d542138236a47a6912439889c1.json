{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMoreOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass GetMoreOperation extends operation_1.AbstractOperation {\n  constructor(ns, cursorId, server, options) {\n    super(options);\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n\n\n  execute(server, session, callback) {\n    if (server !== this.server) {\n      return callback(new error_1.MongoRuntimeError('Getmore must run on the same server operation began on'));\n    }\n\n    if (this.cursorId == null || this.cursorId.isZero()) {\n      return callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n    }\n\n    const collection = this.ns.collection;\n\n    if (collection == null) {\n      // Cursors should have adopted the namespace returned by MongoDB\n      // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n      return callback(new error_1.MongoRuntimeError('A collection name must be determined before getMore'));\n    }\n\n    const getMoreCmd = {\n      getMore: this.cursorId,\n      collection\n    };\n\n    if (typeof this.options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n    }\n\n    if (typeof this.options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n      getMoreCmd.comment = this.options.comment;\n    }\n\n    const commandOptions = {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch',\n      ...this.options\n    };\n    server.command(this.ns, getMoreCmd, commandOptions, callback);\n  }\n\n}\n\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);","map":{"version":3,"mappings":";;;;;;;AACA;;AAGA;;AACA;AA+BA;;;AACA,MAAaA,gBAAb,SAAsCC,6BAAtC,CAAuD;EAIrDC,YAAYC,EAAZ,EAAkCC,QAAlC,EAAkDC,MAAlD,EAAkEC,OAAlE,EAAyF;IACvF,MAAMA,OAAN;IAEA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKH,EAAL,GAAUA,EAAV;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;EAED;;;;;;EAISE,OAAO,CACdF,MADc,EAEdG,OAFc,EAGdC,QAHc,EAGc;IAE5B,IAAIJ,MAAM,KAAK,KAAKA,MAApB,EAA4B;MAC1B,OAAOI,QAAQ,CACb,IAAIC,yBAAJ,CAAsB,wDAAtB,CADa,CAAf;IAGD;;IAED,IAAI,KAAKN,QAAL,IAAiB,IAAjB,IAAyB,KAAKA,QAAL,CAAcO,MAAd,EAA7B,EAAqD;MACnD,OAAOF,QAAQ,CAAC,IAAIC,yBAAJ,CAAsB,qCAAtB,CAAD,CAAf;IACD;;IAED,MAAME,UAAU,GAAG,KAAKT,EAAL,CAAQS,UAA3B;;IACA,IAAIA,UAAU,IAAI,IAAlB,EAAwB;MACtB;MACA;MACA,OAAOH,QAAQ,CAAC,IAAIC,yBAAJ,CAAsB,qDAAtB,CAAD,CAAf;IACD;;IAED,MAAMG,UAAU,GAAmB;MACjCC,OAAO,EAAE,KAAKV,QADmB;MAEjCQ;IAFiC,CAAnC;;IAKA,IAAI,OAAO,KAAKN,OAAL,CAAaS,SAApB,KAAkC,QAAtC,EAAgD;MAC9CF,UAAU,CAACE,SAAX,GAAuBC,IAAI,CAACC,GAAL,CAAS,KAAKX,OAAL,CAAaS,SAAtB,CAAvB;IACD;;IAED,IAAI,OAAO,KAAKT,OAAL,CAAaY,cAApB,KAAuC,QAA3C,EAAqD;MACnDL,UAAU,CAACM,SAAX,GAAuB,KAAKb,OAAL,CAAaY,cAApC;IACD,CA9B2B,CAgC5B;IACA;;;IACA,IAAI,KAAKZ,OAAL,CAAac,OAAb,KAAyBC,SAAzB,IAAsC,4BAAehB,MAAf,KAA0B,CAApE,EAAuE;MACrEQ,UAAU,CAACO,OAAX,GAAqB,KAAKd,OAAL,CAAac,OAAlC;IACD;;IAED,MAAME,cAAc,GAAG;MACrBC,mBAAmB,EAAE,IADA;MAErBC,mBAAmB,EAAE,WAFA;MAGrB,GAAG,KAAKlB;IAHa,CAAvB;IAMAD,MAAM,CAACoB,OAAP,CAAe,KAAKtB,EAApB,EAAwBU,UAAxB,EAAoCS,cAApC,EAAoDb,QAApD;EACD;;AAjEoD;;AAAvDiB;AAoEA,+BAAc1B,gBAAd,EAAgC,CAACC,mBAAO0B,cAAR,EAAwB1B,mBAAO2B,uBAA/B,CAAhC","names":["GetMoreOperation","operation_1","constructor","ns","cursorId","server","options","execute","session","callback","error_1","isZero","collection","getMoreCmd","getMore","batchSize","Math","abs","maxAwaitTimeMS","maxTimeMS","comment","undefined","commandOptions","returnFieldSelector","documentsReturnedIn","command","exports","READ_OPERATION","MUST_SELECT_SAME_SERVER"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\get_more.ts"],"sourcesContent":["import type { Document, Long } from '../bson';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion, MongoDBNamespace } from '../utils';\nimport { AbstractOperation, Aspect, defineAspects, OperationOptions } from './operation';\n\n/** @internal */\nexport interface GetMoreOptions extends OperationOptions {\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * getMore only supports 'comment' in server versions 4.4 and above.\n   */\n  comment?: unknown;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** TODO(NODE-4413): Address bug with maxAwaitTimeMS not being passed in from the cursor correctly */\n  maxAwaitTimeMS?: number;\n}\n\n/**\n * GetMore command: https://www.mongodb.com/docs/manual/reference/command/getMore/\n * @internal\n */\nexport interface GetMoreCommand {\n  getMore: Long;\n  collection: string;\n  batchSize?: number;\n  maxTimeMS?: number;\n  /** Only supported on wire versions 10 or greater */\n  comment?: unknown;\n}\n\n/** @internal */\nexport class GetMoreOperation extends AbstractOperation {\n  cursorId: Long;\n  override options: GetMoreOptions;\n\n  constructor(ns: MongoDBNamespace, cursorId: Long, server: Server, options: GetMoreOptions) {\n    super(options);\n\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    if (server !== this.server) {\n      return callback(\n        new MongoRuntimeError('Getmore must run on the same server operation began on')\n      );\n    }\n\n    if (this.cursorId == null || this.cursorId.isZero()) {\n      return callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n    }\n\n    const collection = this.ns.collection;\n    if (collection == null) {\n      // Cursors should have adopted the namespace returned by MongoDB\n      // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n      return callback(new MongoRuntimeError('A collection name must be determined before getMore'));\n    }\n\n    const getMoreCmd: GetMoreCommand = {\n      getMore: this.cursorId,\n      collection\n    };\n\n    if (typeof this.options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n    }\n\n    if (typeof this.options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (this.options.comment !== undefined && maxWireVersion(server) >= 9) {\n      getMoreCmd.comment = this.options.comment;\n    }\n\n    const commandOptions = {\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch',\n      ...this.options\n    };\n\n    server.command(this.ns, getMoreCmd, commandOptions, callback);\n  }\n}\n\ndefineAspects(GetMoreOperation, [Aspect.READ_OPERATION, Aspect.MUST_SELECT_SAME_SERVER]);\n"]},"metadata":{},"sourceType":"script"}