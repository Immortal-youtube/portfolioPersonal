{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst list_databases_1 = require(\"./operations/list_databases\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\n\n\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  /**\n   * Execute a command\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   */\n\n\n  async command(command, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async buildInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async serverInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async serverStatus(options) {\n    return this.command({\n      serverStatus: 1\n    }, options);\n  }\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async ping(options) {\n    return this.command({\n      ping: 1\n    }, options);\n  }\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n\n\n  async addUser(username, passwordOrOptions, options) {\n    options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   */\n\n\n  async validateCollection(collectionName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n  }\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async listDatabases(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n  }\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async replSetGetStatus(options) {\n    return this.command({\n      replSetGetStatus: 1\n    }, options);\n  }\n\n}\n\nexports.Admin = Admin;","map":{"version":3,"mappings":"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","names":["Admin","constructor","db","s","command","options","client","run_command_1","dbName","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","passwordOrOptions","undefined","password","add_user_1","removeUser","remove_user_1","validateCollection","collectionName","validate_collection_1","listDatabases","list_databases_1","replSetGetStatus","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\admin.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { Db } from './db';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport type { CommandOperationOptions } from './operations/command';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  ListDatabasesOperation,\n  ListDatabasesOptions,\n  ListDatabasesResult\n} from './operations/list_databases';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport {\n  ValidateCollectionOperation,\n  ValidateCollectionOptions\n} from './operations/validate_collection';\n\n/** @internal */\nexport interface AdminPrivate {\n  db: Db;\n}\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nexport class Admin {\n  /** @internal */\n  s: AdminPrivate;\n\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db: Db) {\n    this.s = { db };\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param command - The command to execute\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\n    return executeOperation(\n      this.s.db.s.client,\n      new RunCommandOperation(this.s.db, command, { dbName: 'admin', ...options })\n    );\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async buildInfo(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ buildinfo: 1 }, options);\n  }\n\n  /**\n   * Retrieve the server build information\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverInfo(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ buildinfo: 1 }, options);\n  }\n\n  /**\n   * Retrieve this db's server status.\n   *\n   * @param options - Optional settings for the command\n   */\n  async serverStatus(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ serverStatus: 1 }, options);\n  }\n\n  /**\n   * Ping the MongoDB server and retrieve results\n   *\n   * @param options - Optional settings for the command\n   */\n  async ping(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ ping: 1 }, options);\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n  async addUser(\n    username: string,\n    passwordOrOptions?: string | AddUserOptions,\n    options?: AddUserOptions\n  ): Promise<Document> {\n    options =\n      options != null && typeof options === 'object'\n        ? options\n        : passwordOrOptions != null && typeof passwordOrOptions === 'object'\n        ? passwordOrOptions\n        : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return executeOperation(\n      this.s.db.s.client,\n      new AddUserOperation(this.s.db, username, password, { dbName: 'admin', ...options })\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return executeOperation(\n      this.s.db.s.client,\n      new RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options })\n    );\n  }\n\n  /**\n   * Validate an existing collection\n   *\n   * @param collectionName - The name of the collection to validate.\n   * @param options - Optional settings for the command\n   */\n  async validateCollection(\n    collectionName: string,\n    options: ValidateCollectionOptions = {}\n  ): Promise<Document> {\n    return executeOperation(\n      this.s.db.s.client,\n      new ValidateCollectionOperation(this, collectionName, options)\n    );\n  }\n\n  /**\n   * List the available databases\n   *\n   * @param options - Optional settings for the command\n   */\n  async listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult> {\n    return executeOperation(this.s.db.s.client, new ListDatabasesOperation(this.s.db, options));\n  }\n\n  /**\n   * Get ReplicaSet status\n   *\n   * @param options - Optional settings for the command\n   */\n  async replSetGetStatus(options?: CommandOperationOptions): Promise<Document> {\n    return this.command({ replSetGetStatus: 1 }, options);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}