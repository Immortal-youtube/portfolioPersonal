{"ast":null,"code":"import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n  const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n\n  if (typeof clientConfig.endpointProvider !== \"function\") {\n    throw new Error(\"config.endpointProvider is not set.\");\n  }\n\n  const endpoint = clientConfig.endpointProvider(endpointParams, context);\n  return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n  const endpointParams = {};\n  const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n\n  for (const [name, instruction] of Object.entries(instructions)) {\n    switch (instruction.type) {\n      case \"staticContextParams\":\n        endpointParams[name] = instruction.value;\n        break;\n\n      case \"contextParams\":\n        endpointParams[name] = commandInput[instruction.name];\n        break;\n\n      case \"clientContextParams\":\n      case \"builtInParams\":\n        endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n        break;\n\n      default:\n        throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n    }\n  }\n\n  if (Object.keys(instructions).length === 0) {\n    Object.assign(endpointParams, clientConfig);\n  }\n\n  if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n    await resolveParamsForS3(endpointParams);\n  }\n\n  return endpointParams;\n};","map":{"version":3,"names":["resolveParamsForS3","createConfigValueProvider","getEndpointFromInstructions","commandInput","instructionsSupplier","clientConfig","context","endpointParams","resolveParams","endpointProvider","Error","endpoint","instructions","getEndpointParameterInstructions","name","instruction","Object","entries","type","value","JSON","stringify","keys","length","assign","String","serviceId","toLowerCase"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"],"sourcesContent":["import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)) {\n        switch (instruction.type) {\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n};\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,2BAAnC;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,OAAO,MAAMC,2BAA2B,GAAG,OAAOC,YAAP,EAAqBC,oBAArB,EAA2CC,YAA3C,EAAyDC,OAAzD,KAAqE;EAC5G,MAAMC,cAAc,GAAG,MAAMC,aAAa,CAACL,YAAD,EAAeC,oBAAf,EAAqCC,YAArC,CAA1C;;EACA,IAAI,OAAOA,YAAY,CAACI,gBAApB,KAAyC,UAA7C,EAAyD;IACrD,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;EACH;;EACD,MAAMC,QAAQ,GAAGN,YAAY,CAACI,gBAAb,CAA8BF,cAA9B,EAA8CD,OAA9C,CAAjB;EACA,OAAOK,QAAP;AACH,CAPM;AAQP,OAAO,MAAMH,aAAa,GAAG,OAAOL,YAAP,EAAqBC,oBAArB,EAA2CC,YAA3C,KAA4D;EACrF,MAAME,cAAc,GAAG,EAAvB;EACA,MAAMK,YAAY,GAAGR,oBAAoB,EAAES,gCAAtB,QAA8D,EAAnF;;EACA,KAAK,MAAM,CAACC,IAAD,EAAOC,WAAP,CAAX,IAAkCC,MAAM,CAACC,OAAP,CAAeL,YAAf,CAAlC,EAAgE;IAC5D,QAAQG,WAAW,CAACG,IAApB;MACI,KAAK,qBAAL;QACIX,cAAc,CAACO,IAAD,CAAd,GAAuBC,WAAW,CAACI,KAAnC;QACA;;MACJ,KAAK,eAAL;QACIZ,cAAc,CAACO,IAAD,CAAd,GAAuBX,YAAY,CAACY,WAAW,CAACD,IAAb,CAAnC;QACA;;MACJ,KAAK,qBAAL;MACA,KAAK,eAAL;QACIP,cAAc,CAACO,IAAD,CAAd,GAAuB,MAAMb,yBAAyB,CAACc,WAAW,CAACD,IAAb,EAAmBA,IAAnB,EAAyBT,YAAzB,CAAzB,EAA7B;QACA;;MACJ;QACI,MAAM,IAAIK,KAAJ,CAAU,kDAAkDU,IAAI,CAACC,SAAL,CAAeN,WAAf,CAA5D,CAAN;IAZR;EAcH;;EACD,IAAIC,MAAM,CAACM,IAAP,CAAYV,YAAZ,EAA0BW,MAA1B,KAAqC,CAAzC,EAA4C;IACxCP,MAAM,CAACQ,MAAP,CAAcjB,cAAd,EAA8BF,YAA9B;EACH;;EACD,IAAIoB,MAAM,CAACpB,YAAY,CAACqB,SAAd,CAAN,CAA+BC,WAA/B,OAAiD,IAArD,EAA2D;IACvD,MAAM3B,kBAAkB,CAACO,cAAD,CAAxB;EACH;;EACD,OAAOA,cAAP;AACH,CA1BM"},"metadata":{},"sourceType":"module"}