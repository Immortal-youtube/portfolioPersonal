{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n\n}\n\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\n\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n\n}\n\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\n\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\n\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\n\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\n\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\n\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n\n}\n\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\n\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n\n}\n\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\n\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n\n}\n\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\n\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n\n}\n\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\n\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(pool);\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n\n}\n\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":";;;;;;AAKA;;;;;;AAKA,MAAaA,6BAAb,CAA0C;EAMxC;EACAC,YAAYC,IAAZ,EAAgC;IAC9B,KAAKC,IAAL,GAAY,IAAIC,IAAJ,EAAZ;IACA,KAAKC,OAAL,GAAeH,IAAI,CAACG,OAApB;EACD;;AAVuC;;AAA1CC;AAaA;;;;;;AAKA,MAAaC,0BAAb,SAAgDP,6BAAhD,CAA6E;EAI3E;EACAC,YAAYC,IAAZ,EAAgC;IAC9B,MAAMA,IAAN;IACA,KAAKM,OAAL,GAAeN,IAAI,CAACM,OAApB;EACD;;AAR0E;;AAA7EF;AAWA;;;;;;AAKA,MAAaG,wBAAb,SAA8CT,6BAA9C,CAA2E;EACzE;EACAC,YAAYC,IAAZ,EAAgC;IAC9B,MAAMA,IAAN;EACD;;AAJwE;;AAA3EI;AAOA;;;;;;AAKA,MAAaI,yBAAb,SAA+CV,6BAA/C,CAA4E;EAC1E;EACAC,YAAYC,IAAZ,EAAgC;IAC9B,MAAMA,IAAN;EACD;;AAJyE;;AAA5EI;AAOA;;;;;;AAKA,MAAaK,sBAAb,SAA4CX,6BAA5C,CAAyE;EAIvE;EACAC,YAAYC,IAAZ,EAAkCU,UAAlC,EAA0E;IACxE,MAAMV,IAAN;IACA,KAAKW,YAAL,GAAoBD,UAAU,CAACE,EAA/B;EACD;;AARsE;;AAAzER;AAWA;;;;;;AAKA,MAAaS,oBAAb,SAA0Cf,6BAA1C,CAAuE;EAIrE;EACAC,YAAYC,IAAZ,EAAkCU,UAAlC,EAAwD;IACtD,MAAMV,IAAN;IACA,KAAKW,YAAL,GAAoBD,UAAU,CAACE,EAA/B;EACD;;AARoE;;AAAvER;AAWA;;;;;;AAKA,MAAaU,qBAAb,SAA2ChB,6BAA3C,CAAwE;EAOtE;EACAC,YACEC,IADF,EAEEU,UAFF,EAGEK,MAHF,EAGgB;IAEd,MAAMf,IAAN;IACA,KAAKW,YAAL,GAAoBD,UAAU,CAACE,EAA/B;IACA,KAAKG,MAAL,GAAcA,MAAM,IAAI,SAAxB;IACA,KAAKC,SAAL,GAAiBN,UAAU,CAACM,SAA5B;EACD;;AAjBqE;;AAAxEZ;AAoBA;;;;;;AAKA,MAAaa,8BAAb,SAAoDnB,6BAApD,CAAiF;EAC/E;EACAC,YAAYC,IAAZ,EAAgC;IAC9B,MAAMA,IAAN;EACD;;AAJ8E;;AAAjFI;AAOA;;;;;;AAKA,MAAac,6BAAb,SAAmDpB,6BAAnD,CAAgF;EAI9E;EACAC,YAAYC,IAAZ,EAAkCe,MAAlC,EAA2D;IACzD,MAAMf,IAAN;IACA,KAAKe,MAAL,GAAcA,MAAd;EACD;;AAR6E;;AAAhFX;AAWA;;;;;;AAKA,MAAae,yBAAb,SAA+CrB,6BAA/C,CAA4E;EAI1E;EACAC,YAAYC,IAAZ,EAAkCU,UAAlC,EAAwD;IACtD,MAAMV,IAAN;IACA,KAAKW,YAAL,GAAoBD,UAAU,CAACE,EAA/B;EACD;;AARyE;;AAA5ER;AAWA;;;;;;AAKA,MAAagB,wBAAb,SAA8CtB,6BAA9C,CAA2E;EAIzE;EACAC,YAAYC,IAAZ,EAAkCU,UAAlC,EAAwD;IACtD,MAAMV,IAAN;IACA,KAAKW,YAAL,GAAoBD,UAAU,CAACE,EAA/B;EACD;;AARwE;;AAA3ER;AAWA;;;;;;AAKA,MAAaiB,0BAAb,SAAgDvB,6BAAhD,CAA6E;EAM3E;EACAC,YACEC,IADF,EAE6E;IAAA,IAA3EM,OAA2E,uEAAF,EAAE;IAE3E,MAAMN,IAAN;IACA,KAAKgB,SAAL,GAAiBV,OAAO,CAACU,SAAzB;IACA,KAAKM,yBAAL,GAAiChB,OAAO,CAACgB,yBAAzC;EACD;;AAd0E;;AAA7ElB","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","options","ConnectionPoolReadyEvent","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","interruptInUseConnections"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { AnyError } from '../error';\nimport type { Connection } from './connection';\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionPoolMonitoringEvent {\n  /** A timestamp when the event was created  */\n  time: Date;\n  /** The address (host/port pair) of the pool */\n  address: string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** The options used to create this connection pool */\n  options?: ConnectionPoolOptions;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\n\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nexport class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** A monotonically increasing, per-pool id for the newly created connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** The reason the connection was closed */\n  reason: string;\n  serviceId?: ObjectId;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    connection: Pick<Connection, 'id' | 'serviceId'>,\n    reason: string\n  ) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** The reason the attempt to check out failed */\n  reason: AnyError | string;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, reason: AnyError | string) {\n    super(pool);\n    this.reason = reason;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  serviceId?: ObjectId;\n\n  interruptInUseConnections?: boolean;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}\n  ) {\n    super(pool);\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}