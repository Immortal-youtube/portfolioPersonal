{"ast":null,"code":"import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const serializeAws_queryAssumeRoleCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryAssumeRoleRequest(input, context),\n    Action: \"AssumeRole\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n    Action: \"AssumeRoleWithSAML\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n    Action: \"AssumeRoleWithWebIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n    Action: \"DecodeAuthorizationMessage\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n    Action: \"GetAccessKeyInfo\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryGetCallerIdentityRequest(input, context),\n    Action: \"GetCallerIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryGetFederationTokenRequest(input, context),\n    Action: \"GetFederationToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({ ...serializeAws_queryGetSessionTokenRequest(input, context),\n    Action: \"GetSessionToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nexport const deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nexport const deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n\n    case \"IDPCommunicationError\":\n    case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n      throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nexport const deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"InvalidAuthorizationMessageException\":\n    case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n      throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nexport const deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\n\nexport const deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\n\nexport const deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetFederationTokenCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nexport const deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetSessionTokenCommandError(output, context);\n  }\n\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\n\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n  const parsedOutput = { ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n\n  switch (errorCode) {\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\n\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n  const exception = new ExpiredTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n  const exception = new IDPCommunicationErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n  const exception = new IDPRejectedClaimException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n  const exception = new InvalidAuthorizationMessageException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n  const exception = new InvalidIdentityTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n  const exception = new MalformedPolicyDocumentException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n  const exception = new PackedPolicyTooLargeException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n  const exception = new RegionDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\n\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n  const entries = {};\n\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref => {\n      let [key, value] = _ref;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.TransitiveTagKeys != null) {\n    const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n\n    if (input.TransitiveTagKeys?.length === 0) {\n      entries.TransitiveTagKeys = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref3 => {\n      let [key, value] = _ref3;\n      const loc = `TransitiveTagKeys.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.ExternalId != null) {\n    entries[\"ExternalId\"] = input.ExternalId;\n  }\n\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n\n  if (input.SourceIdentity != null) {\n    entries[\"SourceIdentity\"] = input.SourceIdentity;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n  const entries = {};\n\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n\n  if (input.PrincipalArn != null) {\n    entries[\"PrincipalArn\"] = input.PrincipalArn;\n  }\n\n  if (input.SAMLAssertion != null) {\n    entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n  }\n\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n  const entries = {};\n\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n\n  if (input.WebIdentityToken != null) {\n    entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n  }\n\n  if (input.ProviderId != null) {\n    entries[\"ProviderId\"] = input.ProviderId;\n  }\n\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n  const entries = {};\n\n  if (input.EncodedMessage != null) {\n    entries[\"EncodedMessage\"] = input.EncodedMessage;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n  const entries = {};\n\n  if (input.AccessKeyId != null) {\n    entries[\"AccessKeyId\"] = input.AccessKeyId;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n  const entries = {};\n  return entries;\n};\n\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n  const entries = {};\n\n  if (input.Name != null) {\n    entries[\"Name\"] = input.Name;\n  }\n\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref6 => {\n      let [key, value] = _ref6;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n\n    Object.entries(memberEntries).forEach(_ref7 => {\n      let [key, value] = _ref7;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n  const entries = {};\n\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n\n  return entries;\n};\n\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n\n    const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n    Object.entries(memberEntries).forEach(_ref8 => {\n      let [key, value] = _ref8;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n  const entries = {};\n\n  if (input.arn != null) {\n    entries[\"arn\"] = input.arn;\n  }\n\n  return entries;\n};\n\nconst serializeAws_queryTag = (input, context) => {\n  const entries = {};\n\n  if (input.Key != null) {\n    entries[\"Key\"] = input.Key;\n  }\n\n  if (input.Value != null) {\n    entries[\"Value\"] = input.Value;\n  }\n\n  return entries;\n};\n\nconst serializeAws_querytagKeyListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n\n  return entries;\n};\n\nconst serializeAws_querytagListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n\n    const memberEntries = serializeAws_queryTag(entry, context);\n    Object.entries(memberEntries).forEach(_ref9 => {\n      let [key, value] = _ref9;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n\n  return entries;\n};\n\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n  const contents = {\n    AssumedRoleId: undefined,\n    Arn: undefined\n  };\n\n  if (output[\"AssumedRoleId\"] !== undefined) {\n    contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n  }\n\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    SourceIdentity: undefined\n  };\n\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Subject: undefined,\n    SubjectType: undefined,\n    Issuer: undefined,\n    Audience: undefined,\n    NameQualifier: undefined,\n    SourceIdentity: undefined\n  };\n\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n\n  if (output[\"Subject\"] !== undefined) {\n    contents.Subject = __expectString(output[\"Subject\"]);\n  }\n\n  if (output[\"SubjectType\"] !== undefined) {\n    contents.SubjectType = __expectString(output[\"SubjectType\"]);\n  }\n\n  if (output[\"Issuer\"] !== undefined) {\n    contents.Issuer = __expectString(output[\"Issuer\"]);\n  }\n\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n\n  if (output[\"NameQualifier\"] !== undefined) {\n    contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n  }\n\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    SubjectFromWebIdentityToken: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Provider: undefined,\n    Audience: undefined,\n    SourceIdentity: undefined\n  };\n\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n\n  if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n    contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n  }\n\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n\n  if (output[\"Provider\"] !== undefined) {\n    contents.Provider = __expectString(output[\"Provider\"]);\n  }\n\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryCredentials = (output, context) => {\n  const contents = {\n    AccessKeyId: undefined,\n    SecretAccessKey: undefined,\n    SessionToken: undefined,\n    Expiration: undefined\n  };\n\n  if (output[\"AccessKeyId\"] !== undefined) {\n    contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n  }\n\n  if (output[\"SecretAccessKey\"] !== undefined) {\n    contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n  }\n\n  if (output[\"SessionToken\"] !== undefined) {\n    contents.SessionToken = __expectString(output[\"SessionToken\"]);\n  }\n\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Expiration\"]));\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n  const contents = {\n    DecodedMessage: undefined\n  };\n\n  if (output[\"DecodedMessage\"] !== undefined) {\n    contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryFederatedUser = (output, context) => {\n  const contents = {\n    FederatedUserId: undefined,\n    Arn: undefined\n  };\n\n  if (output[\"FederatedUserId\"] !== undefined) {\n    contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n  }\n\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n  const contents = {\n    Account: undefined\n  };\n\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n  const contents = {\n    UserId: undefined,\n    Account: undefined,\n    Arn: undefined\n  };\n\n  if (output[\"UserId\"] !== undefined) {\n    contents.UserId = __expectString(output[\"UserId\"]);\n  }\n\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    FederatedUser: undefined,\n    PackedPolicySize: undefined\n  };\n\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n\n  if (output[\"FederatedUser\"] !== undefined) {\n    contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n  }\n\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined\n  };\n\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n\n  return contents;\n};\n\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\n\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\n\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const contents = {\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n    headers\n  };\n\n  if (resolvedHostname !== undefined) {\n    contents.hostname = resolvedHostname;\n  }\n\n  if (body !== undefined) {\n    contents.body = body;\n  }\n\n  return new __HttpRequest(contents);\n};\n\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n\n    return __getValueFromTextNode(parsedObjToReturn);\n  }\n\n  return {};\n});\n\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n\n  return value;\n};\n\nconst buildFormUrlencodedString = formEntries => Object.entries(formEntries).map(_ref10 => {\n  let [key, value] = _ref10;\n  return __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value);\n}).join(\"&\");\n\nconst loadQueryErrorCode = (output, data) => {\n  if (data.Error?.Code !== undefined) {\n    return data.Error.Code;\n  }\n\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","decorateServiceException","__decorateServiceException","expectNonNull","__expectNonNull","expectString","__expectString","extendedEncodeURIComponent","__extendedEncodeURIComponent","getValueFromTextNode","__getValueFromTextNode","parseRfc3339DateTimeWithOffset","__parseRfc3339DateTimeWithOffset","strictParseInt32","__strictParseInt32","throwDefaultError","XMLParser","ExpiredTokenException","IDPCommunicationErrorException","IDPRejectedClaimException","InvalidAuthorizationMessageException","InvalidIdentityTokenException","MalformedPolicyDocumentException","PackedPolicyTooLargeException","RegionDisabledException","STSServiceException","__BaseException","serializeAws_queryAssumeRoleCommand","input","context","headers","body","buildFormUrlencodedString","serializeAws_queryAssumeRoleRequest","Action","Version","buildHttpRpcRequest","undefined","serializeAws_queryAssumeRoleWithSAMLCommand","serializeAws_queryAssumeRoleWithSAMLRequest","serializeAws_queryAssumeRoleWithWebIdentityCommand","serializeAws_queryAssumeRoleWithWebIdentityRequest","serializeAws_queryDecodeAuthorizationMessageCommand","serializeAws_queryDecodeAuthorizationMessageRequest","serializeAws_queryGetAccessKeyInfoCommand","serializeAws_queryGetAccessKeyInfoRequest","serializeAws_queryGetCallerIdentityCommand","serializeAws_queryGetCallerIdentityRequest","serializeAws_queryGetFederationTokenCommand","serializeAws_queryGetFederationTokenRequest","serializeAws_queryGetSessionTokenCommand","serializeAws_queryGetSessionTokenRequest","deserializeAws_queryAssumeRoleCommand","output","statusCode","deserializeAws_queryAssumeRoleCommandError","data","parseBody","contents","deserializeAws_queryAssumeRoleResponse","AssumeRoleResult","response","$metadata","deserializeMetadata","Promise","resolve","parsedOutput","parseErrorBody","errorCode","loadQueryErrorCode","deserializeAws_queryExpiredTokenExceptionResponse","deserializeAws_queryMalformedPolicyDocumentExceptionResponse","deserializeAws_queryPackedPolicyTooLargeExceptionResponse","deserializeAws_queryRegionDisabledExceptionResponse","parsedBody","Error","exceptionCtor","deserializeAws_queryAssumeRoleWithSAMLCommand","deserializeAws_queryAssumeRoleWithSAMLCommandError","deserializeAws_queryAssumeRoleWithSAMLResponse","AssumeRoleWithSAMLResult","deserializeAws_queryIDPRejectedClaimExceptionResponse","deserializeAws_queryInvalidIdentityTokenExceptionResponse","deserializeAws_queryAssumeRoleWithWebIdentityCommand","deserializeAws_queryAssumeRoleWithWebIdentityCommandError","deserializeAws_queryAssumeRoleWithWebIdentityResponse","AssumeRoleWithWebIdentityResult","deserializeAws_queryIDPCommunicationErrorExceptionResponse","deserializeAws_queryDecodeAuthorizationMessageCommand","deserializeAws_queryDecodeAuthorizationMessageCommandError","deserializeAws_queryDecodeAuthorizationMessageResponse","DecodeAuthorizationMessageResult","deserializeAws_queryInvalidAuthorizationMessageExceptionResponse","deserializeAws_queryGetAccessKeyInfoCommand","deserializeAws_queryGetAccessKeyInfoCommandError","deserializeAws_queryGetAccessKeyInfoResponse","GetAccessKeyInfoResult","deserializeAws_queryGetCallerIdentityCommand","deserializeAws_queryGetCallerIdentityCommandError","deserializeAws_queryGetCallerIdentityResponse","GetCallerIdentityResult","deserializeAws_queryGetFederationTokenCommand","deserializeAws_queryGetFederationTokenCommandError","deserializeAws_queryGetFederationTokenResponse","GetFederationTokenResult","deserializeAws_queryGetSessionTokenCommand","deserializeAws_queryGetSessionTokenCommandError","deserializeAws_queryGetSessionTokenResponse","GetSessionTokenResult","deserialized","deserializeAws_queryExpiredTokenException","exception","deserializeAws_queryIDPCommunicationErrorException","deserializeAws_queryIDPRejectedClaimException","deserializeAws_queryInvalidAuthorizationMessageException","deserializeAws_queryInvalidIdentityTokenException","deserializeAws_queryMalformedPolicyDocumentException","deserializeAws_queryPackedPolicyTooLargeException","deserializeAws_queryRegionDisabledException","entries","RoleArn","RoleSessionName","PolicyArns","memberEntries","serializeAws_querypolicyDescriptorListType","length","Object","forEach","key","value","loc","Policy","DurationSeconds","Tags","serializeAws_querytagListType","TransitiveTagKeys","serializeAws_querytagKeyListType","ExternalId","SerialNumber","TokenCode","SourceIdentity","PrincipalArn","SAMLAssertion","WebIdentityToken","ProviderId","EncodedMessage","AccessKeyId","Name","counter","entry","serializeAws_queryPolicyDescriptorType","arn","serializeAws_queryTag","Key","Value","deserializeAws_queryAssumedRoleUser","AssumedRoleId","Arn","Credentials","AssumedRoleUser","PackedPolicySize","deserializeAws_queryCredentials","Subject","SubjectType","Issuer","Audience","NameQualifier","SubjectFromWebIdentityToken","Provider","SecretAccessKey","SessionToken","Expiration","DecodedMessage","message","deserializeAws_queryFederatedUser","FederatedUserId","Account","UserId","FederatedUser","httpStatusCode","requestId","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","path","resolvedHostname","hostname","protocol","port","basePath","endpoint","method","endsWith","slice","encoded","parser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","tagValueProcessor","_","val","trim","includes","addEntity","parsedObj","parse","textNodeName","keys","parsedObjToReturn","errorBody","Message","formEntries","map","join","Code"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js"],"sourcesContent":["import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, throwDefaultError, } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const serializeAws_queryAssumeRoleCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleRequest(input, context),\n        Action: \"AssumeRole\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n        Action: \"AssumeRoleWithSAML\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n        Action: \"AssumeRoleWithWebIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n        Action: \"DecodeAuthorizationMessage\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n        Action: \"GetAccessKeyInfo\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetCallerIdentityRequest(input, context),\n        Action: \"GetCallerIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetFederationTokenRequest(input, context),\n        Action: \"GetFederationToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetSessionTokenRequest(input, context),\n        Action: \"GetSessionToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetFederationTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetSessionTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n    const exception = new IDPCommunicationErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n    const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n    const exception = new InvalidAuthorizationMessageException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n    const exception = new InvalidIdentityTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n    const exception = new MalformedPolicyDocumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n    const exception = new PackedPolicyTooLargeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n    const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.TransitiveTagKeys != null) {\n        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n        if (input.TransitiveTagKeys?.length === 0) {\n            entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.ExternalId != null) {\n        entries[\"ExternalId\"] = input.ExternalId;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    if (input.SourceIdentity != null) {\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.PrincipalArn != null) {\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\n    }\n    if (input.SAMLAssertion != null) {\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.WebIdentityToken != null) {\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n    }\n    if (input.ProviderId != null) {\n        entries[\"ProviderId\"] = input.ProviderId;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input.EncodedMessage != null) {\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\n    }\n    return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input.AccessKeyId != null) {\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\n    }\n    return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.Name != null) {\n        entries[\"Name\"] = input.Name;\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input.arn != null) {\n        entries[\"arn\"] = input.arn;\n    }\n    return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n    const entries = {};\n    if (input.Key != null) {\n        entries[\"Key\"] = input.Key;\n    }\n    if (input.Value != null) {\n        entries[\"Value\"] = input.Value;\n    }\n    return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryTag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n    const contents = {\n        AssumedRoleId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"AssumedRoleId\"] !== undefined) {\n        contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Subject: undefined,\n        SubjectType: undefined,\n        Issuer: undefined,\n        Audience: undefined,\n        NameQualifier: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Subject\"] !== undefined) {\n        contents.Subject = __expectString(output[\"Subject\"]);\n    }\n    if (output[\"SubjectType\"] !== undefined) {\n        contents.SubjectType = __expectString(output[\"SubjectType\"]);\n    }\n    if (output[\"Issuer\"] !== undefined) {\n        contents.Issuer = __expectString(output[\"Issuer\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"NameQualifier\"] !== undefined) {\n        contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        SubjectFromWebIdentityToken: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Provider: undefined,\n        Audience: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n        contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Provider\"] !== undefined) {\n        contents.Provider = __expectString(output[\"Provider\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n    const contents = {\n        AccessKeyId: undefined,\n        SecretAccessKey: undefined,\n        SessionToken: undefined,\n        Expiration: undefined,\n    };\n    if (output[\"AccessKeyId\"] !== undefined) {\n        contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n    }\n    if (output[\"SecretAccessKey\"] !== undefined) {\n        contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n    }\n    if (output[\"SessionToken\"] !== undefined) {\n        contents.SessionToken = __expectString(output[\"SessionToken\"]);\n    }\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Expiration\"]));\n    }\n    return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {\n        DecodedMessage: undefined,\n    };\n    if (output[\"DecodedMessage\"] !== undefined) {\n        contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n    const contents = {\n        FederatedUserId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"FederatedUserId\"] !== undefined) {\n        contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n    const contents = {\n        Account: undefined,\n    };\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n    const contents = {\n        UserId: undefined,\n        Account: undefined,\n        Arn: undefined,\n    };\n    if (output[\"UserId\"] !== undefined) {\n        contents.UserId = __expectString(output[\"UserId\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        FederatedUser: undefined,\n        PackedPolicySize: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"FederatedUser\"] !== undefined) {\n        contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error?.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}