{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\n\nconst error_1 = require(\"./error\");\n/** @public */\n\n\nexports.ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\n\nclass ReadPreference {\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode, tags, options) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n    options = options ?? {};\n\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n      }\n\n      if (this.hedge) {\n        throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n      }\n    }\n  } // Support the deprecated `preference` property introduced in the porcelain layer\n\n\n  get preference() {\n    return this.mode;\n  }\n\n  static fromString(mode) {\n    return new ReadPreference(mode);\n  }\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n\n\n  static fromOptions(options) {\n    if (!options) return;\n    const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference;\n  }\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n\n\n  static translate(options) {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  static isValid(mode) {\n    const VALID_MODES = new Set([ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null]);\n    return VALID_MODES.has(mode);\n  }\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n\n\n  isValid(mode) {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n   */\n\n\n  secondaryOk() {\n    const NEEDS_SECONDARYOK = new Set([ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST]);\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n\n\n  equals(readPreference) {\n    return readPreference.mode === this.mode;\n  }\n  /** Return JSON representation */\n\n\n  toJSON() {\n    const readPreference = {\n      mode: this.mode\n    };\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n\n}\n\nexports.ReadPreference = ReadPreference;\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);","map":{"version":3,"mappings":";;;;;;;AACA;AAOA;;;AACaA,6BAAqBC,MAAM,CAACC,MAAP,CAAc;EAC9CC,OAAO,EAAE,SADqC;EAE9CC,gBAAgB,EAAE,kBAF4B;EAG9CC,SAAS,EAAE,WAHmC;EAI9CC,kBAAkB,EAAE,oBAJ0B;EAK9CC,OAAO,EAAE;AALqC,CAAd,CAArB;AA4Cb;;;;;;;;AAOA,MAAaC,cAAb,CAA2B;EAmBzB;;;;;EAKAC,YAAYC,IAAZ,EAAsCC,IAAtC,EAAuDC,OAAvD,EAAsF;IACpF,IAAI,CAACJ,cAAc,CAACK,OAAf,CAAuBH,IAAvB,CAAL,EAAmC;MACjC,MAAM,IAAII,iCAAJ,CAA8B,gCAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAoB,EAAlF,CAAN;IACD;;IACD,IAAIE,OAAO,IAAI,IAAX,IAAmB,OAAOD,IAAP,KAAgB,QAAnC,IAA+C,CAACM,KAAK,CAACC,OAAN,CAAcP,IAAd,CAApD,EAAyE;MACvEC,OAAO,GAAGD,IAAV;MACAA,IAAI,GAAGQ,SAAP;IACD,CAHD,MAGO,IAAIR,IAAI,IAAI,CAACM,KAAK,CAACC,OAAN,CAAcP,IAAd,CAAb,EAAkC;MACvC,MAAM,IAAIG,iCAAJ,CAA8B,sCAA9B,CAAN;IACD;;IAED,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKS,KAAL,GAAaR,OAAO,EAAEQ,KAAtB;IACA,KAAKC,mBAAL,GAA2BF,SAA3B;IACA,KAAKG,cAAL,GAAsBH,SAAtB;IAEAP,OAAO,GAAGA,OAAO,IAAI,EAArB;;IACA,IAAIA,OAAO,CAACS,mBAAR,IAA+B,IAAnC,EAAyC;MACvC,IAAIT,OAAO,CAACS,mBAAR,IAA+B,CAAnC,EAAsC;QACpC,MAAM,IAAIP,iCAAJ,CAA8B,gDAA9B,CAAN;MACD;;MAED,KAAKO,mBAAL,GAA2BT,OAAO,CAACS,mBAAnC,CALuC,CAOvC;MACA;;MACA,KAAKC,cAAL,GAAsB,CAAtB;IACD;;IAED,IAAI,KAAKZ,IAAL,KAAcF,cAAc,CAACe,OAAjC,EAA0C;MACxC,IAAI,KAAKZ,IAAL,IAAaM,KAAK,CAACC,OAAN,CAAc,KAAKP,IAAnB,CAAb,IAAyC,KAAKA,IAAL,CAAUa,MAAV,GAAmB,CAAhE,EAAmE;QACjE,MAAM,IAAIV,iCAAJ,CAA8B,sDAA9B,CAAN;MACD;;MAED,IAAI,KAAKO,mBAAT,EAA8B;QAC5B,MAAM,IAAIP,iCAAJ,CACJ,qEADI,CAAN;MAGD;;MAED,IAAI,KAAKM,KAAT,EAAgB;QACd,MAAM,IAAIN,iCAAJ,CACJ,uDADI,CAAN;MAGD;IACF;EACF,CAvEwB,CAyEzB;;;EACc,IAAVW,UAAU;IACZ,OAAO,KAAKf,IAAZ;EACD;;EAEgB,OAAVgB,UAAU,CAAChB,IAAD,EAAa;IAC5B,OAAO,IAAIF,cAAJ,CAAmBE,IAAnB,CAAP;EACD;EAED;;;;;;;EAKkB,OAAXiB,WAAW,CAACf,OAAD,EAAoC;IACpD,IAAI,CAACA,OAAL,EAAc;IACd,MAAMgB,cAAc,GAClBhB,OAAO,CAACgB,cAAR,IAA0BhB,OAAO,CAACiB,OAAR,EAAiBC,WAAjB,CAA6BlB,OAA7B,CAAqCgB,cADjE;IAEA,MAAMG,kBAAkB,GAAGnB,OAAO,CAACmB,kBAAnC;;IAEA,IAAIH,cAAc,IAAI,IAAtB,EAA4B;MAC1B;IACD;;IAED,IAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;MACtC,OAAO,IAAIpB,cAAJ,CAAmBoB,cAAnB,EAAmCG,kBAAnC,EAAuD;QAC5DV,mBAAmB,EAAET,OAAO,CAACS,mBAD+B;QAE5DD,KAAK,EAAER,OAAO,CAACQ;MAF6C,CAAvD,CAAP;IAID,CALD,MAKO,IAAI,EAAEQ,cAAc,YAAYpB,cAA5B,KAA+C,OAAOoB,cAAP,KAA0B,QAA7E,EAAuF;MAC5F,MAAMlB,IAAI,GAAGkB,cAAc,CAAClB,IAAf,IAAuBkB,cAAc,CAACH,UAAnD;;MACA,IAAIf,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;QACpC,OAAO,IAAIF,cAAJ,CAAmBE,IAAnB,EAAyBkB,cAAc,CAACjB,IAAf,IAAuBoB,kBAAhD,EAAoE;UACzEV,mBAAmB,EAAEO,cAAc,CAACP,mBADqC;UAEzED,KAAK,EAAER,OAAO,CAACQ;QAF0D,CAApE,CAAP;MAID;IACF;;IAED,IAAIW,kBAAJ,EAAwB;MACtBH,cAAc,CAACjB,IAAf,GAAsBoB,kBAAtB;IACD;;IAED,OAAOH,cAAP;EACD;EAED;;;;;EAGgB,OAATI,SAAS,CAACpB,OAAD,EAAmC;IACjD,IAAIA,OAAO,CAACgB,cAAR,IAA0B,IAA9B,EAAoC,OAAOhB,OAAP;IACpC,MAAMqB,CAAC,GAAGrB,OAAO,CAACgB,cAAlB;;IAEA,IAAI,OAAOK,CAAP,KAAa,QAAjB,EAA2B;MACzBrB,OAAO,CAACgB,cAAR,GAAyB,IAAIpB,cAAJ,CAAmByB,CAAnB,CAAzB;IACD,CAFD,MAEO,IAAIA,CAAC,IAAI,EAAEA,CAAC,YAAYzB,cAAf,CAAL,IAAuC,OAAOyB,CAAP,KAAa,QAAxD,EAAkE;MACvE,MAAMvB,IAAI,GAAGuB,CAAC,CAACvB,IAAF,IAAUuB,CAAC,CAACR,UAAzB;;MACA,IAAIf,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;QACpCE,OAAO,CAACgB,cAAR,GAAyB,IAAIpB,cAAJ,CAAmBE,IAAnB,EAAyBuB,CAAC,CAACtB,IAA3B,EAAiC;UACxDU,mBAAmB,EAAEY,CAAC,CAACZ;QADiC,CAAjC,CAAzB;MAGD;IACF,CAPM,MAOA,IAAI,EAAEY,CAAC,YAAYzB,cAAf,CAAJ,EAAoC;MACzC,MAAM,IAAIM,iCAAJ,CAA8B,4BAA4BmB,CAAC,EAA3D,CAAN;IACD;;IAED,OAAOrB,OAAP;EACD;EAED;;;;;;;EAKc,OAAPC,OAAO,CAACH,IAAD,EAAa;IACzB,MAAMwB,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAC1B3B,cAAc,CAACe,OADW,EAE1Bf,cAAc,CAAC4B,iBAFW,EAG1B5B,cAAc,CAAC6B,SAHW,EAI1B7B,cAAc,CAAC8B,mBAJW,EAK1B9B,cAAc,CAAC+B,OALW,EAM1B,IAN0B,CAAR,CAApB;IASA,OAAOL,WAAW,CAACM,GAAZ,CAAgB9B,IAAhB,CAAP;EACD;EAED;;;;;;;EAKAG,OAAO,CAACH,IAAD,EAAc;IACnB,OAAOF,cAAc,CAACK,OAAf,CAAuB,OAAOH,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,KAAKA,IAA9D,CAAP;EACD;EAED;;;;;;EAIA+B,WAAW;IACT,MAAMC,iBAAiB,GAAG,IAAIP,GAAJ,CAAgB,CACxC3B,cAAc,CAAC4B,iBADyB,EAExC5B,cAAc,CAAC6B,SAFyB,EAGxC7B,cAAc,CAAC8B,mBAHyB,EAIxC9B,cAAc,CAAC+B,OAJyB,CAAhB,CAA1B;IAOA,OAAOG,iBAAiB,CAACF,GAAlB,CAAsB,KAAK9B,IAA3B,CAAP;EACD;EAED;;;;;;;EAKAiC,MAAM,CAACf,cAAD,EAA+B;IACnC,OAAOA,cAAc,CAAClB,IAAf,KAAwB,KAAKA,IAApC;EACD;EAED;;;EACAkC,MAAM;IACJ,MAAMhB,cAAc,GAAG;MAAElB,IAAI,EAAE,KAAKA;IAAb,CAAvB;IACA,IAAIO,KAAK,CAACC,OAAN,CAAc,KAAKP,IAAnB,CAAJ,EAA8BiB,cAAc,CAACjB,IAAf,GAAsB,KAAKA,IAA3B;IAC9B,IAAI,KAAKU,mBAAT,EAA8BO,cAAc,CAACP,mBAAf,GAAqC,KAAKA,mBAA1C;IAC9B,IAAI,KAAKD,KAAT,EAAgBQ,cAAc,CAACR,KAAf,GAAuB,KAAKA,KAA5B;IAChB,OAAOQ,cAAP;EACD;;AAxMwB;;AAA3B5B;AAOgBQ,yBAAUR,2BAAmBG,OAA7B;AACAK,mCAAoBR,2BAAmBI,gBAAvC;AACAI,2BAAYR,2BAAmBK,SAA/B;AACAG,qCAAsBR,2BAAmBM,kBAAzC;AACAE,yBAAUR,2BAAmBO,OAA7B;AAEAC,yBAAU,IAAIA,cAAJ,CAAmBR,2BAAmBG,OAAtC,CAAV;AACAK,kCAAmB,IAAIA,cAAJ,CAAmBR,2BAAmBI,gBAAtC,CAAnB;AACAI,2BAAY,IAAIA,cAAJ,CAAmBR,2BAAmBK,SAAtC,CAAZ;AACAG,oCAAqB,IAAIA,cAAJ,CAAmBR,2BAAmBM,kBAAtC,CAArB;AACAE,yBAAU,IAAIA,cAAJ,CAAmBR,2BAAmBO,OAAtC,CAAV","names":["exports","Object","freeze","primary","primaryPreferred","secondary","secondaryPreferred","nearest","ReadPreference","constructor","mode","tags","options","isValid","error_1","JSON","stringify","Array","isArray","undefined","hedge","maxStalenessSeconds","minWireVersion","PRIMARY","length","preference","fromString","fromOptions","readPreference","session","transaction","readPreferenceTags","translate","r","VALID_MODES","Set","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","has","secondaryOk","NEEDS_SECONDARYOK","equals","toJSON"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\read_preference.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoInvalidArgumentError } from './error';\nimport type { TagSet } from './sdam/server_description';\nimport type { ClientSession } from './sessions';\n\n/** @public */\nexport type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;\n\n/** @public */\nexport const ReadPreferenceMode = Object.freeze({\n  primary: 'primary',\n  primaryPreferred: 'primaryPreferred',\n  secondary: 'secondary',\n  secondaryPreferred: 'secondaryPreferred',\n  nearest: 'nearest'\n} as const);\n\n/** @public */\nexport type ReadPreferenceMode = typeof ReadPreferenceMode[keyof typeof ReadPreferenceMode];\n\n/** @public */\nexport interface HedgeOptions {\n  /** Explicitly enable or disable hedged reads. */\n  enabled?: boolean;\n}\n\n/** @public */\nexport interface ReadPreferenceOptions {\n  /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n  maxStalenessSeconds?: number;\n  /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n  hedge?: HedgeOptions;\n}\n\n/** @public */\nexport interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {\n  readPreference?:\n    | ReadPreferenceLike\n    | {\n        mode?: ReadPreferenceMode;\n        preference?: ReadPreferenceMode;\n        tags?: TagSet[];\n        maxStalenessSeconds?: number;\n      };\n}\n\n/** @public */\nexport interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {\n  session?: ClientSession;\n  readPreferenceTags?: TagSet[];\n  hedge?: HedgeOptions;\n}\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://docs.mongodb.com/manual/core/read-preference/\n */\nexport class ReadPreference {\n  mode: ReadPreferenceMode;\n  tags?: TagSet[];\n  hedge?: HedgeOptions;\n  maxStalenessSeconds?: number;\n  minWireVersion?: number;\n\n  public static PRIMARY = ReadPreferenceMode.primary;\n  public static PRIMARY_PREFERRED = ReadPreferenceMode.primaryPreferred;\n  public static SECONDARY = ReadPreferenceMode.secondary;\n  public static SECONDARY_PREFERRED = ReadPreferenceMode.secondaryPreferred;\n  public static NEAREST = ReadPreferenceMode.nearest;\n\n  public static primary = new ReadPreference(ReadPreferenceMode.primary);\n  public static primaryPreferred = new ReadPreference(ReadPreferenceMode.primaryPreferred);\n  public static secondary = new ReadPreference(ReadPreferenceMode.secondary);\n  public static secondaryPreferred = new ReadPreference(ReadPreferenceMode.secondaryPreferred);\n  public static nearest = new ReadPreference(ReadPreferenceMode.nearest);\n\n  /**\n   * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n   * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n   * @param options - Additional read preference options\n   */\n  constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions) {\n    if (!ReadPreference.isValid(mode)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n    }\n    if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n      options = tags;\n      tags = undefined;\n    } else if (tags && !Array.isArray(tags)) {\n      throw new MongoInvalidArgumentError('ReadPreference tags must be an array');\n    }\n\n    this.mode = mode;\n    this.tags = tags;\n    this.hedge = options?.hedge;\n    this.maxStalenessSeconds = undefined;\n    this.minWireVersion = undefined;\n\n    options = options ?? {};\n    if (options.maxStalenessSeconds != null) {\n      if (options.maxStalenessSeconds <= 0) {\n        throw new MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n      }\n\n      this.maxStalenessSeconds = options.maxStalenessSeconds;\n\n      // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n      //       topology has a lower value then a MongoError will be thrown during server selection.\n      this.minWireVersion = 5;\n    }\n\n    if (this.mode === ReadPreference.PRIMARY) {\n      if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n        throw new MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n      }\n\n      if (this.maxStalenessSeconds) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with maxStalenessSeconds'\n        );\n      }\n\n      if (this.hedge) {\n        throw new MongoInvalidArgumentError(\n          'Primary read preference cannot be combined with hedge'\n        );\n      }\n    }\n  }\n\n  // Support the deprecated `preference` property introduced in the porcelain layer\n  get preference(): ReadPreferenceMode {\n    return this.mode;\n  }\n\n  static fromString(mode: string): ReadPreference {\n    return new ReadPreference(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Construct a ReadPreference given an options object.\n   *\n   * @param options - The options object from which to extract the read preference.\n   */\n  static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined {\n    if (!options) return;\n    const readPreference =\n      options.readPreference ?? options.session?.transaction.options.readPreference;\n    const readPreferenceTags = options.readPreferenceTags;\n\n    if (readPreference == null) {\n      return;\n    }\n\n    if (typeof readPreference === 'string') {\n      return new ReadPreference(readPreference, readPreferenceTags, {\n        maxStalenessSeconds: options.maxStalenessSeconds,\n        hedge: options.hedge\n      });\n    } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n      const mode = readPreference.mode || readPreference.preference;\n      if (mode && typeof mode === 'string') {\n        return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n          maxStalenessSeconds: readPreference.maxStalenessSeconds,\n          hedge: options.hedge\n        });\n      }\n    }\n\n    if (readPreferenceTags) {\n      readPreference.tags = readPreferenceTags;\n    }\n\n    return readPreference as ReadPreference;\n  }\n\n  /**\n   * Replaces options.readPreference with a ReadPreference instance\n   */\n  static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions {\n    if (options.readPreference == null) return options;\n    const r = options.readPreference;\n\n    if (typeof r === 'string') {\n      options.readPreference = new ReadPreference(r);\n    } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n      const mode = r.mode || r.preference;\n      if (mode && typeof mode === 'string') {\n        options.readPreference = new ReadPreference(mode, r.tags, {\n          maxStalenessSeconds: r.maxStalenessSeconds\n        });\n      }\n    } else if (!(r instanceof ReadPreference)) {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n    }\n\n    return options;\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  static isValid(mode: string): boolean {\n    const VALID_MODES = new Set([\n      ReadPreference.PRIMARY,\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST,\n      null\n    ]);\n\n    return VALID_MODES.has(mode as ReadPreferenceMode);\n  }\n\n  /**\n   * Validate if a mode is legal\n   *\n   * @param mode - The string representing the read preference mode.\n   */\n  isValid(mode?: string): boolean {\n    return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n  }\n\n  /**\n   * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n   * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\n   */\n  secondaryOk(): boolean {\n    const NEEDS_SECONDARYOK = new Set<string>([\n      ReadPreference.PRIMARY_PREFERRED,\n      ReadPreference.SECONDARY,\n      ReadPreference.SECONDARY_PREFERRED,\n      ReadPreference.NEAREST\n    ]);\n\n    return NEEDS_SECONDARYOK.has(this.mode);\n  }\n\n  /**\n   * Check if the two ReadPreferences are equivalent\n   *\n   * @param readPreference - The read preference with which to check equality\n   */\n  equals(readPreference: ReadPreference): boolean {\n    return readPreference.mode === this.mode;\n  }\n\n  /** Return JSON representation */\n  toJSON(): Document {\n    const readPreference = { mode: this.mode } as Document;\n    if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n    if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n    if (this.hedge) readPreference.hedge = this.hedge;\n    return readPreference;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}