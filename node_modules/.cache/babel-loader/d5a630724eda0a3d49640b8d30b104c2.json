{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescription = void 0;\n\nconst common_1 = require(\"../sdam/common\");\n\nconst server_description_1 = require(\"../sdam/server_description\");\n\nconst RESPONSE_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'logicalSessionTimeoutMinutes'];\n/** @public */\n\nclass StreamDescription {\n  constructor(address, options) {\n    this.address = address;\n    this.type = common_1.ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!options?.loadBalanced;\n    this.compressors = options && options.compressors && Array.isArray(options.compressors) ? options.compressors : [];\n  }\n\n  receiveResponse(response) {\n    if (response == null) {\n      return;\n    }\n\n    this.type = (0, server_description_1.parseServerType)(response);\n\n    for (const field of RESPONSE_FIELDS) {\n      if (response[field] != null) {\n        this[field] = response[field];\n      } // testing case\n\n\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    }\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n    }\n  }\n\n}\n\nexports.StreamDescription = StreamDescription;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAGA,MAAMA,eAAe,GAAG,CACtB,gBADsB,EAEtB,gBAFsB,EAGtB,mBAHsB,EAItB,qBAJsB,EAKtB,mBALsB,EAMtB,8BANsB,CAAxB;AAgBA;;AACA,MAAaC,iBAAb,CAA8B;EAiB5BC,YAAYC,OAAZ,EAA6BC,OAA7B,EAA+D;IAC7D,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,IAAL,GAAYC,oBAAWC,OAAvB;IACA,KAAKC,cAAL,GAAsBC,SAAtB;IACA,KAAKC,cAAL,GAAsBD,SAAtB;IACA,KAAKE,iBAAL,GAAyB,QAAzB;IACA,KAAKC,mBAAL,GAA2B,QAA3B;IACA,KAAKC,iBAAL,GAAyB,MAAzB;IACA,KAAKC,4BAAL,GAAoCV,OAAO,EAAEU,4BAA7C;IACA,KAAKC,YAAL,GAAoB,CAAC,CAACX,OAAO,EAAEW,YAA/B;IACA,KAAKC,WAAL,GACEZ,OAAO,IAAIA,OAAO,CAACY,WAAnB,IAAkCC,KAAK,CAACC,OAAN,CAAcd,OAAO,CAACY,WAAtB,CAAlC,GACIZ,OAAO,CAACY,WADZ,GAEI,EAHN;EAID;;EAEDG,eAAe,CAACC,QAAD,EAA0B;IACvC,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;MACpB;IACD;;IACD,KAAKf,IAAL,GAAY,0CAAgBe,QAAhB,CAAZ;;IACA,KAAK,MAAMC,KAAX,IAAoBrB,eAApB,EAAqC;MACnC,IAAIoB,QAAQ,CAACC,KAAD,CAAR,IAAmB,IAAvB,EAA6B;QAC3B,KAAKA,KAAL,IAAcD,QAAQ,CAACC,KAAD,CAAtB;MACD,CAHkC,CAKnC;;;MACA,IAAI,4BAA4BD,QAAhC,EAA0C;QACxC,KAAKE,sBAAL,GAA8BF,QAAQ,CAAC,wBAAD,CAAtC;MACD;IACF;;IAED,IAAIA,QAAQ,CAACG,WAAb,EAA0B;MACxB,KAAKC,UAAL,GAAkB,KAAKR,WAAL,CAAiBS,MAAjB,CAAwBC,CAAC,IAAIN,QAAQ,CAACG,WAAT,EAAsBI,QAAtB,CAA+BD,CAA/B,CAA7B,EAAgE,CAAhE,CAAlB;IACD;EACF;;AApD2B;;AAA9BE","names":["RESPONSE_FIELDS","StreamDescription","constructor","address","options","type","common_1","Unknown","minWireVersion","undefined","maxWireVersion","maxBsonObjectSize","maxMessageSizeBytes","maxWriteBatchSize","logicalSessionTimeoutMinutes","loadBalanced","compressors","Array","isArray","receiveResponse","response","field","__nodejs_mock_server__","compression","compressor","filter","c","includes","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\stream_description.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { ServerType } from '../sdam/common';\nimport { parseServerType } from '../sdam/server_description';\nimport type { CompressorName } from './wire_protocol/compression';\n\nconst RESPONSE_FIELDS = [\n  'minWireVersion',\n  'maxWireVersion',\n  'maxBsonObjectSize',\n  'maxMessageSizeBytes',\n  'maxWriteBatchSize',\n  'logicalSessionTimeoutMinutes'\n] as const;\n\n/** @public */\nexport interface StreamDescriptionOptions {\n  compressors?: CompressorName[];\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n}\n\n/** @public */\nexport class StreamDescription {\n  address: string;\n  type: string;\n  minWireVersion?: number;\n  maxWireVersion?: number;\n  maxBsonObjectSize: number;\n  maxMessageSizeBytes: number;\n  maxWriteBatchSize: number;\n  compressors: CompressorName[];\n  compressor?: CompressorName;\n  logicalSessionTimeoutMinutes?: number;\n  loadBalanced: boolean;\n\n  __nodejs_mock_server__?: boolean;\n\n  zlibCompressionLevel?: number;\n\n  constructor(address: string, options?: StreamDescriptionOptions) {\n    this.address = address;\n    this.type = ServerType.Unknown;\n    this.minWireVersion = undefined;\n    this.maxWireVersion = undefined;\n    this.maxBsonObjectSize = 16777216;\n    this.maxMessageSizeBytes = 48000000;\n    this.maxWriteBatchSize = 100000;\n    this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n    this.loadBalanced = !!options?.loadBalanced;\n    this.compressors =\n      options && options.compressors && Array.isArray(options.compressors)\n        ? options.compressors\n        : [];\n  }\n\n  receiveResponse(response: Document | null): void {\n    if (response == null) {\n      return;\n    }\n    this.type = parseServerType(response);\n    for (const field of RESPONSE_FIELDS) {\n      if (response[field] != null) {\n        this[field] = response[field];\n      }\n\n      // testing case\n      if ('__nodejs_mock_server__' in response) {\n        this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n      }\n    }\n\n    if (response.compression) {\n      this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}