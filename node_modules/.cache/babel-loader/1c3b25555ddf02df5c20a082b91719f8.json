{"ast":null,"code":"import partitionsInfo from \"./partitions.json\";\nconst {\n  partitions\n} = partitionsInfo;\nconst DEFAULT_PARTITION = partitions.find(partition => partition.id === \"aws\");\nexport const partition = value => {\n  for (const partition of partitions) {\n    const {\n      regions,\n      outputs\n    } = partition;\n\n    for (const [region, regionData] of Object.entries(regions)) {\n      if (region === value) {\n        return { ...outputs,\n          ...regionData\n        };\n      }\n    }\n  }\n\n  for (const partition of partitions) {\n    const {\n      regionRegex,\n      outputs\n    } = partition;\n\n    if (new RegExp(regionRegex).test(value)) {\n      return { ...outputs\n      };\n    }\n  }\n\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n\n  return { ...DEFAULT_PARTITION.outputs\n  };\n};","map":{"version":3,"names":["partitionsInfo","partitions","DEFAULT_PARTITION","find","partition","id","value","regions","outputs","region","regionData","Object","entries","regionRegex","RegExp","test","Error"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"],"sourcesContent":["import partitionsInfo from \"./partitions.json\";\nconst { partitions } = partitionsInfo;\nconst DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\nexport const partition = (value) => {\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\n"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,mBAA3B;AACA,MAAM;EAAEC;AAAF,IAAiBD,cAAvB;AACA,MAAME,iBAAiB,GAAGD,UAAU,CAACE,IAAX,CAAiBC,SAAD,IAAeA,SAAS,CAACC,EAAV,KAAiB,KAAhD,CAA1B;AACA,OAAO,MAAMD,SAAS,GAAIE,KAAD,IAAW;EAChC,KAAK,MAAMF,SAAX,IAAwBH,UAAxB,EAAoC;IAChC,MAAM;MAAEM,OAAF;MAAWC;IAAX,IAAuBJ,SAA7B;;IACA,KAAK,MAAM,CAACK,MAAD,EAASC,UAAT,CAAX,IAAmCC,MAAM,CAACC,OAAP,CAAeL,OAAf,CAAnC,EAA4D;MACxD,IAAIE,MAAM,KAAKH,KAAf,EAAsB;QAClB,OAAO,EACH,GAAGE,OADA;UAEH,GAAGE;QAFA,CAAP;MAIH;IACJ;EACJ;;EACD,KAAK,MAAMN,SAAX,IAAwBH,UAAxB,EAAoC;IAChC,MAAM;MAAEY,WAAF;MAAeL;IAAf,IAA2BJ,SAAjC;;IACA,IAAI,IAAIU,MAAJ,CAAWD,WAAX,EAAwBE,IAAxB,CAA6BT,KAA7B,CAAJ,EAAyC;MACrC,OAAO,EACH,GAAGE;MADA,CAAP;IAGH;EACJ;;EACD,IAAI,CAACN,iBAAL,EAAwB;IACpB,MAAM,IAAIc,KAAJ,CAAU,mEACZ,qDADE,CAAN;EAEH;;EACD,OAAO,EACH,GAAGd,iBAAiB,CAACM;EADlB,CAAP;AAGH,CA3BM"},"metadata":{},"sourceType":"module"}