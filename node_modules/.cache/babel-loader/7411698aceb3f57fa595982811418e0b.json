{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.secret = secret;\n    this.hash = new RawSha256_1.RawSha256();\n    this.reset();\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  Sha256.prototype.reset = function () {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (this.secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(this.secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;AAAA;AAAA;EAME,gBAAYA,MAAZ,EAA+B;IAC7B,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAY,IAAIC,qBAAJ,EAAZ;IACA,KAAKC,KAAL;EACD;;EAEDC,oCAAOC,MAAP,EAAyB;IACvB,IAAI,wBAAYA,MAAZ,KAAuB,KAAKC,KAAhC,EAAuC;MACrC;IACD;;IAED,IAAI;MACF,KAAKL,IAAL,CAAUM,MAAV,CAAiB,4BAAgBF,MAAhB,CAAjB;IACD,CAFD,CAEE,OAAOG,CAAP,EAAU;MACV,KAAKF,KAAL,GAAaE,CAAb;IACD;EACF,CAVD;EAYA;;;;;EAGAJ;IACE,IAAI,KAAKE,KAAT,EAAgB;MACd,MAAM,KAAKA,KAAX;IACD;;IAED,IAAI,KAAKG,KAAT,EAAgB;MACd,IAAI,CAAC,KAAKA,KAAL,CAAWC,QAAhB,EAA0B;QACxB,KAAKD,KAAL,CAAWF,MAAX,CAAkB,KAAKN,IAAL,CAAUU,MAAV,EAAlB;MACD;;MAED,OAAO,KAAKF,KAAL,CAAWE,MAAX,EAAP;IACD;;IAED,OAAO,KAAKV,IAAL,CAAUU,MAAV,EAAP;EACD,CAdD;EAgBA;;;;;;;EAKMP,0BAAN;;;QACE;QAAA;QAAA,EAAO,KAAKQ,UAAL,EAAP;;;EACD,CAFK;;EAINR;IACE,KAAKH,IAAL,GAAY,IAAIC,qBAAJ,EAAZ;;IACA,IAAI,KAAKF,MAAT,EAAiB;MACf,KAAKS,KAAL,GAAa,IAAIP,qBAAJ,EAAb;MACA,IAAMW,KAAK,GAAGC,gBAAgB,CAAC,KAAKd,MAAN,CAA9B;MACA,IAAMS,KAAK,GAAG,IAAIM,UAAJ,CAAeC,sBAAf,CAAd;MACAP,KAAK,CAACQ,GAAN,CAAUJ,KAAV;;MAEA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,sBAApB,EAAgCE,CAAC,EAAjC,EAAqC;QACnCL,KAAK,CAACK,CAAD,CAAL,IAAY,IAAZ;QACAT,KAAK,CAACS,CAAD,CAAL,IAAY,IAAZ;MACD;;MAED,KAAKjB,IAAL,CAAUM,MAAV,CAAiBM,KAAjB;MACA,KAAKJ,KAAL,CAAWF,MAAX,CAAkBE,KAAlB,EAZe,CAcf;;MACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,UAA1B,EAAsCD,CAAC,EAAvC,EAA2C;QACzCL,KAAK,CAACK,CAAD,CAAL,GAAW,CAAX;MACD;IACF;EACF,CArBD;;EAsBF;AAAC,CA1ED;;AAAaE;;AA4Eb,SAASN,gBAAT,CAA0Bd,MAA1B,EAA4C;EAC1C,IAAIqB,KAAK,GAAG,4BAAgBrB,MAAhB,CAAZ;;EAEA,IAAIqB,KAAK,CAACF,UAAN,GAAmBH,sBAAvB,EAAmC;IACjC,IAAMM,UAAU,GAAG,IAAIpB,qBAAJ,EAAnB;IACAoB,UAAU,CAACf,MAAX,CAAkBc,KAAlB;IACAA,KAAK,GAAGC,UAAU,CAACX,MAAX,EAAR;EACD;;EAED,IAAMY,MAAM,GAAG,IAAIR,UAAJ,CAAeC,sBAAf,CAAf;EACAO,MAAM,CAACN,GAAP,CAAWI,KAAX;EACA,OAAOE,MAAP;AACD","names":["secret","hash","RawSha256_1","reset","Sha256","toHash","error","update","e","outer","finished","digest","digestSync","inner","bufferFromSecret","Uint8Array","constants_1","set","i","byteLength","exports","input","bufferHash","buffer"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\@aws-crypto\\sha256-js\\src\\jsSha256.ts"],"sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Checksum {\n  private readonly secret?: SourceData;\n  private hash: RawSha256;\n  private outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.hash = new RawSha256();\n    this.reset();\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n\n  reset(): void {\n    this.hash = new RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(this.secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n"]},"metadata":{},"sourceType":"script"}