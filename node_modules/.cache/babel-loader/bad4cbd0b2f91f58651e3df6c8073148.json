{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\n\nlet tokenizer = require('./tokenize');\n\nlet Comment = require('./comment');\n\nlet AtRule = require('./at-rule');\n\nlet Root = require('./root');\n\nlet Rule = require('./rule');\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n};\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i];\n    let pos = token[3] || token[2];\n    if (pos) return pos;\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input;\n    this.root = new Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input);\n  }\n\n  parse() {\n    let token;\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1];\n          break;\n\n        case ';':\n          this.freeSemicolon(token);\n          break;\n\n        case '}':\n          this.end(token);\n          break;\n\n        case 'comment':\n          this.comment(token);\n          break;\n\n        case 'at-word':\n          this.atrule(token);\n          break;\n\n        case '{':\n          this.emptyRule(token);\n          break;\n\n        default:\n          this.other(token);\n          break;\n      }\n    }\n\n    this.endFile();\n  }\n\n  comment(token) {\n    let node = new Comment();\n    this.init(node, token[2]);\n    node.source.end = this.getPosition(token[3] || token[2]);\n    let text = token[1].slice(2, -2);\n\n    if (/^\\s*$/.test(text)) {\n      node.text = '';\n      node.raws.left = text;\n      node.raws.right = '';\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n      node.text = match[2];\n      node.raws.left = match[1];\n      node.raws.right = match[3];\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule();\n    this.init(node, token[2]);\n    node.selector = '';\n    node.raws.between = '';\n    this.current = node;\n  }\n\n  other(start) {\n    let end = false;\n    let type = null;\n    let colon = false;\n    let bracket = null;\n    let brackets = [];\n    let customProperty = start[1].startsWith('--');\n    let tokens = [];\n    let token = start;\n\n    while (token) {\n      type = token[0];\n      tokens.push(token);\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token;\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token;\n        brackets.push('}');\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty);\n            return;\n          } else {\n            break;\n          }\n        } else if (type === '{') {\n          this.rule(tokens);\n          return;\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop());\n          end = true;\n          break;\n        } else if (type === ':') {\n          colon = true;\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n        if (brackets.length === 0) bracket = null;\n      }\n\n      token = this.tokenizer.nextToken();\n    }\n\n    if (this.tokenizer.endOfFile()) end = true;\n    if (brackets.length > 0) this.unclosedBracket(bracket);\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0];\n          if (token !== 'space' && token !== 'comment') break;\n          this.tokenizer.back(tokens.pop());\n        }\n      }\n\n      this.decl(tokens, customProperty);\n    } else {\n      this.unknownWord(tokens);\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop();\n    let node = new Rule();\n    this.init(node, tokens[0][2]);\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n    this.raw(node, 'selector', tokens);\n    this.current = node;\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration();\n    this.init(node, tokens[0][2]);\n    let last = tokens[tokens.length - 1];\n\n    if (last[0] === ';') {\n      this.semicolon = true;\n      tokens.pop();\n    }\n\n    node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens);\n      node.raws.before += tokens.shift()[1];\n    }\n\n    node.source.start = this.getPosition(tokens[0][2]);\n    node.prop = '';\n\n    while (tokens.length) {\n      let type = tokens[0][0];\n\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break;\n      }\n\n      node.prop += tokens.shift()[1];\n    }\n\n    node.raws.between = '';\n    let token;\n\n    while (tokens.length) {\n      token = tokens.shift();\n\n      if (token[0] === ':') {\n        node.raws.between += token[1];\n        break;\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token]);\n        }\n\n        node.raws.between += token[1];\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0];\n      node.prop = node.prop.slice(1);\n    }\n\n    let firstSpaces = [];\n    let next;\n\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      firstSpaces.push(tokens.shift());\n    }\n\n    this.precheckMissedSemicolon(tokens);\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i];\n\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true;\n        let string = this.stringFrom(tokens, i);\n        string = this.spacesFromEnd(tokens) + string;\n        if (string !== ' !important') node.raws.important = string;\n        break;\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0);\n        let str = '';\n\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0];\n\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break;\n          }\n\n          str = cache.pop()[1] + str;\n        }\n\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true;\n          node.raws.important = str;\n          tokens = cache;\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break;\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('');\n      firstSpaces = [];\n    }\n\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty);\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens);\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule();\n    node.name = token[1].slice(1);\n\n    if (node.name === '') {\n      this.unnamedAtrule(node, token);\n    }\n\n    this.init(node, token[2]);\n    let type;\n    let prev;\n    let shift;\n    let last = false;\n    let open = false;\n    let params = [];\n    let brackets = [];\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken();\n      type = token[0];\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']');\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}');\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop();\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2]);\n          this.semicolon = true;\n          break;\n        } else if (type === '{') {\n          open = true;\n          break;\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1;\n            prev = params[shift];\n\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift];\n            }\n\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2]);\n            }\n          }\n\n          this.end(token);\n          break;\n        } else {\n          params.push(token);\n        }\n      } else {\n        params.push(token);\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true;\n        break;\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params);\n      this.raw(node, 'params', params);\n\n      if (last) {\n        token = params[params.length - 1];\n        node.source.end = this.getPosition(token[3] || token[2]);\n        this.spaces = node.raws.between;\n        node.raws.between = '';\n      }\n    } else {\n      node.raws.afterName = '';\n      node.params = '';\n    }\n\n    if (open) {\n      node.nodes = [];\n      this.current = node;\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.semicolon = false;\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    this.spaces = '';\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2]);\n      this.current = this.current.parent;\n    } else {\n      this.unexpectedClose(token);\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock();\n\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon;\n    }\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1];\n\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1];\n\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces;\n        this.spaces = '';\n      }\n    }\n  } // Helpers\n\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset);\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    };\n  }\n\n  init(node, offset) {\n    this.current.push(node);\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    };\n    node.raws.before = this.spaces;\n    this.spaces = '';\n    if (node.type !== 'comment') this.semicolon = false;\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type;\n    let length = tokens.length;\n    let value = '';\n    let clean = true;\n    let next, prev;\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i];\n      type = token[0];\n\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false;\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty';\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty';\n\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false;\n          } else {\n            value += token[1];\n          }\n        } else {\n          clean = false;\n        }\n      } else {\n        value += token[1];\n      }\n    }\n\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '');\n      node.raws[prop] = {\n        value,\n        raw\n      };\n    }\n\n    node[prop] = value;\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next;\n    let spaces = '';\n\n    while (tokens.length) {\n      next = tokens[0][0];\n      if (next !== 'space' && next !== 'comment') break;\n      spaces += tokens.shift()[1];\n    }\n\n    return spaces;\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType;\n    let spaces = '';\n\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0];\n      if (lastTokenType !== 'space') break;\n      spaces = tokens.pop()[1] + spaces;\n    }\n\n    return spaces;\n  }\n\n  stringFrom(tokens, from) {\n    let result = '';\n\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1];\n    }\n\n    tokens.splice(from, tokens.length - from);\n    return result;\n  }\n\n  colon(tokens) {\n    let brackets = 0;\n    let token, type, prev;\n\n    for (let [i, element] of tokens.entries()) {\n      token = element;\n      type = token[0];\n\n      if (type === '(') {\n        brackets += 1;\n      }\n\n      if (type === ')') {\n        brackets -= 1;\n      }\n\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token);\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue;\n        } else {\n          return i;\n        }\n      }\n\n      prev = token;\n    }\n\n    return false;\n  } // Errors\n\n\n  unclosedBracket(bracket) {\n    throw this.input.error('Unclosed bracket', {\n      offset: bracket[2]\n    }, {\n      offset: bracket[2] + 1\n    });\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error('Unknown word', {\n      offset: tokens[0][2]\n    }, {\n      offset: tokens[0][2] + tokens[0][1].length\n    });\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error('Unexpected }', {\n      offset: token[2]\n    }, {\n      offset: token[2] + 1\n    });\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start;\n    throw this.input.error('Unclosed block', pos.line, pos.column);\n  }\n\n  doubleColon(token) {\n    throw this.input.error('Double colon', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error('At-rule without name', {\n      offset: token[2]\n    }, {\n      offset: token[2] + token[1].length\n    });\n  }\n\n  precheckMissedSemicolon() {// Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens);\n    if (colon === false) return;\n    let founded = 0;\n    let token;\n\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j];\n\n      if (token[0] !== 'space') {\n        founded += 1;\n        if (founded === 2) break;\n      }\n    } // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n\n\n    throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\n  }\n\n}\n\nmodule.exports = Parser;","map":{"version":3,"names":["Declaration","require","tokenizer","Comment","AtRule","Root","Rule","SAFE_COMMENT_NEIGHBOR","empty","space","findLastWithPosition","tokens","i","length","token","pos","Parser","constructor","input","root","current","spaces","semicolon","customProperty","createTokenizer","source","start","offset","line","column","parse","endOfFile","nextToken","freeSemicolon","end","comment","atrule","emptyRule","other","endFile","node","init","getPosition","text","slice","test","raws","left","right","match","selector","between","type","colon","bracket","brackets","startsWith","push","decl","rule","back","pop","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","raw","last","before","shift","prop","firstSpaces","next","precheckMissedSemicolon","toLowerCase","important","string","stringFrom","spacesFromEnd","cache","str","j","trim","indexOf","hasWord","some","map","join","concat","value","includes","checkMissedSemicolon","name","unnamedAtrule","prev","open","params","afterName","spacesAndCommentsFromStart","nodes","after","parent","unexpectedClose","unclosedBlock","ownSemicolon","fromOffset","col","clean","reduce","all","lastTokenType","from","result","splice","element","entries","doubleColon","error","founded","module","exports"],"sources":["C:/Users/anshs/SynologyDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/postcss/lib/parser.js"],"sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}