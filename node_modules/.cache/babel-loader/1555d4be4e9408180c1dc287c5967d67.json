{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst server_selection_1 = require(\"../sdam/server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\nfunction executeOperation(client, operation, callback) {\n  return (0, utils_1.maybeCallback)(() => executeOperationAsync(client, operation), callback);\n}\n\nexports.executeOperation = executeOperation;\n\nasync function executeOperationAsync(client, operation) {\n  if (!(operation instanceof operation_1.AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n  }\n\n  if (client.topology == null) {\n    // Auto connect on operation\n    if (client.s.hasBeenClosed) {\n      throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n    }\n\n    client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n\n    try {\n      await client.connect();\n    } finally {\n      delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n    }\n  }\n\n  const {\n    topology\n  } = client;\n\n  if (topology == null) {\n    throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n  }\n\n  if (topology.shouldCheckForSessionSupport()) {\n    await topology.selectServerAsync(read_preference_1.ReadPreference.primaryPreferred, {});\n  } // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n\n\n  let session = operation.session;\n  let owner;\n\n  if (topology.hasSessionSupport()) {\n    if (session == null) {\n      owner = Symbol();\n      session = client.startSession({\n        owner,\n        explicit: false\n      });\n    } else if (session.hasEnded) {\n      throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n      throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n  } else {\n    // no session support\n    if (session && session.explicit) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n    } else if (session && !session.explicit) {\n      // We do not have to worry about ending the session because the server session has not been acquired yet\n      delete operation.options.session;\n      operation.clearSession();\n      session = undefined;\n    }\n  }\n\n  const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n  const inTransaction = !!session?.inTransaction();\n\n  if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n    throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n  }\n\n  if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n\n  let selector;\n\n  if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n\n  const server = await topology.selectServerAsync(selector, {\n    session\n  });\n\n  if (session == null) {\n    // No session also means it is not retryable, early exit\n    return operation.executeAsync(server, undefined);\n  }\n\n  if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n    // non-retryable operation, early exit\n    try {\n      return await operation.executeAsync(server, session);\n    } finally {\n      if (session?.owner != null && session.owner === owner) {\n        await session.endSession().catch(() => null);\n      }\n    }\n  }\n\n  const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n  const willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n  const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n  const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n  const willRetry = hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite;\n\n  if (hasWriteAspect && willRetryWrite) {\n    operation.options.willRetryWrite = true;\n    session.incrementTransactionNumber();\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (operationError) {\n    if (willRetry && operationError instanceof error_1.MongoError) {\n      return await retryOperation(operation, operationError, {\n        session,\n        topology,\n        selector\n      });\n    }\n\n    throw operationError;\n  } finally {\n    if (session?.owner != null && session.owner === owner) {\n      await session.endSession().catch(() => null);\n    }\n  }\n}\n\nasync function retryOperation(operation, originalError, _ref) {\n  let {\n    session,\n    topology,\n    selector\n  } = _ref;\n  const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n  const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n\n  if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n    throw new error_1.MongoServerError({\n      message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      originalError\n    });\n  }\n\n  if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n    throw originalError;\n  }\n\n  if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n    throw originalError;\n  }\n\n  if (originalError instanceof error_1.MongoNetworkError && session.isPinned && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n    // If we have a cursor and the initial command fails with a network error,\n    // we can retry it on another connection. So we need to check it back in, clear the\n    // pool for the service id, and retry again.\n    session.unpin({\n      force: true,\n      forceClear: true\n    });\n  } // select a new server, and attempt to retry the operation\n\n\n  const server = await topology.selectServerAsync(selector, {\n    session\n  });\n\n  if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n    throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (retryError) {\n    if (retryError instanceof error_1.MongoError && retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n      throw originalError;\n    }\n\n    throw retryError;\n  }\n}","map":{"version":3,"mappings":"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","names":["MMAPv1_RETRY_WRITES_ERROR_CODE","error_1","IllegalOperation","MMAPv1_RETRY_WRITES_ERROR_MESSAGE","executeOperation","client","operation","callback","executeOperationAsync","exports","operation_1","topology","s","hasBeenClosed","options","Symbol","for","connect","shouldCheckForSessionSupport","selectServerAsync","read_preference_1","primaryPreferred","session","owner","hasSessionSupport","startSession","explicit","hasEnded","snapshotEnabled","capabilities","supportsSnapshotReads","clearSession","undefined","readPreference","primary","inTransaction","equals","mode","isPinned","transaction","isCommitted","bypassPinningCheck","unpin","selector","hasAspect","MUST_SELECT_SAME_SERVER","server","description","trySecondaryWrite","commonWireVersion","executeAsync","RETRYABLE","endSession","catch","willRetryRead","retryReads","canRetryRead","willRetryWrite","retryWrites","canRetryWrite","hasReadAspect","READ_OPERATION","hasWriteAspect","WRITE_OPERATION","willRetry","incrementTransactionNumber","operationError","retryOperation","originalError","isWriteOperation","isReadOperation","code","message","errmsg","CURSOR_CREATING","force","forceClear","retryError","hasErrorLabel","NoWritesPerformed"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\execute_operation.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport {\n  isRetryableReadError,\n  isRetryableWriteError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoNetworkError,\n  MongoNotConnectedError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoUnexpectedServerResponseError\n} from '../error';\nimport type { MongoClient } from '../mongo_client';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport {\n  sameServerSelector,\n  secondaryWritableServerSelector,\n  ServerSelector\n} from '../sdam/server_selection';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maybeCallback, supportsRetryableWrites } from '../utils';\nimport { AbstractOperation, Aspect } from './operation';\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\ntype ResultTypeFromOperation<TOperation> = TOperation extends AbstractOperation<infer K>\n  ? K\n  : never;\n\n/** @internal */\nexport interface ExecutionResult {\n  /** The server selected for the operation */\n  server: Server;\n  /** The session used for this operation, may be implicitly created */\n  session?: ClientSession;\n  /** The raw server response for the operation */\n  response: Document;\n}\n\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param callback - The command result callback\n */\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T): Promise<TResult>;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback: Callback<TResult>): void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void {\n  return maybeCallback(() => executeOperationAsync(client, operation), callback);\n}\n\nasync function executeOperationAsync<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T): Promise<TResult> {\n  if (!(operation instanceof AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new MongoRuntimeError('This method requires a valid operation instance');\n  }\n\n  if (client.topology == null) {\n    // Auto connect on operation\n    if (client.s.hasBeenClosed) {\n      throw new MongoNotConnectedError('Client must be connected before running operations');\n    }\n    client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n    try {\n      await client.connect();\n    } finally {\n      delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n    }\n  }\n\n  const { topology } = client;\n  if (topology == null) {\n    throw new MongoRuntimeError('client.connect did not create a topology but also did not throw');\n  }\n\n  if (topology.shouldCheckForSessionSupport()) {\n    await topology.selectServerAsync(ReadPreference.primaryPreferred, {});\n  }\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session = operation.session;\n  let owner: symbol | undefined;\n  if (topology.hasSessionSupport()) {\n    if (session == null) {\n      owner = Symbol();\n      session = client.startSession({ owner, explicit: false });\n    } else if (session.hasEnded) {\n      throw new MongoExpiredSessionError('Use of expired sessions is not permitted');\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n      throw new MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n  } else {\n    // no session support\n    if (session && session.explicit) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      throw new MongoCompatibilityError('Current topology does not support sessions');\n    } else if (session && !session.explicit) {\n      // We do not have to worry about ending the session because the server session has not been acquired yet\n      delete operation.options.session;\n      operation.clearSession();\n      session = undefined;\n    }\n  }\n\n  const readPreference = operation.readPreference ?? ReadPreference.primary;\n  const inTransaction = !!session?.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    throw new MongoTransactionError(\n      `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n    );\n  }\n\n  if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n\n  let selector: ReadPreference | ServerSelector;\n\n  if (operation.hasAspect(Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = sameServerSelector(operation.server?.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = secondaryWritableServerSelector(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n\n  const server = await topology.selectServerAsync(selector, { session });\n\n  if (session == null) {\n    // No session also means it is not retryable, early exit\n    return operation.executeAsync(server, undefined);\n  }\n\n  if (!operation.hasAspect(Aspect.RETRYABLE)) {\n    // non-retryable operation, early exit\n    try {\n      return await operation.executeAsync(server, session);\n    } finally {\n      if (session?.owner != null && session.owner === owner) {\n        await session.endSession().catch(() => null);\n      }\n    }\n  }\n\n  const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n\n  const willRetryWrite =\n    topology.s.options.retryWrites &&\n    !inTransaction &&\n    supportsRetryableWrites(server) &&\n    operation.canRetryWrite;\n\n  const hasReadAspect = operation.hasAspect(Aspect.READ_OPERATION);\n  const hasWriteAspect = operation.hasAspect(Aspect.WRITE_OPERATION);\n  const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n\n  if (hasWriteAspect && willRetryWrite) {\n    operation.options.willRetryWrite = true;\n    session.incrementTransactionNumber();\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (operationError) {\n    if (willRetry && operationError instanceof MongoError) {\n      return await retryOperation(operation, operationError, {\n        session,\n        topology,\n        selector\n      });\n    }\n    throw operationError;\n  } finally {\n    if (session?.owner != null && session.owner === owner) {\n      await session.endSession().catch(() => null);\n    }\n  }\n}\n\n/** @internal */\ntype RetryOptions = {\n  session: ClientSession;\n  topology: Topology;\n  selector: ReadPreference | ServerSelector;\n};\n\nasync function retryOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(\n  operation: T,\n  originalError: MongoError,\n  { session, topology, selector }: RetryOptions\n): Promise<TResult> {\n  const isWriteOperation = operation.hasAspect(Aspect.WRITE_OPERATION);\n  const isReadOperation = operation.hasAspect(Aspect.READ_OPERATION);\n\n  if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n    throw new MongoServerError({\n      message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      originalError\n    });\n  }\n\n  if (isWriteOperation && !isRetryableWriteError(originalError)) {\n    throw originalError;\n  }\n\n  if (isReadOperation && !isRetryableReadError(originalError)) {\n    throw originalError;\n  }\n\n  if (\n    originalError instanceof MongoNetworkError &&\n    session.isPinned &&\n    !session.inTransaction() &&\n    operation.hasAspect(Aspect.CURSOR_CREATING)\n  ) {\n    // If we have a cursor and the initial command fails with a network error,\n    // we can retry it on another connection. So we need to check it back in, clear the\n    // pool for the service id, and retry again.\n    session.unpin({ force: true, forceClear: true });\n  }\n\n  // select a new server, and attempt to retry the operation\n  const server = await topology.selectServerAsync(selector, { session });\n\n  if (isWriteOperation && !supportsRetryableWrites(server)) {\n    throw new MongoUnexpectedServerResponseError(\n      'Selected server does not support retryable writes'\n    );\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (retryError) {\n    if (\n      retryError instanceof MongoError &&\n      retryError.hasErrorLabel(MongoErrorLabel.NoWritesPerformed)\n    ) {\n      throw originalError;\n    }\n    throw retryError;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}