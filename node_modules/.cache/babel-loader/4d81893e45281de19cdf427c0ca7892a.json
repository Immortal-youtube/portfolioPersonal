{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\n\nconst error_1 = require(\"./error\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst write_concern_1 = require(\"./write_concern\");\n/** @internal */\n\n\nexports.TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n  [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n  [exports.TxnState.STARTING_TRANSACTION]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_IN_PROGRESS]: [exports.TxnState.TRANSACTION_IN_PROGRESS, exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_ABORTED],\n  [exports.TxnState.TRANSACTION_COMMITTED]: [exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n  [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.NO_TRANSACTION]\n};\nconst ACTIVE_STATES = new Set([exports.TxnState.STARTING_TRANSACTION, exports.TxnState.TRANSACTION_IN_PROGRESS]);\nconst COMMITTED_STATES = new Set([exports.TxnState.TRANSACTION_COMMITTED, exports.TxnState.TRANSACTION_COMMITTED_EMPTY, exports.TxnState.TRANSACTION_ABORTED]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\n\nclass Transaction {\n  /** Create a transaction @internal */\n  constructor(options) {\n    options = options ?? {};\n    this.state = exports.TxnState.NO_TRANSACTION;\n    this.options = {};\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    } // TODO: This isn't technically necessary\n\n\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n  /** @internal */\n\n\n  get server() {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken() {\n    return this._recoveryToken;\n  }\n\n  get isPinned() {\n    return !!this.server;\n  }\n  /** @returns Whether the transaction has started */\n\n\n  get isStarting() {\n    return this.state === exports.TxnState.STARTING_TRANSACTION;\n  }\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n\n\n  get isActive() {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted() {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n\n\n  transition(nextState) {\n    const nextStates = stateMachine[this.state];\n\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n\n      if (this.state === exports.TxnState.NO_TRANSACTION || this.state === exports.TxnState.STARTING_TRANSACTION || this.state === exports.TxnState.TRANSACTION_ABORTED) {\n        this.unpinServer();\n      }\n\n      return;\n    }\n\n    throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n  }\n  /** @internal */\n\n\n  pinServer(server) {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n  /** @internal */\n\n\n  unpinServer() {\n    this._pinnedServer = undefined;\n  }\n\n}\n\nexports.Transaction = Transaction;\n\nfunction isTransactionCommand(command) {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n\nexports.isTransactionCommand = isTransactionCommand;","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","NO_TRANSACTION","STARTING_TRANSACTION","TRANSACTION_IN_PROGRESS","TRANSACTION_COMMITTED","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","stateMachine","ACTIVE_STATES","Set","COMMITTED_STATES","Transaction","constructor","options","state","writeConcern","write_concern_1","fromOptions","w","error_1","readConcern","read_concern_1","readPreference","read_preference_1","maxCommitTimeMS","maxTimeMS","_pinnedServer","undefined","_recoveryToken","server","recoveryToken","isPinned","isStarting","isActive","has","isCommitted","transition","nextState","nextStates","includes","unpinServer","pinServer","isTransactionCommand","command","commitTransaction","abortTransaction"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\transactions.ts"],"sourcesContent":["import type { Document } from './bson';\nimport { MongoRuntimeError, MongoTransactionError } from './error';\nimport type { CommandOperationOptions } from './operations/command';\nimport { ReadConcern, ReadConcernLike } from './read_concern';\nimport type { ReadPreferenceLike } from './read_preference';\nimport { ReadPreference } from './read_preference';\nimport type { Server } from './sdam/server';\nimport { WriteConcern } from './write_concern';\n\n/** @internal */\nexport const TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n} as const);\n\n/** @internal */\nexport type TxnState = typeof TxnState[keyof typeof TxnState];\n\nconst stateMachine: { [state in TxnState]: TxnState[] } = {\n  [TxnState.NO_TRANSACTION]: [TxnState.NO_TRANSACTION, TxnState.STARTING_TRANSACTION],\n  [TxnState.STARTING_TRANSACTION]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_IN_PROGRESS]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_COMMITTED]: [\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.STARTING_TRANSACTION,\n    TxnState.NO_TRANSACTION\n  ],\n  [TxnState.TRANSACTION_ABORTED]: [TxnState.STARTING_TRANSACTION, TxnState.NO_TRANSACTION],\n  [TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.NO_TRANSACTION\n  ]\n};\n\nconst ACTIVE_STATES: Set<TxnState> = new Set([\n  TxnState.STARTING_TRANSACTION,\n  TxnState.TRANSACTION_IN_PROGRESS\n]);\n\nconst COMMITTED_STATES: Set<TxnState> = new Set([\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_COMMITTED_EMPTY,\n  TxnState.TRANSACTION_ABORTED\n]);\n\n/**\n * Configuration options for a transaction.\n * @public\n */\nexport interface TransactionOptions extends CommandOperationOptions {\n  // TODO(NODE-3344): These options use the proper class forms of these settings, it should accept the basic enum values too\n  /** A default read concern for commands in this transaction */\n  readConcern?: ReadConcernLike;\n  /** A default writeConcern for commands in this transaction */\n  writeConcern?: WriteConcern;\n  /** A default read preference for commands in this transaction */\n  readPreference?: ReadPreferenceLike;\n  /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */\n  maxCommitTimeMS?: number;\n}\n\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nexport class Transaction {\n  /** @internal */\n  state: TxnState;\n  options: TransactionOptions;\n  /** @internal */\n  _pinnedServer?: Server;\n  /** @internal */\n  _recoveryToken?: Document;\n\n  /** Create a transaction @internal */\n  constructor(options?: TransactionOptions) {\n    options = options ?? {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken(): Document | undefined {\n    return this._recoveryToken;\n  }\n\n  get isPinned(): boolean {\n    return !!this.server;\n  }\n\n  /** @returns Whether the transaction has started */\n  get isStarting(): boolean {\n    return this.state === TxnState.STARTING_TRANSACTION;\n  }\n\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n  get isActive(): boolean {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted(): boolean {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n  transition(nextState: TxnState): void {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n      if (\n        this.state === TxnState.NO_TRANSACTION ||\n        this.state === TxnState.STARTING_TRANSACTION ||\n        this.state === TxnState.TRANSACTION_ABORTED\n      ) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoRuntimeError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  /** @internal */\n  pinServer(server: Server): void {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  /** @internal */\n  unpinServer(): void {\n    this._pinnedServer = undefined;\n  }\n}\n\nexport function isTransactionCommand(command: Document): boolean {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n"]},"metadata":{},"sourceType":"script"}