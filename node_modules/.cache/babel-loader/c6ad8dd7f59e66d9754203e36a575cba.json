{"ast":null,"code":"export const parseBoolean = value => {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(`Unable to parse boolean value \"${value}\"`);\n  }\n};\nexport const expectBoolean = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    if (value === 0 || value === 1) {\n      logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n    }\n\n    if (value === 0) {\n      return false;\n    }\n\n    if (value === 1) {\n      return true;\n    }\n  }\n\n  if (typeof value === \"string\") {\n    const lower = value.toLowerCase();\n\n    if (lower === \"false\" || lower === \"true\") {\n      logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n    }\n\n    if (lower === \"false\") {\n      return false;\n    }\n\n    if (lower === \"true\") {\n      return true;\n    }\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n};\nexport const expectNumber = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    const parsed = parseFloat(value);\n\n    if (!Number.isNaN(parsed)) {\n      if (String(parsed) !== String(value)) {\n        logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n      }\n\n      return parsed;\n    }\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n};\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nexport const expectFloat32 = value => {\n  const expected = expectNumber(value);\n\n  if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n    if (Math.abs(expected) > MAX_FLOAT) {\n      throw new TypeError(`Expected 32-bit float, got ${value}`);\n    }\n  }\n\n  return expected;\n};\nexport const expectLong = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (Number.isInteger(value) && !Number.isNaN(value)) {\n    return value;\n  }\n\n  throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n};\nexport const expectInt = expectLong;\nexport const expectInt32 = value => expectSizedInt(value, 32);\nexport const expectShort = value => expectSizedInt(value, 16);\nexport const expectByte = value => expectSizedInt(value, 8);\n\nconst expectSizedInt = (value, size) => {\n  const expected = expectLong(value);\n\n  if (expected !== undefined && castInt(expected, size) !== expected) {\n    throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n  }\n\n  return expected;\n};\n\nconst castInt = (value, size) => {\n  switch (size) {\n    case 32:\n      return Int32Array.of(value)[0];\n\n    case 16:\n      return Int16Array.of(value)[0];\n\n    case 8:\n      return Int8Array.of(value)[0];\n  }\n};\n\nexport const expectNonNull = (value, location) => {\n  if (value === null || value === undefined) {\n    if (location) {\n      throw new TypeError(`Expected a non-null value for ${location}`);\n    }\n\n    throw new TypeError(\"Expected a non-null value\");\n  }\n\n  return value;\n};\nexport const expectObject = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"object\" && !Array.isArray(value)) {\n    return value;\n  }\n\n  const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n  throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n};\nexport const expectString = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n    logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n    return String(value);\n  }\n\n  throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n};\nexport const expectUnion = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  const asObject = expectObject(value);\n  const setKeys = Object.entries(asObject).filter(_ref => {\n    let [, v] = _ref;\n    return v != null;\n  }).map(_ref2 => {\n    let [k] = _ref2;\n    return k;\n  });\n\n  if (setKeys.length === 0) {\n    throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n  }\n\n  if (setKeys.length > 1) {\n    throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n  }\n\n  return asObject;\n};\nexport const strictParseDouble = value => {\n  if (typeof value == \"string\") {\n    return expectNumber(parseNumber(value));\n  }\n\n  return expectNumber(value);\n};\nexport const strictParseFloat = strictParseDouble;\nexport const strictParseFloat32 = value => {\n  if (typeof value == \"string\") {\n    return expectFloat32(parseNumber(value));\n  }\n\n  return expectFloat32(value);\n};\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n\nconst parseNumber = value => {\n  const matches = value.match(NUMBER_REGEX);\n\n  if (matches === null || matches[0].length !== value.length) {\n    throw new TypeError(`Expected real number, got implicit NaN`);\n  }\n\n  return parseFloat(value);\n};\n\nexport const limitedParseDouble = value => {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectNumber(value);\n};\nexport const handleFloat = limitedParseDouble;\nexport const limitedParseFloat = limitedParseDouble;\nexport const limitedParseFloat32 = value => {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectFloat32(value);\n};\n\nconst parseFloatString = value => {\n  switch (value) {\n    case \"NaN\":\n      return NaN;\n\n    case \"Infinity\":\n      return Infinity;\n\n    case \"-Infinity\":\n      return -Infinity;\n\n    default:\n      throw new Error(`Unable to parse float value: ${value}`);\n  }\n};\n\nexport const strictParseLong = value => {\n  if (typeof value === \"string\") {\n    return expectLong(parseNumber(value));\n  }\n\n  return expectLong(value);\n};\nexport const strictParseInt = strictParseLong;\nexport const strictParseInt32 = value => {\n  if (typeof value === \"string\") {\n    return expectInt32(parseNumber(value));\n  }\n\n  return expectInt32(value);\n};\nexport const strictParseShort = value => {\n  if (typeof value === \"string\") {\n    return expectShort(parseNumber(value));\n  }\n\n  return expectShort(value);\n};\nexport const strictParseByte = value => {\n  if (typeof value === \"string\") {\n    return expectByte(parseNumber(value));\n  }\n\n  return expectByte(value);\n};\n\nconst stackTraceWarning = message => {\n  return String(new TypeError(message).stack || message).split(\"\\n\").slice(0, 5).filter(s => !s.includes(\"stackTraceWarning\")).join(\"\\n\");\n};\n\nexport const logger = {\n  warn: console.warn\n};","map":{"version":3,"names":["parseBoolean","value","Error","expectBoolean","undefined","logger","warn","stackTraceWarning","lower","toLowerCase","TypeError","expectNumber","parsed","parseFloat","Number","isNaN","String","MAX_FLOAT","Math","ceil","expectFloat32","expected","Infinity","abs","expectLong","isInteger","expectInt","expectInt32","expectSizedInt","expectShort","expectByte","size","castInt","Int32Array","of","Int16Array","Int8Array","expectNonNull","location","expectObject","Array","isArray","receivedType","expectString","includes","expectUnion","asObject","setKeys","Object","entries","filter","v","map","k","length","strictParseDouble","parseNumber","strictParseFloat","strictParseFloat32","NUMBER_REGEX","matches","match","limitedParseDouble","parseFloatString","handleFloat","limitedParseFloat","limitedParseFloat32","NaN","strictParseLong","strictParseInt","strictParseInt32","strictParseShort","strictParseByte","message","stack","split","slice","s","join","console"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js"],"sourcesContent":["export const parseBoolean = (value) => {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n};\nexport const expectBoolean = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n};\nexport const expectNumber = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n};\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nexport const expectFloat32 = (value) => {\n    const expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n};\nexport const expectLong = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n};\nexport const expectInt = expectLong;\nexport const expectInt32 = (value) => expectSizedInt(value, 32);\nexport const expectShort = (value) => expectSizedInt(value, 16);\nexport const expectByte = (value) => expectSizedInt(value, 8);\nconst expectSizedInt = (value, size) => {\n    const expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n};\nconst castInt = (value, size) => {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport const expectNonNull = (value, location) => {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport const expectObject = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n};\nexport const expectString = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n};\nexport const expectUnion = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject)\n        .filter(([, v]) => v != null)\n        .map(([k]) => k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n};\nexport const strictParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport const strictParseFloat = strictParseDouble;\nexport const strictParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nconst parseNumber = (value) => {\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n};\nexport const limitedParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport const handleFloat = limitedParseDouble;\nexport const limitedParseFloat = limitedParseDouble;\nexport const limitedParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nconst parseFloatString = (value) => {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n};\nexport const strictParseLong = (value) => {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport const strictParseInt = strictParseLong;\nexport const strictParseInt32 = (value) => {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport const strictParseShort = (value) => {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport const strictParseByte = (value) => {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\nconst stackTraceWarning = (message) => {\n    return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter((s) => !s.includes(\"stackTraceWarning\"))\n        .join(\"\\n\");\n};\nexport const logger = {\n    warn: console.warn,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}