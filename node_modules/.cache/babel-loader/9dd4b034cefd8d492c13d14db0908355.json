{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\n\nlet PreviousMap = require('./previous-map');\n\nlet Comment = require('./comment');\n\nlet AtRule = require('./at-rule');\n\nlet Input = require('./input');\n\nlet Root = require('./root');\n\nlet Rule = require('./rule');\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n));\n  let {\n    inputs: ownInputs,\n    ...defaults\n  } = json;\n\n  if (ownInputs) {\n    inputs = [];\n\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input,\n        __proto__: Input.prototype\n      };\n\n      if (inputHydrated.map) {\n        inputHydrated.map = { ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        };\n      }\n\n      inputs.push(inputHydrated);\n    }\n  }\n\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));\n  }\n\n  if (defaults.source) {\n    let {\n      inputId,\n      ...source\n    } = defaults.source;\n    defaults.source = source;\n\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId];\n    }\n  }\n\n  if (defaults.type === 'root') {\n    return new Root(defaults);\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults);\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults);\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults);\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults);\n  } else {\n    throw new Error('Unknown node type: ' + json.type);\n  }\n}\n\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;","map":{"version":3,"names":["Declaration","require","PreviousMap","Comment","AtRule","Input","Root","Rule","fromJSON","json","inputs","Array","isArray","map","n","ownInputs","defaults","input","inputHydrated","__proto__","prototype","push","nodes","source","inputId","type","Error","module","exports","default"],"sources":["C:/Users/anshs/SynologyDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/postcss/lib/fromJSON.js"],"sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASO,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;EAC9B,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB,OAAOA,IAAI,CAACI,GAAL,CAASC,CAAC,IAAIN,QAAQ,CAACM,CAAD,CAAtB,CAAP;EAEzB,IAAI;IAAEJ,MAAM,EAAEK,SAAV;IAAqB,GAAGC;EAAxB,IAAqCP,IAAzC;;EACA,IAAIM,SAAJ,EAAe;IACbL,MAAM,GAAG,EAAT;;IACA,KAAK,IAAIO,KAAT,IAAkBF,SAAlB,EAA6B;MAC3B,IAAIG,aAAa,GAAG,EAAE,GAAGD,KAAL;QAAYE,SAAS,EAAEd,KAAK,CAACe;MAA7B,CAApB;;MACA,IAAIF,aAAa,CAACL,GAAlB,EAAuB;QACrBK,aAAa,CAACL,GAAd,GAAoB,EAClB,GAAGK,aAAa,CAACL,GADC;UAElBM,SAAS,EAAEjB,WAAW,CAACkB;QAFL,CAApB;MAID;;MACDV,MAAM,CAACW,IAAP,CAAYH,aAAZ;IACD;EACF;;EACD,IAAIF,QAAQ,CAACM,KAAb,EAAoB;IAClBN,QAAQ,CAACM,KAAT,GAAiBb,IAAI,CAACa,KAAL,CAAWT,GAAX,CAAeC,CAAC,IAAIN,QAAQ,CAACM,CAAD,EAAIJ,MAAJ,CAA5B,CAAjB;EACD;;EACD,IAAIM,QAAQ,CAACO,MAAb,EAAqB;IACnB,IAAI;MAAEC,OAAF;MAAW,GAAGD;IAAd,IAAyBP,QAAQ,CAACO,MAAtC;IACAP,QAAQ,CAACO,MAAT,GAAkBA,MAAlB;;IACA,IAAIC,OAAO,IAAI,IAAf,EAAqB;MACnBR,QAAQ,CAACO,MAAT,CAAgBN,KAAhB,GAAwBP,MAAM,CAACc,OAAD,CAA9B;IACD;EACF;;EACD,IAAIR,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;IAC5B,OAAO,IAAInB,IAAJ,CAASU,QAAT,CAAP;EACD,CAFD,MAEO,IAAIA,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;IACnC,OAAO,IAAIzB,WAAJ,CAAgBgB,QAAhB,CAAP;EACD,CAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;IACnC,OAAO,IAAIlB,IAAJ,CAASS,QAAT,CAAP;EACD,CAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,SAAtB,EAAiC;IACtC,OAAO,IAAItB,OAAJ,CAAYa,QAAZ,CAAP;EACD,CAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,QAAtB,EAAgC;IACrC,OAAO,IAAIrB,MAAJ,CAAWY,QAAX,CAAP;EACD,CAFM,MAEA;IACL,MAAM,IAAIU,KAAJ,CAAU,wBAAwBjB,IAAI,CAACgB,IAAvC,CAAN;EACD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiBpB,QAAjB;AACAA,QAAQ,CAACqB,OAAT,GAAmBrB,QAAnB"},"metadata":{},"sourceType":"script"}