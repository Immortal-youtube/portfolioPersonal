{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @public */\n\n\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  return cmdBase;\n}\n/** @internal */\n\n\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    const sort = (0, sort_1.formatSort)(options.sort);\n\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    } // Decorate the findAndModify command with the write Concern\n\n\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    } // force primary read preference\n\n\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options,\n      ...this.bsonOptions\n    }; // Create findAndModify command object\n\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    }; // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\n\n      if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n        callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n        return;\n      }\n\n      cmd.hint = options.hint;\n    } // Execute the command\n\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n\n}\n/** @internal */\n\n\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n\n}\n\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\n\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n\n}\n\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\n\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n\n}\n\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","command_1","constructor","collection","query","remove","sort","projection","fields","maxTimeMS","writeConcern","let","comment","undefined","readPreference","read_preference_1","primary","execute","server","session","callback","coll","bsonOptions","cmd","findAndModify","collectionName","err","hint","unacknowledgedWrite","w","error_1","executeCommand","result","FindOneAndDeleteOperation","filter","FindOneAndReplaceOperation","replacement","update","FindOneAndUpdateOperation","arrayFilters","operation_1","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\find_and_modify.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort, SortForCmd } from '../sort';\nimport { Callback, decorateWithCollation, hasAtomicOperators, maxWireVersion } from '../utils';\nimport type { WriteConcern, WriteConcernSettings } from '../write_concern';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport const ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n} as const);\n\n/** @public */\nexport type ReturnDocument = typeof ReturnDocument[keyof typeof ReturnDocument];\n\n/** @public */\nexport interface FindOneAndDeleteOptions extends CommandOperationOptions {\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface FindOneAndReplaceOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface FindOneAndUpdateOptions extends CommandOperationOptions {\n  /** Optional list of array filters referenced in filtered positional operators */\n  arrayFilters?: Document[];\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n  hint?: Document;\n  /** Limits the fields to return for all matching documents. */\n  projection?: Document;\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n  returnDocument?: ReturnDocument;\n  /** Determines which document the operation modifies if the query selects multiple documents. */\n  sort?: Sort;\n  /** Upsert the document if it does not exist. */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\ninterface FindAndModifyCmdBase {\n  remove: boolean;\n  new: boolean;\n  upsert: boolean;\n  update?: Document;\n  sort?: SortForCmd;\n  fields?: Document;\n  bypassDocumentValidation?: boolean;\n  arrayFilters?: Document[];\n  maxTimeMS?: number;\n  let?: Document;\n  writeConcern?: WriteConcern | WriteConcernSettings;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\nfunction configureFindAndModifyCmdBaseUpdateOpts(\n  cmdBase: FindAndModifyCmdBase,\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions\n): FindAndModifyCmdBase {\n  cmdBase.new = options.returnDocument === ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n\n/** @internal */\nclass FindAndModifyOperation extends CommandOperation<Document> {\n  override options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions;\n  cmdBase: FindAndModifyCmdBase;\n  collection: Collection;\n  query: Document;\n  doc?: Document;\n\n  constructor(\n    collection: Collection,\n    query: Document,\n    options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions\n  ) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n\n    const sort = formatSort(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    }\n\n    // force primary read preference\n    this.readPreference = ReadPreference.primary;\n\n    this.collection = collection;\n    this.query = query;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const coll = this.collection;\n    const query = this.query;\n    const options = { ...this.options, ...this.bsonOptions };\n\n    // Create findAndModify command object\n    const cmd: Document = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\n      if (unacknowledgedWrite || maxWireVersion(server) < 8) {\n        callback(\n          new MongoCompatibilityError(\n            'The current topology does not support a hint on findAndModify commands'\n          )\n        );\n\n        return;\n      }\n\n      cmd.hint = options.hint;\n    }\n\n    // Execute the command\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n}\n\n/** @internal */\nexport class FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection: Collection, filter: Document, options: FindOneAndDeleteOptions) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\n\n/** @internal */\nexport class FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: FindOneAndReplaceOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\n\n/** @internal */\nexport class FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    update: Document,\n    options: FindOneAndUpdateOptions\n  ) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n\n    if (update == null || typeof update !== 'object') {\n      throw new MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\n\ndefineAspects(FindAndModifyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE\n]);\n"]},"metadata":{},"sourceType":"script"}