{"ast":null,"code":"import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool(_ref) {\n  let {\n    accountId,\n    cache = localStorage(),\n    client,\n    customRoleArn,\n    identityPoolId,\n    logins,\n    userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined\n  } = _ref;\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n\n  let provider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n\n    if (!identityId) {\n      const {\n        IdentityId = throwOnMissingId()\n      } = await client.send(new GetIdCommand({\n        AccountId: accountId,\n        IdentityPoolId: identityPoolId,\n        Logins: logins ? await resolveLogins(logins) : undefined\n      }));\n      identityId = IdentityId;\n\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId\n    });\n    return provider();\n  };\n\n  return () => provider().catch(async err => {\n    if (cacheKey) {\n      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n    }\n\n    throw err;\n  });\n}\n\nfunction throwOnMissingId() {\n  throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"names":["GetIdCommand","CredentialsProviderError","fromCognitoIdentity","localStorage","resolveLogins","fromCognitoIdentityPool","accountId","cache","client","customRoleArn","identityPoolId","logins","userIdentifier","Object","keys","length","undefined","cacheKey","provider","identityId","getItem","IdentityId","throwOnMissingId","send","AccountId","IdentityPoolId","Logins","Promise","resolve","setItem","catch","err","removeItem"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js"],"sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined, }) {\n    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n    let provider = async () => {\n        let identityId = cacheKey && (await cache.getItem(cacheKey));\n        if (!identityId) {\n            const { IdentityId = throwOnMissingId() } = await client.send(new GetIdCommand({\n                AccountId: accountId,\n                IdentityPoolId: identityPoolId,\n                Logins: logins ? await resolveLogins(logins) : undefined,\n            }));\n            identityId = IdentityId;\n            if (cacheKey) {\n                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });\n            }\n        }\n        provider = fromCognitoIdentity({\n            client,\n            customRoleArn,\n            logins,\n            identityId,\n        });\n        return provider();\n    };\n    return () => provider().catch(async (err) => {\n        if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });\n        }\n        throw err;\n    });\n}\nfunction throwOnMissingId() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kCAA7B;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,SAASC,uBAAT,OAAgN;EAAA,IAA/K;IAAEC,SAAF;IAAaC,KAAK,GAAGJ,YAAY,EAAjC;IAAqCK,MAArC;IAA6CC,aAA7C;IAA4DC,cAA5D;IAA4EC,MAA5E;IAAoFC,cAAc,GAAG,CAACD,MAAD,IAAWE,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,KAA+B,CAA1C,GAA8C,WAA9C,GAA4DC;EAAjK,CAA+K;EACnN,MAAMC,QAAQ,GAAGL,cAAc,GAAI,oCAAmCF,cAAe,IAAGE,cAAe,EAAxE,GAA4EI,SAA3G;;EACA,IAAIE,QAAQ,GAAG,YAAY;IACvB,IAAIC,UAAU,GAAGF,QAAQ,KAAK,MAAMV,KAAK,CAACa,OAAN,CAAcH,QAAd,CAAX,CAAzB;;IACA,IAAI,CAACE,UAAL,EAAiB;MACb,MAAM;QAAEE,UAAU,GAAGC,gBAAgB;MAA/B,IAAsC,MAAMd,MAAM,CAACe,IAAP,CAAY,IAAIvB,YAAJ,CAAiB;QAC3EwB,SAAS,EAAElB,SADgE;QAE3EmB,cAAc,EAAEf,cAF2D;QAG3EgB,MAAM,EAAEf,MAAM,GAAG,MAAMP,aAAa,CAACO,MAAD,CAAtB,GAAiCK;MAH4B,CAAjB,CAAZ,CAAlD;MAKAG,UAAU,GAAGE,UAAb;;MACA,IAAIJ,QAAJ,EAAc;QACVU,OAAO,CAACC,OAAR,CAAgBrB,KAAK,CAACsB,OAAN,CAAcZ,QAAd,EAAwBE,UAAxB,CAAhB,EAAqDW,KAArD,CAA2D,MAAM,CAAG,CAApE;MACH;IACJ;;IACDZ,QAAQ,GAAGhB,mBAAmB,CAAC;MAC3BM,MAD2B;MAE3BC,aAF2B;MAG3BE,MAH2B;MAI3BQ;IAJ2B,CAAD,CAA9B;IAMA,OAAOD,QAAQ,EAAf;EACH,CApBD;;EAqBA,OAAO,MAAMA,QAAQ,GAAGY,KAAX,CAAiB,MAAOC,GAAP,IAAe;IACzC,IAAId,QAAJ,EAAc;MACVU,OAAO,CAACC,OAAR,CAAgBrB,KAAK,CAACyB,UAAN,CAAiBf,QAAjB,CAAhB,EAA4Ca,KAA5C,CAAkD,MAAM,CAAG,CAA3D;IACH;;IACD,MAAMC,GAAN;EACH,CALY,CAAb;AAMH;;AACD,SAAST,gBAAT,GAA4B;EACxB,MAAM,IAAIrB,wBAAJ,CAA6B,uDAA7B,CAAN;AACH"},"metadata":{},"sourceType":"module"}