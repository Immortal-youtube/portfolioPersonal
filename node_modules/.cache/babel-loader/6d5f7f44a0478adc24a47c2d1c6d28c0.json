{"ast":null,"code":"import { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n  [EndpointURLScheme.HTTP]: 80,\n  [EndpointURLScheme.HTTPS]: 443\n};\nexport const parseURL = value => {\n  const whatwgURL = (() => {\n    try {\n      if (value instanceof URL) {\n        return value;\n      }\n\n      if (typeof value === \"object\" && \"hostname\" in value) {\n        const {\n          hostname,\n          port,\n          protocol = \"\",\n          path = \"\",\n          query = {}\n        } = value;\n        const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n        url.search = Object.entries(query).map(_ref => {\n          let [k, v] = _ref;\n          return `${k}=${v}`;\n        }).join(\"&\");\n        return url;\n      }\n\n      return new URL(value);\n    } catch (error) {\n      return null;\n    }\n  })();\n\n  if (!whatwgURL) {\n    console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n    return null;\n  }\n\n  const urlString = whatwgURL.href;\n  const {\n    host,\n    hostname,\n    pathname,\n    protocol,\n    search\n  } = whatwgURL;\n\n  if (search) {\n    return null;\n  }\n\n  const scheme = protocol.slice(0, -1);\n\n  if (!Object.values(EndpointURLScheme).includes(scheme)) {\n    return null;\n  }\n\n  const isIp = isIpAddress(hostname);\n  const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);\n  const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n  return {\n    scheme,\n    authority,\n    path: pathname,\n    normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n    isIp\n  };\n};","map":{"version":3,"names":["EndpointURLScheme","isIpAddress","DEFAULT_PORTS","HTTP","HTTPS","parseURL","value","whatwgURL","URL","hostname","port","protocol","path","query","url","search","Object","entries","map","k","v","join","error","console","JSON","stringify","urlString","href","host","pathname","scheme","slice","values","includes","isIp","inputContainsDefaultPort","authority","normalizedPath","endsWith"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js"],"sourcesContent":["import { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,MAAMC,aAAa,GAAG;EAClB,CAACF,iBAAiB,CAACG,IAAnB,GAA0B,EADR;EAElB,CAACH,iBAAiB,CAACI,KAAnB,GAA2B;AAFT,CAAtB;AAIA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAC/B,MAAMC,SAAS,GAAG,CAAC,MAAM;IACrB,IAAI;MACA,IAAID,KAAK,YAAYE,GAArB,EAA0B;QACtB,OAAOF,KAAP;MACH;;MACD,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,cAAcA,KAA/C,EAAsD;QAClD,MAAM;UAAEG,QAAF;UAAYC,IAAZ;UAAkBC,QAAQ,GAAG,EAA7B;UAAiCC,IAAI,GAAG,EAAxC;UAA4CC,KAAK,GAAG;QAApD,IAA2DP,KAAjE;QACA,MAAMQ,GAAG,GAAG,IAAIN,GAAJ,CAAS,GAAEG,QAAS,KAAIF,QAAS,GAAEC,IAAI,GAAI,IAAGA,IAAK,EAAZ,GAAgB,EAAG,GAAEE,IAAK,EAAjE,CAAZ;QACAE,GAAG,CAACC,MAAJ,GAAaC,MAAM,CAACC,OAAP,CAAeJ,KAAf,EACRK,GADQ,CACJ;UAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;UAAA,OAAa,GAAED,CAAE,IAAGC,CAAE,EAAtB;QAAA,CADI,EAERC,IAFQ,CAEH,GAFG,CAAb;QAGA,OAAOP,GAAP;MACH;;MACD,OAAO,IAAIN,GAAJ,CAAQF,KAAR,CAAP;IACH,CAbD,CAcA,OAAOgB,KAAP,EAAc;MACV,OAAO,IAAP;IACH;EACJ,CAlBiB,GAAlB;;EAmBA,IAAI,CAACf,SAAL,EAAgB;IACZgB,OAAO,CAACD,KAAR,CAAe,mBAAkBE,IAAI,CAACC,SAAL,CAAenB,KAAf,CAAsB,mBAAvD;IACA,OAAO,IAAP;EACH;;EACD,MAAMoB,SAAS,GAAGnB,SAAS,CAACoB,IAA5B;EACA,MAAM;IAAEC,IAAF;IAAQnB,QAAR;IAAkBoB,QAAlB;IAA4BlB,QAA5B;IAAsCI;EAAtC,IAAiDR,SAAvD;;EACA,IAAIQ,MAAJ,EAAY;IACR,OAAO,IAAP;EACH;;EACD,MAAMe,MAAM,GAAGnB,QAAQ,CAACoB,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAf;;EACA,IAAI,CAACf,MAAM,CAACgB,MAAP,CAAchC,iBAAd,EAAiCiC,QAAjC,CAA0CH,MAA1C,CAAL,EAAwD;IACpD,OAAO,IAAP;EACH;;EACD,MAAMI,IAAI,GAAGjC,WAAW,CAACQ,QAAD,CAAxB;EACA,MAAM0B,wBAAwB,GAAGT,SAAS,CAACO,QAAV,CAAoB,GAAEL,IAAK,IAAG1B,aAAa,CAAC4B,MAAD,CAAS,EAApD,KAC5B,OAAOxB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAAC2B,QAAN,CAAgB,GAAEL,IAAK,IAAG1B,aAAa,CAAC4B,MAAD,CAAS,EAAhD,CADlC;EAEA,MAAMM,SAAS,GAAI,GAAER,IAAK,GAAEO,wBAAwB,GAAI,IAAGjC,aAAa,CAAC4B,MAAD,CAAS,EAA7B,GAAkC,EAAE,EAAxF;EACA,OAAO;IACHA,MADG;IAEHM,SAFG;IAGHxB,IAAI,EAAEiB,QAHH;IAIHQ,cAAc,EAAER,QAAQ,CAACS,QAAT,CAAkB,GAAlB,IAAyBT,QAAzB,GAAqC,GAAEA,QAAS,GAJ7D;IAKHK;EALG,CAAP;AAOH,CA5CM"},"metadata":{},"sourceType":"module"}