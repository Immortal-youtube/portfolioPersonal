{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucket = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst download_1 = require(\"./download\");\n\nconst upload_1 = require(\"./upload\");\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\n\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n  constructor(db, options) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = { ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n\n  openUploadStream(filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, options);\n  }\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n\n\n  openUploadStreamWithId(id, filename, options) {\n    return new upload_1.GridFSBucketWriteStream(this, filename, { ...options,\n      id\n    });\n  }\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n\n\n  openDownloadStream(id, options) {\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      _id: id\n    }, options);\n  }\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n\n\n  async delete(id) {\n    const {\n      deletedCount\n    } = await this.s._filesCollection.deleteOne({\n      _id: id\n    }); // Delete orphaned chunks before returning FileNotFound\n\n    await this.s._chunksCollection.deleteMany({\n      files_id: id\n    });\n\n    if (deletedCount === 0) {\n      // TODO(NODE-3483): Replace with more appropriate error\n      // Consider creating new error MongoGridFSFileNotFoundError\n      throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n    }\n  }\n  /** Convenience wrapper around find on the files collection */\n\n\n  find() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.s._filesCollection.find(filter, options);\n  }\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n\n\n  openDownloadStreamByName(filename, options) {\n    let sort = {\n      uploadDate: -1\n    };\n    let skip = undefined;\n\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = {\n          uploadDate: 1\n        };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n\n    return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, {\n      filename\n    }, { ...options,\n      sort,\n      skip\n    });\n  }\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n\n\n  async rename(id, filename) {\n    const filter = {\n      _id: id\n    };\n    const update = {\n      $set: {\n        filename\n      }\n    };\n    const {\n      matchedCount\n    } = await this.s._filesCollection.updateOne(filter, update);\n\n    if (matchedCount === 0) {\n      throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n    }\n  }\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n\n\n  async drop() {\n    await this.s._filesCollection.drop();\n    await this.s._chunksCollection.drop();\n  }\n\n}\n\nexports.GridFSBucket = GridFSBucket;\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\n\nGridFSBucket.INDEX = 'index';","map":{"version":3,"mappings":";;;;;;;AAIA;;AACA;;AAGA;;AAEA;;AAMA;;AAEA,MAAMA,6BAA6B,GAG/B;EACFC,UAAU,EAAE,IADV;EAEFC,cAAc,EAAE,MAAM;AAFpB,CAHJ;AAsCA;;;;;AAIA,MAAaC,YAAb,SAAkCC,+BAAlC,CAAuE;EAcrEC,YAAYC,EAAZ,EAAoBC,OAApB,EAAiD;IAC/C;IACA,KAAKC,eAAL,CAAqB,CAArB;IACA,MAAMC,cAAc,GAAG,EACrB,GAAGT,6BADkB;MAErB,GAAGO,OAFkB;MAGrBG,YAAY,EAAEC,6BAAaC,WAAb,CAAyBL,OAAzB;IAHO,CAAvB;IAKA,KAAKM,CAAL,GAAS;MACPP,EADO;MAEPC,OAAO,EAAEE,cAFF;MAGPK,iBAAiB,EAAER,EAAE,CAACS,UAAH,CAA2BN,cAAc,CAACR,UAAf,GAA4B,SAAvD,CAHZ;MAIPe,gBAAgB,EAAEV,EAAE,CAACS,UAAH,CAA0BN,cAAc,CAACR,UAAf,GAA4B,QAAtD,CAJX;MAKPgB,cAAc,EAAE,KALT;MAMPC,sBAAsB,EAAE;IANjB,CAAT;EAQD;EAED;;;;;;;;;;EASAC,gBAAgB,CACdC,QADc,EAEdb,OAFc,EAE0B;IAExC,OAAO,IAAIc,gCAAJ,CAA4B,IAA5B,EAAkCD,QAAlC,EAA4Cb,OAA5C,CAAP;EACD;EAED;;;;;;;EAKAe,sBAAsB,CACpBC,EADoB,EAEpBH,QAFoB,EAGpBb,OAHoB,EAGoB;IAExC,OAAO,IAAIc,gCAAJ,CAA4B,IAA5B,EAAkCD,QAAlC,EAA4C,EAAE,GAAGb,OAAL;MAAcgB;IAAd,CAA5C,CAAP;EACD;EAED;;;EACAC,kBAAkB,CAChBD,EADgB,EAEhBhB,OAFgB,EAEuB;IAEvC,OAAO,IAAIkB,iCAAJ,CACL,KAAKZ,CAAL,CAAOC,iBADF,EAEL,KAAKD,CAAL,CAAOG,gBAFF,EAGL,KAAKH,CAAL,CAAON,OAAP,CAAemB,cAHV,EAIL;MAAEC,GAAG,EAAEJ;IAAP,CAJK,EAKLhB,OALK,CAAP;EAOD;EAED;;;;;;;EAKY,MAANqB,MAAM,CAACL,EAAD,EAAa;IACvB,MAAM;MAAEM;IAAF,IAAmB,MAAM,KAAKhB,CAAL,CAAOG,gBAAP,CAAwBc,SAAxB,CAAkC;MAAEH,GAAG,EAAEJ;IAAP,CAAlC,CAA/B,CADuB,CAGvB;;IACA,MAAM,KAAKV,CAAL,CAAOC,iBAAP,CAAyBiB,UAAzB,CAAoC;MAAEC,QAAQ,EAAET;IAAZ,CAApC,CAAN;;IAEA,IAAIM,YAAY,KAAK,CAArB,EAAwB;MACtB;MACA;MACA,MAAM,IAAII,yBAAJ,CAAsB,yBAAyBV,EAAE,EAAjD,CAAN;IACD;EACF;EAED;;;EACAW,IAAI,GAA2D;IAAA,IAA1DC,MAA0D,uEAA7B,EAA6B;IAAA,IAAzB5B,OAAyB,uEAAF,EAAE;IAC7D,OAAO,KAAKM,CAAL,CAAOG,gBAAP,CAAwBkB,IAAxB,CAA6BC,MAA7B,EAAqC5B,OAArC,CAAP;EACD;EAED;;;;;;;;;EAOA6B,wBAAwB,CACtBhB,QADsB,EAEtBb,OAFsB,EAE6B;IAEnD,IAAI8B,IAAI,GAAS;MAAEC,UAAU,EAAE,CAAC;IAAf,CAAjB;IACA,IAAIC,IAAI,GAAGC,SAAX;;IACA,IAAIjC,OAAO,IAAIA,OAAO,CAACkC,QAAR,IAAoB,IAAnC,EAAyC;MACvC,IAAIlC,OAAO,CAACkC,QAAR,IAAoB,CAAxB,EAA2B;QACzBJ,IAAI,GAAG;UAAEC,UAAU,EAAE;QAAd,CAAP;QACAC,IAAI,GAAGhC,OAAO,CAACkC,QAAf;MACD,CAHD,MAGO;QACLF,IAAI,GAAG,CAAChC,OAAO,CAACkC,QAAT,GAAoB,CAA3B;MACD;IACF;;IACD,OAAO,IAAIhB,iCAAJ,CACL,KAAKZ,CAAL,CAAOC,iBADF,EAEL,KAAKD,CAAL,CAAOG,gBAFF,EAGL,KAAKH,CAAL,CAAON,OAAP,CAAemB,cAHV,EAIL;MAAEN;IAAF,CAJK,EAKL,EAAE,GAAGb,OAAL;MAAc8B,IAAd;MAAoBE;IAApB,CALK,CAAP;EAOD;EAED;;;;;;;;EAMY,MAANG,MAAM,CAACnB,EAAD,EAAeH,QAAf,EAA+B;IACzC,MAAMe,MAAM,GAAG;MAAER,GAAG,EAAEJ;IAAP,CAAf;IACA,MAAMoB,MAAM,GAAG;MAAEC,IAAI,EAAE;QAAExB;MAAF;IAAR,CAAf;IACA,MAAM;MAAEyB;IAAF,IAAmB,MAAM,KAAKhC,CAAL,CAAOG,gBAAP,CAAwB8B,SAAxB,CAAkCX,MAAlC,EAA0CQ,MAA1C,CAA/B;;IACA,IAAIE,YAAY,KAAK,CAArB,EAAwB;MACtB,MAAM,IAAIZ,yBAAJ,CAAsB,gBAAgBV,EAAE,YAAxC,CAAN;IACD;EACF;EAED;;;EACU,MAAJwB,IAAI;IACR,MAAM,KAAKlC,CAAL,CAAOG,gBAAP,CAAwB+B,IAAxB,EAAN;IACA,MAAM,KAAKlC,CAAL,CAAOC,iBAAP,CAAyBiC,IAAzB,EAAN;EACD;;AAnJoE;;AAAvEC;AAIE;;;;;;;;;AAQgB7C,qBAAQ,OAAR","names":["DEFAULT_GRIDFS_BUCKET_OPTIONS","bucketName","chunkSizeBytes","GridFSBucket","mongo_types_1","constructor","db","options","setMaxListeners","privateOptions","writeConcern","write_concern_1","fromOptions","s","_chunksCollection","collection","_filesCollection","checkedIndexes","calledOpenUploadStream","openUploadStream","filename","upload_1","openUploadStreamWithId","id","openDownloadStream","download_1","readPreference","_id","delete","deletedCount","deleteOne","deleteMany","files_id","error_1","find","filter","openDownloadStreamByName","sort","uploadDate","skip","undefined","revision","rename","update","$set","matchedCount","updateOne","drop","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\gridfs\\index.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport type { Db } from '../db';\nimport { MongoRuntimeError } from '../error';\nimport { Filter, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\nimport type { FindOptions } from './../operations/find';\nimport {\n  GridFSBucketReadStream,\n  GridFSBucketReadStreamOptions,\n  GridFSBucketReadStreamOptionsWithRevision,\n  GridFSFile\n} from './download';\nimport { GridFSBucketWriteStream, GridFSBucketWriteStreamOptions, GridFSChunk } from './upload';\n\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS: {\n  bucketName: string;\n  chunkSizeBytes: number;\n} = {\n  bucketName: 'fs',\n  chunkSizeBytes: 255 * 1024\n};\n\n/** @public */\nexport interface GridFSBucketOptions extends WriteConcernOptions {\n  /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n  bucketName?: string;\n  /** Number of bytes stored in each chunk. Defaults to 255KB */\n  chunkSizeBytes?: number;\n  /** Read preference to be passed to read operations */\n  readPreference?: ReadPreference;\n}\n\n/** @internal */\nexport interface GridFSBucketPrivate {\n  db: Db;\n  options: {\n    bucketName: string;\n    chunkSizeBytes: number;\n    readPreference?: ReadPreference;\n    writeConcern: WriteConcern | undefined;\n  };\n  _chunksCollection: Collection<GridFSChunk>;\n  _filesCollection: Collection<GridFSFile>;\n  checkedIndexes: boolean;\n  calledOpenUploadStream: boolean;\n}\n\n/** @public */\nexport type GridFSBucketEvents = {\n  index(): void;\n};\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n  /** @internal */\n  s: GridFSBucketPrivate;\n\n  /**\n   * When the first call to openUploadStream is made, the upload stream will\n   * check to see if it needs to create the proper indexes on the chunks and\n   * files collections. This event is fired either when 1) it determines that\n   * no index creation is necessary, 2) when it successfully creates the\n   * necessary indexes.\n   * @event\n   */\n  static readonly INDEX = 'index' as const;\n\n  constructor(db: Db, options?: GridFSBucketOptions) {\n    super();\n    this.setMaxListeners(0);\n    const privateOptions = {\n      ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n      ...options,\n      writeConcern: WriteConcern.fromOptions(options)\n    };\n    this.s = {\n      db,\n      options: privateOptions,\n      _chunksCollection: db.collection<GridFSChunk>(privateOptions.bucketName + '.chunks'),\n      _filesCollection: db.collection<GridFSFile>(privateOptions.bucketName + '.files'),\n      checkedIndexes: false,\n      calledOpenUploadStream: false\n    };\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS. The stream's 'id' property contains the resulting\n   * file's id.\n   *\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n\n  openUploadStream(\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, options);\n  }\n\n  /**\n   * Returns a writable stream (GridFSBucketWriteStream) for writing\n   * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n   * file's id.\n   */\n  openUploadStreamWithId(\n    id: ObjectId,\n    filename: string,\n    options?: GridFSBucketWriteStreamOptions\n  ): GridFSBucketWriteStream {\n    return new GridFSBucketWriteStream(this, filename, { ...options, id });\n  }\n\n  /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n  openDownloadStream(\n    id: ObjectId,\n    options?: GridFSBucketReadStreamOptions\n  ): GridFSBucketReadStream {\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { _id: id },\n      options\n    );\n  }\n\n  /**\n   * Deletes a file with the given id\n   *\n   * @param id - The id of the file doc\n   */\n  async delete(id: ObjectId): Promise<void> {\n    const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n\n    // Delete orphaned chunks before returning FileNotFound\n    await this.s._chunksCollection.deleteMany({ files_id: id });\n\n    if (deletedCount === 0) {\n      // TODO(NODE-3483): Replace with more appropriate error\n      // Consider creating new error MongoGridFSFileNotFoundError\n      throw new MongoRuntimeError(`File not found for id ${id}`);\n    }\n  }\n\n  /** Convenience wrapper around find on the files collection */\n  find(filter: Filter<GridFSFile> = {}, options: FindOptions = {}): FindCursor<GridFSFile> {\n    return this.s._filesCollection.find(filter, options);\n  }\n\n  /**\n   * Returns a readable stream (GridFSBucketReadStream) for streaming the\n   * file with the given name from GridFS. If there are multiple files with\n   * the same name, this will stream the most recent file with the given name\n   * (as determined by the `uploadDate` field). You can set the `revision`\n   * option to change this behavior.\n   */\n  openDownloadStreamByName(\n    filename: string,\n    options?: GridFSBucketReadStreamOptionsWithRevision\n  ): GridFSBucketReadStream {\n    let sort: Sort = { uploadDate: -1 };\n    let skip = undefined;\n    if (options && options.revision != null) {\n      if (options.revision >= 0) {\n        sort = { uploadDate: 1 };\n        skip = options.revision;\n      } else {\n        skip = -options.revision - 1;\n      }\n    }\n    return new GridFSBucketReadStream(\n      this.s._chunksCollection,\n      this.s._filesCollection,\n      this.s.options.readPreference,\n      { filename },\n      { ...options, sort, skip }\n    );\n  }\n\n  /**\n   * Renames the file with the given _id to the given string\n   *\n   * @param id - the id of the file to rename\n   * @param filename - new name for the file\n   */\n  async rename(id: ObjectId, filename: string): Promise<void> {\n    const filter = { _id: id };\n    const update = { $set: { filename } };\n    const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n    if (matchedCount === 0) {\n      throw new MongoRuntimeError(`File with id ${id} not found`);\n    }\n  }\n\n  /** Removes this bucket's files collection, followed by its chunks collection. */\n  async drop(): Promise<void> {\n    await this.s._filesCollection.drop();\n    await this.s._chunksCollection.drop();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}