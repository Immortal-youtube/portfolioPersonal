{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\n\nconst timers_1 = require(\"timers\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst connect_1 = require(\"./connect\");\n\nconst connection_1 = require(\"./connection\");\n\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\n\nconst errors_1 = require(\"./errors\");\n\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\n\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kConnections = Symbol('connections');\n/** @internal */\n\nconst kPending = Symbol('pending');\n/** @internal */\n\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\n\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\n\nconst kGeneration = Symbol('generation');\n/** @internal */\n\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\n\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kMetrics = Symbol('metrics');\n/** @internal */\n\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\n\nconst kPoolState = Symbol('poolState');\n/** @internal */\n\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\n\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    this.options = Object.freeze({ ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n\n    this[kPoolState] = exports.PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new utils_1.List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new utils_1.List();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n\n\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n\n\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n\n\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n\n\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n\n\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount() {\n    return this[kCheckedOut].size;\n  }\n\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n\n  get serverError() {\n    return this[kServer].description.error;\n  }\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n\n\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n\n\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n\n\n  ready() {\n    if (this[kPoolState] !== exports.PoolState.paused) {\n      return;\n    }\n\n    this[kPoolState] = exports.PoolState.ready;\n    this.emit(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n\n\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n\n\n  checkIn(connection) {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut].delete(connection);\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n\n\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (this.closed) {\n      return;\n    } // handle load balanced case\n\n\n    if (this.loadBalanced) {\n      const {\n        serviceId\n      } = options;\n\n      if (!serviceId) {\n        throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n      }\n\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid); // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n\n      if (generation == null) {\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n\n      this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        serviceId\n      }));\n      return;\n    } // handle non load-balanced case\n\n\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n    this[kPoolState] = exports.PoolState.paused;\n    this.clearMinPoolSizeTimer();\n\n    if (!alreadyPaused) {\n      this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        interruptInUseConnections\n      }));\n    }\n\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n\n    this.processWaitQueue();\n  }\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n\n\n  interruptInUseConnections(minGeneration) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        this.checkIn(connection);\n        connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n      }\n    }\n  }\n\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb ?? _options;\n\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this.closed) {\n      return callback();\n    } // immediately cancel any in-flight connections\n\n\n    this[kCancellationToken].emit('cancel'); // end the connection counter\n\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    this[kPoolState] = exports.PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n\n\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n  /** Clear the min pool size timer */\n\n\n  clearMinPoolSizeTimer() {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    }\n  }\n\n  destroyConnection(connection, reason) {\n    this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason)); // destroy the connection\n\n    process.nextTick(() => connection.destroy());\n  }\n\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n\n\n  destroyConnectionIfPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  createConnection(callback) {\n    const connectOptions = { ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n    this[kPending]++; // This is our version of a \"virtual\" no-I/O connection as the spec requires\n\n    this.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kPending]--;\n        this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n          id: connectOptions.id,\n          serviceId: undefined\n        }, 'error'));\n\n        if (err instanceof error_1.MongoNetworkError || err instanceof error_1.MongoServerError) {\n          err.connectionGeneration = connectOptions.generation;\n        }\n\n        callback(err ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n        return;\n      } // The pool might have closed since we started trying to create a connection\n\n\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        this[kPending]--;\n        connection.destroy({\n          force: true\n        });\n        callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n        return;\n      } // forward all events from the connection to the pool\n\n\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n      this[kPending]--;\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n\n    if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n\n        if (this[kPoolState] === exports.PoolState.ready) {\n          (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n      });\n    } else {\n      (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n    }\n  }\n\n  processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason));\n\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(error);\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n\n      if (!connection) {\n        break;\n      }\n\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError'));\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n          }\n\n          if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n          }\n\n          waitQueueMember.callback(err, connection);\n        }\n\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n\n    this[kProcessingWaitQueue] = false;\n  }\n\n}\n\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\n\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\n\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\n\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\n\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\n\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\n\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","Object","freeze","paused","ready","closed","ConnectionPool","mongo_types_1","constructor","server","options","connectionType","connection_1","maxPoolSize","minPoolSize","maxConnecting","maxIdleTimeMS","waitQueueTimeoutMS","minPoolSizeCheckFrequencyMS","autoEncrypter","metadata","error_1","utils_1","Set","undefined","Map","setMaxListeners","Infinity","metrics_1","process","nextTick","emit","CONNECTION_POOL_CREATED","connection_pool_events_1","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","size","waitQueueSize","loadBalanced","serviceGenerations","serverError","description","error","checkedOutConnections","waitQueueErrorMetrics","info","CONNECTION_POOL_READY","ensureMinPoolSize","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","waitQueueMember","timer","CONNECTION_CHECK_OUT_FAILED","errors_1","push","processWaitQueue","checkIn","connection","has","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","delete","CONNECTION_CHECKED_IN","reason","destroyConnection","clear","serviceId","sid","toHexString","get","set","CONNECTION_POOL_CLEARED","interruptInUseConnections","oldGeneration","alreadyPaused","clearMinPoolSizeTimer","minGeneration","onError","close","_options","_cb","assign","force","return","toArray","conn","cb","CONNECTION_CLOSED","destroy","err","CONNECTION_POOL_CLOSED","withConnection","fn","fnErr","result","minPoolSizeTimer","connectionIsIdle","idleTime","destroyConnectionIfPerished","isStale","isIdle","createConnection","connectOptions","id","next","value","cancellationToken","CONNECTION_CREATED","connectionGeneration","event","constants_1","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","prune","handleError","first","shift","add","CONNECTION_CHECKED_OUT"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport {\n  MongoError,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoServerError\n} from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport { Callback, eachAsync, List, makeCounter } from '../utils';\nimport { connect } from './connect';\nimport { Connection, ConnectionEvents, ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport {\n  PoolClearedError,\n  PoolClearedOnNetworkError,\n  PoolClosedError,\n  WaitQueueTimeoutError\n} from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n  /** @internal */\n  minPoolSizeCheckFrequencyMS?: number;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolReady(event: ConnectionPoolReadyEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  [kPoolState]: typeof PoolState[keyof typeof PoolState];\n  [kServer]: Server;\n  [kConnections]: List<Connection>;\n  [kPending]: number;\n  [kCheckedOut]: Set<Connection>;\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   */\n  [kGeneration]: number;\n  /**\n   * A map of generations to service ids\n   */\n  [kServiceGenerations]: Map<string, number>;\n  [kConnectionCounter]: Generator<number>;\n  [kCancellationToken]: CancellationToken;\n  [kWaitQueue]: List<WaitQueueMember>;\n  [kMetrics]: ConnectionPoolMetrics;\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted each time the connection pool is marked ready\n   * @event\n   */\n  static readonly CONNECTION_POOL_READY = CONNECTION_POOL_READY;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  constructor(server: Server, options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new List();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut].size;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get serverError() {\n    return this[kServer].description.error;\n  }\n\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    if (this[kPoolState] !== PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = PoolState.ready;\n    this.emit(ConnectionPool.CONNECTION_POOL_READY, new ConnectionPoolReadyEvent(this));\n    clearTimeout(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emit(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut].delete(connection);\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}): void {\n    if (this.closed) {\n      return;\n    }\n\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const { serviceId } = options;\n      if (!serviceId) {\n        throw new MongoRuntimeError(\n          'ConnectionPool.clear() called in load balanced mode with no serviceId.'\n        );\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emit(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, { serviceId })\n      );\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === PoolState.paused;\n    this[kPoolState] = PoolState.paused;\n\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emit(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, { interruptInUseConnections })\n      );\n    }\n\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n\n    this.processWaitQueue();\n  }\n\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  private interruptInUseConnections(minGeneration: number) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        this.checkIn(connection);\n        connection.onError(new PoolClearedOnNetworkError(this));\n      }\n    }\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    this[kPoolState] = PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback?: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  /** Clear the min pool size timer */\n  private clearMinPoolSizeTimer(): void {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n  }\n\n  private destroyConnection(connection: Connection, reason: string) {\n    this.emit(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n    // destroy the connection\n    process.nextTick(() => connection.destroy());\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  private destroyConnectionIfPerished(connection: Connection): boolean {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emit(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kPending]--;\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error')\n        );\n        if (err instanceof MongoNetworkError || err instanceof MongoServerError) {\n          err.connectionGeneration = connectOptions.generation;\n        }\n        callback(err ?? new MongoRuntimeError('Connection creation failed without error'));\n        return;\n      }\n\n      // The pool might have closed since we started trying to create a connection\n      if (this[kPoolState] !== PoolState.ready) {\n        this[kPending]--;\n        connection.destroy({ force: true });\n        callback(this.closed ? new PoolClosedError(this) : new PoolClearedError(this));\n        return;\n      }\n\n      // forward all events from the connection to the pool\n      for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, (e: any) => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if ((generation = this.serviceGenerations.get(sid))) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(this, connection));\n\n      this[kPending]--;\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === PoolState.ready) {\n          clearTimeout(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = setTimeout(\n            () => this.ensureMinPoolSize(),\n            this.options.minPoolSizeCheckFrequencyMS\n          );\n        }\n      });\n    } else {\n      clearTimeout(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = setTimeout(\n        () => this.ensureMinPoolSize(),\n        this.options.minPoolSizeCheckFrequencyMS\n      );\n    }\n  }\n\n  private processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (this[kPoolState] !== PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new PoolClosedError(this) : new PoolClearedError(this);\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, reason)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(error);\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emit(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              new ConnectionCheckOutFailedEvent(this, 'connectionError')\n            );\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emit(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection)\n            );\n          }\n\n          if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"]},"metadata":{},"sourceType":"script"}