{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketWriteStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\n\n\nclass GridFSBucketWriteStream extends stream_1.Writable {\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket, filename, options) {\n    super();\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern; // Signals the write is all done\n\n    this.done = false;\n    this.id = options.id ? options.id : new bson_1.ObjectId(); // properly inherit the default chunksize from parent\n\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n      checkIndexes(this).then(() => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      }, () => null);\n    }\n  }\n\n  write(chunk, encodingOrCallback, callback) {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n\n\n  async abort() {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n    }\n\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n    }\n\n    this.state.aborted = true;\n    await this.chunks.deleteMany({\n      files_id: this.id\n    });\n  }\n\n  end(chunkOrCallback, encodingOrCallback, callback) {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof chunkOrCallback === 'function' ? chunkOrCallback : typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\n    this.state.streamEnd = true;\n\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, result => {\n        if (callback) callback(undefined, result);\n      });\n    }\n\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return this;\n    }\n\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n    return this;\n  }\n\n}\n\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\n/** @event */\n\nGridFSBucketWriteStream.CLOSE = 'close';\n/** @event */\n\nGridFSBucketWriteStream.ERROR = 'error';\n/**\n * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n * @event\n */\n\nGridFSBucketWriteStream.FINISH = 'finish';\n\nfunction __handleError(stream, error, callback) {\n  if (stream.state.errored) {\n    return;\n  }\n\n  stream.state.errored = true;\n\n  if (callback) {\n    return callback(error);\n  }\n\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\n\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: new bson_1.ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\n\nasync function checkChunksIndex(stream) {\n  const index = {\n    files_id: 1,\n    n: 1\n  };\n  let indexes;\n\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (!hasChunksIndex) {\n    const writeConcernOptions = getWriteOptions(stream);\n    await stream.chunks.createIndex(index, { ...writeConcernOptions,\n      background: true,\n      unique: true\n    });\n  }\n}\n\nfunction checkDone(stream, callback) {\n  if (stream.done) return true;\n\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true; // Create a new files doc\n\n    const filesDoc = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n\n    stream.files.insertOne(filesDoc, getWriteOptions(stream)).then(() => {\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n      stream.emit(GridFSBucketWriteStream.CLOSE);\n    }, error => {\n      return __handleError(stream, error, callback);\n    });\n    return true;\n  }\n\n  return false;\n}\n\nasync function checkIndexes(stream) {\n  const doc = await stream.files.findOne({}, {\n    projection: {\n      _id: 1\n    }\n  });\n\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n\n  const index = {\n    filename: 1,\n    uploadDate: 1\n  };\n  let indexes;\n\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, {\n      background: false\n    });\n  }\n\n  await checkChunksIndex(stream);\n}\n\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n  const ret = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, chunk, encoding, callback) {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  stream.length += inputBuf.length; // Input is small enough to fit in our buffer\n\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    callback && callback(); // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n\n    return true;\n  } // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n\n\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc;\n\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n\n      stream.chunks.insertOne(doc, getWriteOptions(stream)).then(() => {\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          stream.emit('drain', doc);\n          callback && callback();\n          checkDone(stream);\n        }\n      }, error => {\n        return __handleError(stream, error);\n      });\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  } // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n\n\n  return false;\n}\n\nfunction getWriteOptions(stream) {\n  const obj = {};\n\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n\n  return obj;\n}\n\nfunction waitForIndexes(stream, callback) {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n  return true;\n}\n\nfunction writeRemnant(stream, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n\n  ++stream.state.outstandingRequests; // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant); // If the stream was aborted, do not write remnant\n\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  stream.chunks.insertOne(doc, getWriteOptions(stream)).then(() => {\n    --stream.state.outstandingRequests;\n    checkDone(stream);\n  }, error => {\n    return __handleError(stream, error);\n  });\n  return true;\n}\n\nfunction checkAborted(stream, callback) {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new error_1.MongoAPIError('Stream has been aborted'));\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"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","names":["GridFSBucketWriteStream","stream_1","constructor","bucket","filename","options","chunks","s","_chunksCollection","files","_filesCollection","writeConcern","write_concern_1","fromOptions","done","id","bson_1","chunkSizeBytes","bufToStore","Buffer","alloc","length","n","pos","state","streamEnd","outstandingRequests","errored","aborted","calledOpenUploadStream","checkIndexes","then","checkedIndexes","emit","write","chunk","encodingOrCallback","callback","encoding","undefined","waitForIndexes","doWrite","abort","error_1","deleteMany","files_id","end","chunkOrCallback","checkAborted","once","FINISH","result","writeRemnant","exports","__handleError","stream","error","ERROR","createChunkDoc","filesId","data","_id","checkChunksIndex","index","indexes","listIndexes","toArray","code","NamespaceNotFound","hasChunksIndex","find","keys","Object","key","writeConcernOptions","getWriteOptions","createIndex","background","unique","checkDone","filesDoc","createFilesDoc","contentType","aliases","metadata","insertOne","CLOSE","doc","findOne","projection","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","obj","w","wtimeout","j","remnant"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\gridfs\\upload.ts"],"sourcesContent":["import { Writable } from 'stream';\n\nimport type { Document } from '../bson';\nimport { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { AnyError, MongoAPIError, MONGODB_ERROR_CODES, MongoError } from '../error';\nimport type { Callback } from '../utils';\nimport type { WriteConcernOptions } from '../write_concern';\nimport { WriteConcern } from './../write_concern';\nimport type { GridFSFile } from './download';\nimport type { GridFSBucket } from './index';\n\n/** @public */\nexport interface GridFSChunk {\n  _id: ObjectId;\n  files_id: ObjectId;\n  n: number;\n  data: Buffer | Uint8Array;\n}\n\n/** @public */\nexport interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\n  /** Overwrite this bucket's chunkSizeBytes for this file */\n  chunkSizeBytes?: number;\n  /** Custom file id for the GridFS file. */\n  id?: ObjectId;\n  /** Object to store in the file document's `metadata` field */\n  metadata?: Document;\n  /** String to store in the file document's `contentType` field */\n  contentType?: string;\n  /** Array of strings to store in the file document's `aliases` field */\n  aliases?: string[];\n}\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport class GridFSBucketWriteStream extends Writable implements NodeJS.WritableStream {\n  bucket: GridFSBucket;\n  chunks: Collection<GridFSChunk>;\n  filename: string;\n  files: Collection<GridFSFile>;\n  options: GridFSBucketWriteStreamOptions;\n  done: boolean;\n  id: ObjectId;\n  chunkSizeBytes: number;\n  bufToStore: Buffer;\n  length: number;\n  n: number;\n  pos: number;\n  state: {\n    streamEnd: boolean;\n    outstandingRequests: number;\n    errored: boolean;\n    aborted: boolean;\n  };\n  writeConcern?: WriteConcern;\n\n  /** @event */\n  static readonly CLOSE = 'close';\n  /** @event */\n  static readonly ERROR = 'error';\n  /**\n   * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n   * @event\n   */\n  static readonly FINISH = 'finish';\n\n  /**\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   * @internal\n   */\n  constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions) {\n    super();\n\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n\n    this.id = options.id ? options.id : new ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n\n      checkIndexes(this).then(\n        () => {\n          this.bucket.s.checkedIndexes = true;\n          this.bucket.emit('index');\n        },\n        () => null\n      );\n    }\n  }\n\n  /**\n   * Write a buffer to the stream.\n   *\n   * @param chunk - Buffer to write\n   * @param encodingOrCallback - Optional encoding for the buffer\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n   * @returns False if this write required flushing a chunk to MongoDB. True otherwise.\n   */\n  override write(chunk: Buffer | string): boolean;\n  override write(chunk: Buffer | string, callback: Callback<void>): boolean;\n  override write(chunk: Buffer | string, encoding: BufferEncoding | undefined): boolean;\n  override write(\n    chunk: Buffer | string,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<void>\n  ): boolean;\n  override write(\n    chunk: Buffer | string,\n    encodingOrCallback?: Callback<void> | BufferEncoding,\n    callback?: Callback<void>\n  ): boolean {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   */\n  async abort(): Promise<void> {\n    if (this.state.streamEnd) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot abort a stream that has already completed');\n    }\n\n    if (this.state.aborted) {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n      throw new MongoAPIError('Cannot call abort() on a stream twice');\n    }\n\n    this.state.aborted = true;\n    await this.chunks.deleteMany({ files_id: this.id });\n  }\n\n  /**\n   * Tells the stream that no more data will be coming in. The stream will\n   * persist the remaining data to MongoDB, write the files document, and\n   * then emit a 'finish' event.\n   *\n   * @param chunk - Buffer to write\n   * @param encoding - Optional encoding for the buffer\n   * @param callback - Function to call when all files and chunks have been persisted to MongoDB\n   */\n  override end(): this;\n  override end(chunk: Buffer): this;\n  override end(callback: Callback<GridFSFile | void>): this;\n  override end(chunk: Buffer, callback: Callback<GridFSFile | void>): this;\n  override end(chunk: Buffer, encoding: BufferEncoding): this;\n  override end(\n    chunk: Buffer,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<GridFSFile | void>\n  ): this;\n  override end(\n    chunkOrCallback?: Buffer | Callback<GridFSFile | void>,\n    encodingOrCallback?: BufferEncoding | Callback<GridFSFile | void>,\n    callback?: Callback<GridFSFile | void>\n  ): this {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback =\n      typeof chunkOrCallback === 'function'\n        ? chunkOrCallback\n        : typeof encodingOrCallback === 'function'\n        ? encodingOrCallback\n        : callback;\n\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\n\n    this.state.streamEnd = true;\n\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, (result: GridFSFile) => {\n        if (callback) callback(undefined, result);\n      });\n    }\n\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return this;\n    }\n\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n\n    return this;\n  }\n}\n\nfunction __handleError(\n  stream: GridFSBucketWriteStream,\n  error: AnyError,\n  callback?: Callback\n): void {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\n\nfunction createChunkDoc(filesId: ObjectId, n: number, data: Buffer): GridFSChunk {\n  return {\n    _id: new ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\n\nasync function checkChunksIndex(stream: GridFSBucketWriteStream): Promise<void> {\n  const index = { files_id: 1, n: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.chunks.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasChunksIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasChunksIndex) {\n    const writeConcernOptions = getWriteOptions(stream);\n    await stream.chunks.createIndex(index, {\n      ...writeConcernOptions,\n      background: true,\n      unique: true\n    });\n  }\n}\n\nfunction checkDone(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(\n      stream.id,\n      stream.length,\n      stream.chunkSizeBytes,\n      stream.filename,\n      stream.options.contentType,\n      stream.options.aliases,\n      stream.options.metadata\n    );\n\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n\n    stream.files.insertOne(filesDoc, getWriteOptions(stream)).then(\n      () => {\n        stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n        stream.emit(GridFSBucketWriteStream.CLOSE);\n      },\n      error => {\n        return __handleError(stream, error, callback);\n      }\n    );\n\n    return true;\n  }\n\n  return false;\n}\n\nasync function checkIndexes(stream: GridFSBucketWriteStream): Promise<void> {\n  const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n  if (doc != null) {\n    // If at least one document exists assume the collection has the required index\n    return;\n  }\n\n  const index = { filename: 1, uploadDate: 1 };\n\n  let indexes;\n  try {\n    indexes = await stream.files.listIndexes().toArray();\n  } catch (error) {\n    if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n      indexes = [];\n    } else {\n      throw error;\n    }\n  }\n\n  const hasFileIndex = !!indexes.find(index => {\n    const keys = Object.keys(index.key);\n    if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n      return true;\n    }\n    return false;\n  });\n\n  if (!hasFileIndex) {\n    await stream.files.createIndex(index, { background: false });\n  }\n\n  await checkChunksIndex(stream);\n}\n\nfunction createFilesDoc(\n  _id: ObjectId,\n  length: number,\n  chunkSize: number,\n  filename: string,\n  contentType?: string,\n  aliases?: string[],\n  metadata?: Document\n): GridFSFile {\n  const ret: GridFSFile = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\nfunction doWrite(\n  stream: GridFSBucketWriteStream,\n  chunk: Buffer | string,\n  encoding?: BufferEncoding,\n  callback?: Callback<void>\n): boolean {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  stream.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining: number = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc: GridFSChunk;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n\n      stream.chunks.insertOne(doc, getWriteOptions(stream)).then(\n        () => {\n          --stream.state.outstandingRequests;\n          --outstandingRequests;\n\n          if (!outstandingRequests) {\n            stream.emit('drain', doc);\n            callback && callback();\n            checkDone(stream);\n          }\n        },\n        error => {\n          return __handleError(stream, error);\n        }\n      );\n\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\nfunction getWriteOptions(stream: GridFSBucketWriteStream): WriteConcernOptions {\n  const obj: WriteConcernOptions = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\n\nfunction waitForIndexes(\n  stream: GridFSBucketWriteStream,\n  callback: (res: boolean) => boolean\n): boolean {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n\n  return true;\n}\n\nfunction writeRemnant(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n\n  ++stream.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  stream.chunks.insertOne(doc, getWriteOptions(stream)).then(\n    () => {\n      --stream.state.outstandingRequests;\n      checkDone(stream);\n    },\n    error => {\n      return __handleError(stream, error);\n    }\n  );\n  return true;\n}\n\nfunction checkAborted(stream: GridFSBucketWriteStream, callback?: Callback<void>): boolean {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}