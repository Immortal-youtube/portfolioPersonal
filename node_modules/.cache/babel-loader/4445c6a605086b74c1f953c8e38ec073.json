{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SeverityLevel = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst utils_1 = require(\"./utils\");\n/** @internal */\n\n\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\n\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\n\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n\n  return null;\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively.\n *\n * @returns the Writable stream to write logs to\n */\n\n\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n\n  const isValidLogDestinationString = destination => ['stdout', 'stderr'].includes(destination.toLowerCase());\n\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  } // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n\n\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof stream_1.Writable) {\n    return mongodbLogPath;\n  }\n\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n\n  return process.stderr;\n}\n/** @internal */\n\n\nclass MongoLogger {\n  constructor(options) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  /* eslint-disable @typescript-eslint/no-empty-function */\n\n\n  emergency(component, message) {}\n\n  alert(component, message) {}\n\n  critical(component, message) {}\n\n  error(component, message) {}\n\n  warn(component, message) {}\n\n  notice(component, message) {}\n\n  info(component, message) {}\n\n  debug(component, message) {}\n\n  trace(component, message) {}\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n\n\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const combinedOptions = { ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? exports.SeverityLevel.OFF;\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection: parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection: parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength: (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n\n}\n\nexports.MongoLogger = MongoLogger;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;AAEA;;;AACaA,wBAAgBC,MAAM,CAACC,MAAP,CAAc;EACzCC,SAAS,EAAE,WAD8B;EAEzCC,KAAK,EAAE,OAFkC;EAGzCC,QAAQ,EAAE,UAH+B;EAIzCC,KAAK,EAAE,OAJkC;EAKzCC,OAAO,EAAE,MALgC;EAMzCC,MAAM,EAAE,QANiC;EAOzCC,aAAa,EAAE,MAP0B;EAQzCC,KAAK,EAAE,OARkC;EASzCC,KAAK,EAAE,OATkC;EAUzCC,GAAG,EAAE;AAVoC,CAAd,CAAhB;AAgBb;;AACaZ,iCAAyBC,MAAM,CAACC,MAAP,CAAc;EAClDW,OAAO,EAAE,SADyC;EAElDC,QAAQ,EAAE,UAFwC;EAGlDC,gBAAgB,EAAE,iBAHgC;EAIlDC,UAAU,EAAE;AAJsC,CAAd,CAAzB;AAwDb;;;;;;;AAMA,SAASC,uBAAT,CAAiCC,CAAjC,EAA2C;EACzC,MAAMC,eAAe,GAAalB,MAAM,CAACmB,MAAP,CAAcpB,qBAAd,CAAlC;EACA,MAAMqB,aAAa,GAAGH,CAAC,EAAEI,WAAH,EAAtB;;EAEA,IAAID,aAAa,IAAI,IAAjB,IAAyBF,eAAe,CAACI,QAAhB,CAAyBF,aAAzB,CAA7B,EAAsE;IACpE,OAAOA,aAAP;EACD;;EAED,OAAO,IAAP;AACD;AAED;;;;;;;;AAMA,SAASG,cAAT,cAMG;EAAA,IALD;IAAEC;EAAF,CAKC;EAAA,IAJD;IACEC;EADF,CAIC;;EAED,MAAMC,2BAA2B,GAAIC,WAAD,IAClC,CAAC,QAAD,EAAW,QAAX,EAAqBL,QAArB,CAA8BK,WAAW,CAACN,WAAZ,EAA9B,CADF;;EAEA,IAAI,OAAOI,cAAP,KAA0B,QAA1B,IAAsCC,2BAA2B,CAACD,cAAD,CAArE,EAAuF;IACrF,OAAOA,cAAc,CAACJ,WAAf,OAAiC,QAAjC,GAA4CO,OAAO,CAACC,MAApD,GAA6DD,OAAO,CAACE,MAA5E;EACD,CANA,CAQD;;;EACA,IAAI,OAAOL,cAAP,KAA0B,QAA1B,IAAsCA,cAAc,YAAYM,iBAApE,EAA8E;IAC5E,OAAON,cAAP;EACD;;EAED,IAAI,OAAOD,gBAAP,KAA4B,QAA5B,IAAwCE,2BAA2B,CAACF,gBAAD,CAAvE,EAA2F;IACzF,OAAOA,gBAAgB,CAACH,WAAjB,OAAmC,QAAnC,GAA8CO,OAAO,CAACC,MAAtD,GAA+DD,OAAO,CAACE,MAA9E;EACD;;EAED,OAAOF,OAAO,CAACC,MAAf;AACD;AAED;;;AACA,MAAaG,WAAb,CAAwB;EAKtBC,YAAYC,OAAZ,EAAuC;IACrC,KAAKC,mBAAL,GAA2BD,OAAO,CAACC,mBAAnC;IACA,KAAKC,iBAAL,GAAyBF,OAAO,CAACE,iBAAjC;IACA,KAAKC,cAAL,GAAsBH,OAAO,CAACG,cAA9B;EACD;EAED;;EACA;;;EACAC,SAAS,CAACC,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAEhDC,KAAK,CAACF,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE5CE,QAAQ,CAACH,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE/CG,KAAK,CAACJ,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE5CI,IAAI,CAACL,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE3CK,MAAM,CAACN,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE7CM,IAAI,CAACP,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE3CO,KAAK,CAACR,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;;EAE5CQ,KAAK,CAACT,SAAD,EAAiBC,OAAjB,EAA6B,CAAU;EAE5C;;;;;;;;;;;;;;;EAaqB,OAAdS,cAAc,CACnBC,UADmB,EAEnBC,aAFmB,EAEyB;IAE5C;IACA,MAAMC,eAAe,GAAG,EACtB,GAAGF,UADmB;MAEtB,GAAGC,aAFmB;MAGtB1B,cAAc,EAAEF,cAAc,CAAC2B,UAAD,EAAaC,aAAb;IAHR,CAAxB;IAKA,MAAME,eAAe,GACnBrC,uBAAuB,CAACoC,eAAe,CAACE,eAAjB,CAAvB,IAA4DvD,sBAAcY,GAD5E;IAGA,OAAO;MACLwB,mBAAmB,EAAE;QACnBoB,OAAO,EAAEvC,uBAAuB,CAACoC,eAAe,CAACI,mBAAjB,CAAvB,IAAgEH,eADtD;QAEnBI,QAAQ,EAAEzC,uBAAuB,CAACoC,eAAe,CAACM,oBAAjB,CAAvB,IAAiEL,eAFxD;QAGnBM,eAAe,EACb3C,uBAAuB,CAACoC,eAAe,CAACQ,4BAAjB,CAAvB,IAAyEP,eAJxD;QAKnBQ,UAAU,EACR7C,uBAAuB,CAACoC,eAAe,CAACU,sBAAjB,CAAvB,IAAmET,eANlD;QAOnBU,OAAO,EAAEV;MAPU,CADhB;MAULjB,iBAAiB,EACf,kCAAqBgB,eAAe,CAACY,+BAArC,KAAyE,IAXtE;MAYL3B,cAAc,EAAEe,eAAe,CAAC3B;IAZ3B,CAAP;EAcD;;AAvEqB;;AAAxB1B","names":["exports","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","isValidLogDestinationString","destination","process","stderr","stdout","stream_1","MongoLogger","constructor","options","componentSeverities","maxDocumentLength","logDestination","emergency","component","message","alert","critical","error","warn","notice","info","debug","trace","resolveOptions","envOptions","clientOptions","combinedOptions","defaultSeverity","MONGODB_LOG_ALL","command","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","default","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { Writable } from 'stream';\n\nimport { parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport type SeverityLevel = typeof SeverityLevel[keyof typeof SeverityLevel];\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  typeof MongoLoggableComponent[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | Writable;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: Writable;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively.\n *\n * @returns the Writable stream to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  {\n    mongodbLogPath\n  }: {\n    mongodbLogPath?: unknown;\n  }\n): Writable {\n  const isValidLogDestinationString = (destination: string) =>\n    ['stdout', 'stderr'].includes(destination.toLowerCase());\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof Writable) {\n    return mongodbLogPath;\n  }\n\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n\n  return process.stderr;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: Writable;\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  emergency(component: any, message: any): void {}\n\n  alert(component: any, message: any): void {}\n\n  critical(component: any, message: any): void {}\n\n  error(component: any, message: any): void {}\n\n  warn(component: any, message: any): void {}\n\n  notice(component: any, message: any): void {}\n\n  info(component: any, message: any): void {}\n\n  debug(component: any, message: any): void {}\n\n  trace(component: any, message: any): void {}\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity =\n      parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? SeverityLevel.OFF;\n\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script"}