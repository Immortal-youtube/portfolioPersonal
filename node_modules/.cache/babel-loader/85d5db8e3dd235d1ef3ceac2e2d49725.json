{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\n\nconst error_1 = require(\"../../error\");\n\nconst gssapi_1 = require(\"./gssapi\");\n\nconst providers_1 = require(\"./providers\"); // https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\n\n\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    } // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n\n\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  } // Default for wireprotocol < 3\n\n\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\n\n\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = { ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n\n\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n\n\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate() {\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      } // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n\n\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(creds, options) {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n\n}\n\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA,2C,CAEA;;;AACA,SAASA,uBAAT,CAAiCC,KAAjC,EAAiD;EAC/C,IAAIA,KAAJ,EAAW;IACT;IACA;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAK,CAACG,kBAApB,CAAJ,EAA6C;MAC3C,OAAOH,KAAK,CAACG,kBAAN,CAAyBC,QAAzB,CAAkCC,0BAAcC,oBAAhD,IACHD,0BAAcC,oBADX,GAEHD,0BAAcE,kBAFlB;IAGD,CAPQ,CAST;;;IACA,IAAIP,KAAK,CAACQ,cAAN,IAAwB,CAA5B,EAA+B;MAC7B,OAAOH,0BAAcE,kBAArB;IACD;EACF,CAd8C,CAgB/C;;;EACA,OAAOF,0BAAcI,UAArB;AACD;AAqBD;;;;;;AAIA,MAAaC,gBAAb,CAA6B;EAY3BC,YAAYC,OAAZ,EAA4C;IAC1C,KAAKC,QAAL,GAAgBD,OAAO,CAACC,QAAxB;IACA,KAAKC,QAAL,GAAgBF,OAAO,CAACE,QAAxB;IACA,KAAKC,MAAL,GAAcH,OAAO,CAACG,MAAtB;;IACA,IAAI,CAAC,KAAKA,MAAN,IAAgBH,OAAO,CAACI,EAA5B,EAAgC;MAC9B,KAAKD,MAAL,GAAcH,OAAO,CAACI,EAAtB;IACD;;IACD,KAAKC,SAAL,GAAiBL,OAAO,CAACK,SAAR,IAAqBZ,0BAAca,eAApD;IACA,KAAKC,mBAAL,GAA2BP,OAAO,CAACO,mBAAR,IAA+B,EAA1D;;IAEA,IAAI,KAAKF,SAAL,CAAeG,KAAf,CAAqB,cAArB,CAAJ,EAA0C;MACxC,IAAI,CAAC,KAAKP,QAAN,IAAkBQ,OAAO,CAACC,GAAR,CAAYC,iBAAlC,EAAqD;QACnD,KAAKV,QAAL,GAAgBQ,OAAO,CAACC,GAAR,CAAYC,iBAA5B;MACD;;MAED,IAAI,CAAC,KAAKT,QAAN,IAAkBO,OAAO,CAACC,GAAR,CAAYE,qBAAlC,EAAyD;QACvD,KAAKV,QAAL,GAAgBO,OAAO,CAACC,GAAR,CAAYE,qBAA5B;MACD;;MAED,IACE,KAAKL,mBAAL,CAAyBM,iBAAzB,IAA8C,IAA9C,IACAJ,OAAO,CAACC,GAAR,CAAYG,iBAAZ,IAAiC,IAFnC,EAGE;QACA,KAAKN,mBAAL,GAA2B,EACzB,GAAG,KAAKA,mBADiB;UAEzBM,iBAAiB,EAAEJ,OAAO,CAACC,GAAR,CAAYG;QAFN,CAA3B;MAID;IACF;;IAEDC,MAAM,CAACC,MAAP,CAAc,KAAKR,mBAAnB;IACAO,MAAM,CAACC,MAAP,CAAc,IAAd;EACD;EAED;;;EACAC,MAAM,CAACC,KAAD,EAAwB;IAC5B,OACE,KAAKZ,SAAL,KAAmBY,KAAK,CAACZ,SAAzB,IACA,KAAKJ,QAAL,KAAkBgB,KAAK,CAAChB,QADxB,IAEA,KAAKC,QAAL,KAAkBe,KAAK,CAACf,QAFxB,IAGA,KAAKC,MAAL,KAAgBc,KAAK,CAACd,MAJxB;EAMD;EAED;;;;;;;;EAMAe,oBAAoB,CAAC9B,KAAD,EAAiB;IACnC;IACA,IAAI,KAAKiB,SAAL,CAAeG,KAAf,CAAqB,UAArB,CAAJ,EAAsC;MACpC,OAAO,IAAIV,gBAAJ,CAAqB;QAC1BG,QAAQ,EAAE,KAAKA,QADW;QAE1BC,QAAQ,EAAE,KAAKA,QAFW;QAG1BC,MAAM,EAAE,KAAKA,MAHa;QAI1BE,SAAS,EAAElB,uBAAuB,CAACC,KAAD,CAJR;QAK1BmB,mBAAmB,EAAE,KAAKA;MALA,CAArB,CAAP;IAOD;;IAED,OAAO,IAAP;EACD;;EAEDY,QAAQ;IACN,IACE,CAAC,KAAKd,SAAL,KAAmBZ,0BAAc2B,cAAjC,IACC,KAAKf,SAAL,KAAmBZ,0BAAcI,UADlC,IAEC,KAAKQ,SAAL,KAAmBZ,0BAAc4B,aAFlC,IAGC,KAAKhB,SAAL,KAAmBZ,0BAAcE,kBAHlC,IAIC,KAAKU,SAAL,KAAmBZ,0BAAcC,oBAJnC,KAKA,CAAC,KAAKO,QANR,EAOE;MACA,MAAM,IAAIqB,oCAAJ,CAAiC,oCAAoC,KAAKjB,SAAS,GAAnF,CAAN;IACD;;IAED,IAAIZ,yCAA6B8B,GAA7B,CAAiC,KAAKlB,SAAtC,CAAJ,EAAsD;MACpD,IAAI,KAAKF,MAAL,IAAe,IAAf,IAAuB,KAAKA,MAAL,KAAgB,WAA3C,EAAwD;QACtD;QACA,MAAM,IAAImB,qBAAJ,CACJ,mBAAmB,KAAKnB,MAAM,oBAAoB,KAAKE,SAAS,cAD5D,CAAN;MAGD;IACF;;IAED,IAAI,KAAKA,SAAL,KAAmBZ,0BAAc4B,aAAjC,IAAkD,KAAKlB,MAAL,IAAe,IAArE,EAA2E;MACzE;MACA,MAAM,IAAImB,qBAAJ,CAAkB,qDAAlB,CAAN;IACD;;IAED,IAAI,KAAKjB,SAAL,KAAmBZ,0BAAc+B,YAAjC,IAAiD,KAAKtB,QAAL,IAAiB,IAAtE,EAA4E;MAC1E,IAAI,KAAKA,QAAL,KAAkB,EAAtB,EAA0B;QACxBuB,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkB,UAAlB,EAA8BC,SAA9B;QACA;MACD,CAJyE,CAK1E;;;MACA,MAAM,IAAIL,qBAAJ,CAAkB,iDAAlB,CAAN;IACD;;IAED,MAAMM,gBAAgB,GAAG,KAAKrB,mBAAL,CAAyBsB,sBAAzB,IAAmD,KAA5E;;IACA,IAAI,CAACf,MAAM,CAACgB,MAAP,CAAcC,oCAAd,EAA2CvC,QAA3C,CAAoDoC,gBAApD,CAAL,EAA4E;MAC1E,MAAM,IAAIN,qBAAJ,CAAkB,yCAAyCM,gBAAgB,EAA3E,CAAN;IACD;EACF;;EAEW,OAALI,KAAK,CACVC,KADU,EAEVjC,OAFU,EAE+B;IAEzC,OAAO,IAAIF,gBAAJ,CAAqB;MAC1BG,QAAQ,EAAED,OAAO,CAACC,QAAR,IAAoBgC,KAAK,EAAEhC,QAA3B,IAAuC,EADvB;MAE1BC,QAAQ,EAAEF,OAAO,CAACE,QAAR,IAAoB+B,KAAK,EAAE/B,QAA3B,IAAuC,EAFvB;MAG1BG,SAAS,EAAEL,OAAO,CAACK,SAAR,IAAqB4B,KAAK,EAAE5B,SAA5B,IAAyCZ,0BAAca,eAHxC;MAI1BC,mBAAmB,EAAEP,OAAO,CAACO,mBAAR,IAA+B0B,KAAK,EAAE1B,mBAAtC,IAA6D,EAJxD;MAK1BJ,MAAM,EAAEH,OAAO,CAACG,MAAR,IAAkBH,OAAO,CAACI,EAA1B,IAAgC6B,KAAK,EAAE9B,MAAvC,IAAiD;IAL/B,CAArB,CAAP;EAOD;;AAjI0B;;AAA7B+B","names":["getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","providers_1","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","MongoCredentials","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","Object","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","error_1","has","MONGODB_X509","Reflect","set","undefined","canonicalization","CANONICALIZE_HOST_NAME","values","gssapi_1","merge","creds","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\auth\\mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\nimport type { Document } from '../../bson';\nimport { MongoAPIError, MongoMissingCredentialsError } from '../../error';\nimport { GSSAPICanonicalizationValue } from './gssapi';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\n\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello?: Document): AuthMechanism {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n\n  // Default for wireprotocol < 3\n  return AuthMechanism.MONGODB_CR;\n}\n\n/** @public */\nexport interface AuthMechanismProperties extends Document {\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  AWS_SESSION_TOKEN?: string;\n}\n\n/** @public */\nexport interface MongoCredentialsOptions {\n  username: string;\n  password: string;\n  source: string;\n  db?: string;\n  mechanism?: AuthMechanism;\n  mechanismProperties: AuthMechanismProperties;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport class MongoCredentials {\n  /** The username used for authentication */\n  readonly username: string;\n  /** The password used for authentication */\n  readonly password: string;\n  /** The database that the user should authenticate against */\n  readonly source: string;\n  /** The method used to authenticate */\n  readonly mechanism: AuthMechanism;\n  /** Special properties used by some types of auth mechanisms */\n  readonly mechanismProperties: AuthMechanismProperties;\n\n  constructor(options: MongoCredentialsOptions) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n\n      if (\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n        process.env.AWS_SESSION_TOKEN != null\n      ) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other: MongoCredentials): boolean {\n    return (\n      this.mechanism === other.mechanism &&\n      this.username === other.username &&\n      this.password === other.password &&\n      this.source === other.source\n    );\n  }\n\n  /**\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\n   * based on the server version and server supported sasl mechanisms.\n   *\n   * @param hello - A hello response from the server\n   */\n  resolveAuthMechanism(hello?: Document): MongoCredentials {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n\n    return this;\n  }\n\n  validate(): void {\n    if (\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        this.mechanism === AuthMechanism.MONGODB_CR ||\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\n      !this.username\n    ) {\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new MongoAPIError(\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\n        );\n      }\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n\n  static merge(\n    creds: MongoCredentials | undefined,\n    options: Partial<MongoCredentialsOptions>\n  ): MongoCredentials {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}