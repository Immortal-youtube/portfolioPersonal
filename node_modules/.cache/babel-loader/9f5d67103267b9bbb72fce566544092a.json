{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar isEmptyData_1 = require(\"./isEmptyData\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.secret = secret;\n    this.reset();\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.finish();\n      });\n    });\n  };\n\n  Sha256.prototype.reset = function () {\n    if (this.secret) {\n      this.operation = getKeyPromise(this.secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":"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","names":["secret","reset","Sha256","toHash","operation","then","onerror","_this","Promise","reject","Error","process","toArrayBufferView","catch","resolve","oncomplete","result","Uint8Array","finish","getKeyPromise","msCrypto","subtle","sign","constants_1","keyData","digest","exports","keyOperation","importKey","data","ArrayBuffer","isView","buffer","byteOffset","byteLength","BYTES_PER_ELEMENT"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\@aws-crypto\\sha256-browser\\src\\ie11Sha256.ts"],"sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Checksum {\n  private readonly secret?: SourceData;\n  private operation!: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.reset();\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n\n  reset(): void {\n    if (this.secret) {\n      this.operation = getKeyPromise(this.secret).then(keyData =>\n          (locateWindow() as MsWindow).msCrypto.subtle.sign(\n              SHA_256_HMAC_ALGO,\n              keyData\n          )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n          (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}