{"ast":null,"code":"\"use strict\";\n\nconst urlencoded = require(\"./urlencoded\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(globalObject, constructorArgs, _ref) {\n    let {\n      doNotStripQMark = false\n    } = _ref;\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n        }\n\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let query = urlencoded.serializeUrlencoded(this._list);\n\n      if (query === \"\") {\n        query = null;\n      }\n\n      this._url._url.query = query;\n    }\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n\n    this._updateSteps();\n  }\n\n  delete(name) {\n    let i = 0;\n\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n\n    return output;\n  }\n\n  has(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    if (!found) {\n      this._list.push([name, value]);\n    }\n\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list.sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n\n      if (a[0] > b[0]) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n\n};","map":{"version":3,"names":["urlencoded","require","exports","implementation","URLSearchParamsImpl","constructor","globalObject","constructorArgs","doNotStripQMark","init","_list","_url","slice","Array","isArray","pair","length","TypeError","push","Object","getPrototypeOf","name","keys","value","parseUrlencodedString","_updateSteps","query","serializeUrlencoded","append","delete","i","splice","get","tuple","getAll","output","has","set","found","sort","a","b","Symbol","iterator","toString"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/mongodb-connection-string-url/node_modules/whatwg-url/lib/URLSearchParams-impl.js"],"sourcesContent":["\"use strict\";\nconst urlencoded = require(\"./urlencoded\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" +\n                              \"contain exactly two elements.\");\n        }\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let query = urlencoded.serializeUrlencoded(this._list);\n      if (query === \"\") {\n        query = null;\n      }\n      this._url._url.query = query;\n    }\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n    this._updateSteps();\n  }\n\n  delete(name) {\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n    return output;\n  }\n\n  has(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n    if (!found) {\n      this._list.push([name, value]);\n    }\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list.sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}