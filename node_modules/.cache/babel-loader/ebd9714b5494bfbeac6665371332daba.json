{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = void 0;\n\nconst timers_1 = require(\"timers\");\n\nconst bson_1 = require(\"../bson\");\n\nconst connect_1 = require(\"../cmap/connect\");\n\nconst connection_1 = require(\"../cmap/connection\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n/** @internal */\n\n\nconst kServer = Symbol('server');\n/** @internal */\n\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\n\nconst kConnection = Symbol('connection');\n/** @internal */\n\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\n\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\n\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\n\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\n\n\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  get connection() {\n    return this[kConnection];\n  }\n\n  constructor(server, options) {\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n    const cancellationToken = this[kCancellationToken]; // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options, // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    }); // ensure no authentication is used for monitoring\n\n    delete connectOptions.credentials;\n\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    } // start\n\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // restart monitor\n\n    stateTransition(this, STATE_IDLE); // restart monitoring\n\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this); // close monitor\n\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n\n}\n\nexports.Monitor = Monitor;\n\nfunction resetMonitorState(monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  monitor[kConnection]?.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    monitor[kConnection]?.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(err) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello)); // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  } // connecting does an implicit `hello`\n\n\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor) {\n  return callback => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n\n    stateTransition(monitor, STATE_MONITORING);\n\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      } // if the check indicates streaming is supported, immediately reschedule monitoring\n\n\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\n\n\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n\n  close() {\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    this[kConnection]?.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n\n}\n\nexports.RTTPinger = RTTPinger;\n\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn?.destroy({\n        force: true\n      });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n\n  const connection = rttPinger[kConnection];\n\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [constants_1.LEGACY_HELLO_COMMAND]: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n/**\n * @internal\n */\n\n\nclass MonitorInterval {\n  constructor(fn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n\n    this._executeAndReschedule = () => {\n      if (this.stopped) return;\n\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n\n      this.isExpeditedCallToFnScheduled = false;\n      this.isExecutionInProgress = true;\n      this.fn(() => {\n        this.lastExecutionEnded = (0, utils_1.now)();\n        this.isExecutionInProgress = false;\n\n        this._reschedule(this.heartbeatFrequencyMS);\n      });\n    };\n\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded; // TODO(NODE-4674): Add error handling and logging to the monitor\n\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    } // debounce multiple calls to wake within the `minInterval`\n\n\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    } // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n\n\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  _reschedule(ms) {\n    if (this.stopped) return;\n\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n    }\n\n    this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n}\n\nexports.MonitorInterval = MonitorInterval;","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","common_1","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","mongo_types_1","connection","constructor","server","options","undefined","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","connection_1","hostAddress","raw","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","MonitorInterval","monitorServer","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","exports","stop","destroy","force","checkServer","callback","start","server_1","SERVER_HEARTBEAT_STARTED","events_1","failureHandler","err","SERVER_HEARTBEAT_FAILED","error","error_1","addErrorLabel","ResetPool","InterruptInUseConnections","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","constants_1","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","conn","isMonitoringConnection","process","nextTick","done","type","Unknown","tv","processId","counter","bson_1","isLong","fromNumber","measureRoundTripTime","measureAndReschedule","fn","stopped","timerId","isExpeditedCallToFnScheduled","isExecutionInProgress","lastExecutionEnded","_reschedule","_executeAndReschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sdam\\monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback } from '../utils';\nimport { calculateDurationInMs, EventEmitterWithState, makeStateMachine, now, ns } from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.s.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    const error = !(err instanceof MongoError) ? new MongoError(err) : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"script"}