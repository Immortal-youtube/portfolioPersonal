{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindCursor = exports.FLAGS = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst count_1 = require(\"../operations/count\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst find_1 = require(\"../operations/find\");\n\nconst sort_1 = require(\"../sort\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kFilter = Symbol('filter');\n/** @internal */\n\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\n\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\n\nexports.FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\n\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n    }\n  }\n\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      } // TODO: NODE-2882\n\n\n      callback(undefined, {\n        server: findOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** @internal */\n\n\n  _getMore(batchSize, callback) {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize = limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err); // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n\n\n  async count(options) {\n    (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n\n    if (typeof options === 'boolean') {\n      throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n\n    return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      ...options\n    }));\n  }\n  /** Execute the explain for the cursor */\n\n\n  async explain(verbosity) {\n    return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], { ...this[kBuiltOptions],\n      ...this.cursorOptions,\n      explain: verbosity ?? true\n    }));\n  }\n  /** Set the cursor query */\n\n\n  filter(filter) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kFilter] = filter;\n    return this;\n  }\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n\n\n  hint(hint) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n\n\n  min(min) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n\n\n  max(max) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n\n\n  returnKey(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n\n\n  showRecordId(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n\n\n  addQueryModifier(name, value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (name[0] !== '$') {\n      throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    } // Strip of the $\n\n\n    const field = name.substr(1); // NOTE: consider some TS magic for this\n\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n        break;\n\n      case 'query':\n        this[kFilter] = value;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value;\n        break;\n\n      default:\n        throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n\n\n  comment(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n\n\n  maxAwaitTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n\n\n  maxTimeMS(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].projection = value;\n    return this;\n  }\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n\n\n  sort(sort, direction) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n    return this;\n  }\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n\n\n  allowDiskUse() {\n    let allow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    } // As of 6.0 the default is true. This allows users to get back to the old behavior.\n\n\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n\n\n  collation(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n\n\n  limit(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n\n\n  skip(value) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n\n    if (this[kBuiltOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n\n}\n\nexports.FindCursor = FindCursor;","map":{"version":3,"mappings":"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","names":["kFilter","Symbol","kNumReturned","kBuiltOptions","exports","FindCursor","abstract_cursor_1","constructor","client","namespace","filter","options","sort","clone","clonedOptions","session","map","transform","_initialize","callback","findOperation","find_1","undefined","cursorOptions","err","response","cursor","firstBatch","length","documents","server","_getMore","batchSize","numReturned","limit","close","finally","nextBatch","count","error_1","count_1","explain","verbosity","hint","min","max","returnKey","value","showRecordId","addQueryModifier","name","field","substr","comment","maxTimeMS","maxAwaitTimeMS","project","projection","direction","tailable","allowDiskUse","allow","collation","skip"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cursor\\find_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { MongoInvalidArgumentError, MongoTailableCursorError } from '../error';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport type { CollationOptions } from '../operations/command';\nimport { CountOperation, CountOptions } from '../operations/count';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport { FindOperation, FindOptions } from '../operations/find';\nimport type { Hint } from '../operations/operation';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, Sort, SortDirection } from '../sort';\nimport { Callback, emitWarningOnce, mergeOptions, MongoDBNamespace } from '../utils';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n\n/** @public Flags allowed for cursor */\nexport const FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public */\nexport class FindCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kFilter]: Document;\n  /** @internal */\n  [kNumReturned]?: number;\n  /** @internal */\n  [kBuiltOptions]: FindOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    filter: Document = {},\n    options: FindOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kFilter] = filter;\n    this[kBuiltOptions] = options;\n\n    if (options.sort != null) {\n      this[kBuiltOptions].sort = formatSort(options.sort);\n    }\n  }\n\n  clone(): FindCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kBuiltOptions]);\n    delete clonedOptions.session;\n    return new FindCursor(this.client, this.namespace, this[kFilter], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): FindCursor<T> {\n    return super.map(transform) as FindCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const findOperation = new FindOperation(undefined, this.namespace, this[kFilter], {\n      ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.client, findOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: We only need this for legacy queries that do not support `limit`, maybe\n      //       the value should only be saved in those cases.\n      if (response.cursor) {\n        this[kNumReturned] = response.cursor.firstBatch.length;\n      } else {\n        this[kNumReturned] = response.documents ? response.documents.length : 0;\n      }\n\n      // TODO: NODE-2882\n      callback(undefined, { server: findOperation.server, session, response });\n    });\n  }\n\n  /** @internal */\n  override _getMore(batchSize: number, callback: Callback<Document>): void {\n    // NOTE: this is to support client provided limits in pre-command servers\n    const numReturned = this[kNumReturned];\n    if (numReturned) {\n      const limit = this[kBuiltOptions].limit;\n      batchSize =\n        limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n\n      if (batchSize <= 0) {\n        this.close().finally(() => callback());\n        return;\n      }\n    }\n\n    super._getMore(batchSize, (err, response) => {\n      if (err) return callback(err);\n\n      // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n      if (response) {\n        this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n      }\n\n      callback(undefined, response);\n    });\n  }\n\n  /**\n   * Get the count of documents for this cursor\n   * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n   */\n  async count(options?: CountOptions): Promise<number> {\n    emitWarningOnce(\n      'cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead '\n    );\n    if (typeof options === 'boolean') {\n      throw new MongoInvalidArgumentError('Invalid first parameter to count');\n    }\n    return executeOperation(\n      this.client,\n      new CountOperation(this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        ...options\n      })\n    );\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new FindOperation(undefined, this.namespace, this[kFilter], {\n        ...this[kBuiltOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Set the cursor query */\n  filter(filter: Document): this {\n    assertUninitialized(this);\n    this[kFilter] = filter;\n    return this;\n  }\n\n  /**\n   * Set the cursor hint\n   *\n   * @param hint - If specified, then the query system will only consider plans using the hinted index.\n   */\n  hint(hint: Hint): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].hint = hint;\n    return this;\n  }\n\n  /**\n   * Set the cursor min\n   *\n   * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n   */\n  min(min: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].min = min;\n    return this;\n  }\n\n  /**\n   * Set the cursor max\n   *\n   * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n   */\n  max(max: Document): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].max = max;\n    return this;\n  }\n\n  /**\n   * Set the cursor returnKey.\n   * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n   * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n   *\n   * @param value - the returnKey value.\n   */\n  returnKey(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].returnKey = value;\n    return this;\n  }\n\n  /**\n   * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n   *\n   * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n   */\n  showRecordId(value: boolean): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].showRecordId = value;\n    return this;\n  }\n\n  /**\n   * Add a query modifier to the cursor query\n   *\n   * @param name - The query modifier (must start with $, such as $orderby etc)\n   * @param value - The modifier value.\n   */\n  addQueryModifier(name: string, value: string | boolean | number | Document): this {\n    assertUninitialized(this);\n    if (name[0] !== '$') {\n      throw new MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n    }\n\n    // Strip of the $\n    const field = name.substr(1);\n\n    // NOTE: consider some TS magic for this\n    switch (field) {\n      case 'comment':\n        this[kBuiltOptions].comment = value as string | Document;\n        break;\n\n      case 'explain':\n        this[kBuiltOptions].explain = value as boolean;\n        break;\n\n      case 'hint':\n        this[kBuiltOptions].hint = value as string | Document;\n        break;\n\n      case 'max':\n        this[kBuiltOptions].max = value as Document;\n        break;\n\n      case 'maxTimeMS':\n        this[kBuiltOptions].maxTimeMS = value as number;\n        break;\n\n      case 'min':\n        this[kBuiltOptions].min = value as Document;\n        break;\n\n      case 'orderby':\n        this[kBuiltOptions].sort = formatSort(value as string | Document);\n        break;\n\n      case 'query':\n        this[kFilter] = value as Document;\n        break;\n\n      case 'returnKey':\n        this[kBuiltOptions].returnKey = value as boolean;\n        break;\n\n      case 'showDiskLoc':\n        this[kBuiltOptions].showRecordId = value as boolean;\n        break;\n\n      default:\n        throw new MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a comment to the cursor query allowing for tracking the comment in the log.\n   *\n   * @param value - The comment attached to this query.\n   */\n  comment(value: string): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].comment = value;\n    return this;\n  }\n\n  /**\n   * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n   *\n   * @param value - Number of milliseconds to wait before aborting the tailed query.\n   */\n  maxAwaitTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxAwaitTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  override maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kBuiltOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic\n   * {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.find().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>(value: Document): FindCursor<T> {\n    assertUninitialized(this);\n    this[kBuiltOptions].projection = value;\n    return this as unknown as FindCursor<T>;\n  }\n\n  /**\n   * Sets the sort order of the cursor query.\n   *\n   * @param sort - The key or keys set for the sort.\n   * @param direction - The direction of the sorting (1 or -1).\n   */\n  sort(sort: Sort | string, direction?: SortDirection): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support sorting');\n    }\n\n    this[kBuiltOptions].sort = formatSort(sort, direction);\n    return this;\n  }\n\n  /**\n   * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n   *\n   * @remarks\n   * {@link https://docs.mongodb.com/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n   */\n  allowDiskUse(allow = true): this {\n    assertUninitialized(this);\n\n    if (!this[kBuiltOptions].sort) {\n      throw new MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n    }\n\n    // As of 6.0 the default is true. This allows users to get back to the old behavior.\n    if (!allow) {\n      this[kBuiltOptions].allowDiskUse = false;\n      return this;\n    }\n\n    this[kBuiltOptions].allowDiskUse = true;\n    return this;\n  }\n\n  /**\n   * Set the collation options for the cursor.\n   *\n   * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n   */\n  collation(value: CollationOptions): this {\n    assertUninitialized(this);\n    this[kBuiltOptions].collation = value;\n    return this;\n  }\n\n  /**\n   * Set the limit for the cursor.\n   *\n   * @param value - The limit for the cursor query.\n   */\n  limit(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support limit');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n    }\n\n    this[kBuiltOptions].limit = value;\n    return this;\n  }\n\n  /**\n   * Set the skip for the cursor.\n   *\n   * @param value - The skip for the cursor query.\n   */\n  skip(value: number): this {\n    assertUninitialized(this);\n    if (this[kBuiltOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support skip');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n    }\n\n    this[kBuiltOptions].skip = value;\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}