{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass CountOperation extends command_1.CommandOperation {\n  constructor(namespace, filter, options) {\n    super({\n      s: {\n        namespace: namespace\n      }\n    }, options);\n    this.options = options;\n    this.collectionName = namespace.collection;\n    this.query = filter;\n  }\n\n  execute(server, session, callback) {\n    const options = this.options;\n    const cmd = {\n      count: this.collectionName,\n      query: this.query\n    };\n\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n\n    if (options.hint != null) {\n      cmd.hint = options.hint;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      callback(err, result ? result.n : 0);\n    });\n  }\n\n}\n\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"mappings":";;;;;;;AAKA;;AACA;AAcA;;;AACA,MAAaA,cAAb,SAAoCC,0BAApC,CAA4D;EAK1DC,YAAYC,SAAZ,EAAyCC,MAAzC,EAA2DC,OAA3D,EAAgF;IAC9E,MAAM;MAAEC,CAAC,EAAE;QAAEH,SAAS,EAAEA;MAAb;IAAL,CAAN,EAAgEE,OAAhE;IAEA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKE,cAAL,GAAsBJ,SAAS,CAACK,UAAhC;IACA,KAAKC,KAAL,GAAaL,MAAb;EACD;;EAEQM,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGY;IAE1B,MAAMR,OAAO,GAAG,KAAKA,OAArB;IACA,MAAMS,GAAG,GAAa;MACpBC,KAAK,EAAE,KAAKR,cADQ;MAEpBE,KAAK,EAAE,KAAKA;IAFQ,CAAtB;;IAKA,IAAI,OAAOJ,OAAO,CAACW,KAAf,KAAyB,QAA7B,EAAuC;MACrCF,GAAG,CAACE,KAAJ,GAAYX,OAAO,CAACW,KAApB;IACD;;IAED,IAAI,OAAOX,OAAO,CAACY,IAAf,KAAwB,QAA5B,EAAsC;MACpCH,GAAG,CAACG,IAAJ,GAAWZ,OAAO,CAACY,IAAnB;IACD;;IAED,IAAIZ,OAAO,CAACa,IAAR,IAAgB,IAApB,EAA0B;MACxBJ,GAAG,CAACI,IAAJ,GAAWb,OAAO,CAACa,IAAnB;IACD;;IAED,IAAI,OAAOb,OAAO,CAACc,SAAf,KAA6B,QAAjC,EAA2C;MACzCL,GAAG,CAACK,SAAJ,GAAgBd,OAAO,CAACc,SAAxB;IACD;;IAED,MAAMC,cAAN,CAAqBT,MAArB,EAA6BC,OAA7B,EAAsCE,GAAtC,EAA2C,CAACO,GAAD,EAAMC,MAAN,KAAgB;MACzDT,QAAQ,CAACQ,GAAD,EAAMC,MAAM,GAAGA,MAAM,CAACC,CAAV,GAAc,CAA1B,CAAR;IACD,CAFD;EAGD;;AA3CyD;;AAA5DC;AA8CA,+BAAcxB,cAAd,EAA8B,CAACyB,mBAAOC,cAAR,EAAwBD,mBAAOE,SAA/B,CAA9B","names":["CountOperation","command_1","constructor","namespace","filter","options","s","collectionName","collection","query","execute","server","session","callback","cmd","count","limit","skip","hint","maxTimeMS","executeCommand","err","result","n","exports","operation_1","READ_OPERATION","RETRYABLE"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\count.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface CountOptions extends CommandOperationOptions {\n  /** The number of documents to skip. */\n  skip?: number;\n  /** The maximum amounts to count before aborting. */\n  limit?: number;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** An index name hint for the query. */\n  hint?: string | Document;\n}\n\n/** @internal */\nexport class CountOperation extends CommandOperation<number> {\n  override options: CountOptions;\n  collectionName?: string;\n  query: Document;\n\n  constructor(namespace: MongoDBNamespace, filter: Document, options: CountOptions) {\n    super({ s: { namespace: namespace } } as unknown as Collection, options);\n\n    this.options = options;\n    this.collectionName = namespace.collection;\n    this.query = filter;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<number>\n  ): void {\n    const options = this.options;\n    const cmd: Document = {\n      count: this.collectionName,\n      query: this.query\n    };\n\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n\n    if (options.hint != null) {\n      cmd.hint = options.hint;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      callback(err, result ? result.n : 0);\n    });\n  }\n}\n\ndefineAspects(CountOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"]},"metadata":{},"sourceType":"script"}