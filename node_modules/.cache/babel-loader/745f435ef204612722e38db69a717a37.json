{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nconst error_1 = require(\"../error\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\n\n\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n\n\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n\n\n  start() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n\n\n  end() {\n    let end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n\n\n  async abort() {\n    this.push(null);\n    this.destroyed = true;\n\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n\n}\n\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * An error occurred\n * @event\n */\n\nGridFSBucketReadStream.ERROR = 'error';\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\n\nGridFSBucketReadStream.FILE = 'file';\n/**\n * Emitted when a chunk of data is available to be consumed.\n * @event\n */\n\nGridFSBucketReadStream.DATA = 'data';\n/**\n * Fired when the stream is exhausted (no more data events).\n * @event\n */\n\nGridFSBucketReadStream.END = 'end';\n/**\n * Fired when the stream is exhausted and the underlying cursor is killed\n * @event\n */\n\nGridFSBucketReadStream.CLOSE = 'close';\n\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = _ref => {\n    let {\n      error,\n      doc\n    } = _ref;\n\n    if (stream.destroyed) {\n      return;\n    }\n\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n\n    if (!doc) {\n      stream.push(null);\n      stream.s.cursor?.close().then(() => {\n        stream.emit(GridFSBucketReadStream.CLOSE);\n      }, error => {\n        stream.emit(GridFSBucketReadStream.ERROR, error);\n      });\n      return;\n    }\n\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n      }\n\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\n\nfunction init(stream) {\n  const findOneOptions = {};\n\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = _ref2 => {\n    let {\n      error,\n      doc\n    } = _ref2;\n\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`; // TODO(NODE-3483)\n\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    } // If document is empty, kill the stream immediately and don't\n    // execute any reads\n\n\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter = {\n      files_id: doc._id\n    }; // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\n\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"mappings":"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","names":["GridFSBucketReadStream","stream_1","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","throwIfInitialized","abort","push","cursor","close","emit","CLOSE","exports","stream","error_1","file","handleReadResult","error","doc","ERROR","then","bytesRemaining","length","expectedN","expectedLength","Math","min","chunkSize","n","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","next","findOneOptions","sort","skip","identifier","_id","toString","filename","errmsg","err","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","FILE","findOne","callback","once","limit"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\gridfs\\download.ts"],"sourcesContent":["import { Readable } from 'stream';\n\nimport type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport {\n  MongoGridFSChunkError,\n  MongoGridFSStreamError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError\n} from '../error';\nimport type { FindOptions } from '../operations/find';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport type { Callback } from '../utils';\nimport type { GridFSChunk } from './upload';\n\n/** @public */\nexport interface GridFSBucketReadStreamOptions {\n  sort?: Sort;\n  skip?: number;\n  /**\n   * 0-indexed non-negative byte offset from the beginning of the file\n   */\n  start?: number;\n  /**\n   * 0-indexed non-negative byte offset to the end of the file contents\n   * to be returned by the stream. `end` is non-inclusive\n   */\n  end?: number;\n}\n\n/** @public */\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n  /** The revision number relative to the oldest file with the given filename. 0\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n   * newest. */\n  revision?: number;\n}\n\n/** @public */\nexport interface GridFSFile {\n  _id: ObjectId;\n  length: number;\n  chunkSize: number;\n  filename: string;\n  contentType?: string;\n  aliases?: string[];\n  metadata?: Document;\n  uploadDate: Date;\n}\n\n/** @internal */\nexport interface GridFSBucketReadStreamPrivate {\n  bytesRead: number;\n  bytesToTrim: number;\n  bytesToSkip: number;\n  chunks: Collection<GridFSChunk>;\n  cursor?: FindCursor<GridFSChunk>;\n  expected: number;\n  files: Collection<GridFSFile>;\n  filter: Document;\n  init: boolean;\n  expectedEnd: number;\n  file?: GridFSFile;\n  options: {\n    sort?: Sort;\n    skip?: number;\n    start: number;\n    end: number;\n  };\n  readPreference?: ReadPreference;\n}\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport class GridFSBucketReadStream extends Readable implements NodeJS.ReadableStream {\n  /** @internal */\n  s: GridFSBucketReadStreamPrivate;\n\n  /**\n   * An error occurred\n   * @event\n   */\n  static readonly ERROR = 'error' as const;\n  /**\n   * Fires when the stream loaded the file document corresponding to the provided id.\n   * @event\n   */\n  static readonly FILE = 'file' as const;\n  /**\n   * Emitted when a chunk of data is available to be consumed.\n   * @event\n   */\n  static readonly DATA = 'data' as const;\n  /**\n   * Fired when the stream is exhausted (no more data events).\n   * @event\n   */\n  static readonly END = 'end' as const;\n  /**\n   * Fired when the stream is exhausted and the underlying cursor is killed\n   * @event\n   */\n  static readonly CLOSE = 'close' as const;\n\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(\n    chunks: Collection<GridFSChunk>,\n    files: Collection<GridFSFile>,\n    readPreference: ReadPreference | undefined,\n    filter: Document,\n    options?: GridFSBucketReadStreamOptions\n  ) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  override _read(): void {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0): this {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0): this {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort(): Promise<void> {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n}\n\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\n  if (stream.s.init) {\n    throw new MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream: GridFSBucketReadStream): void {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      stream.push(null);\n\n      stream.s.cursor?.close().then(\n        () => {\n          stream.emit(GridFSBucketReadStream.CLOSE);\n        },\n        error => {\n          stream.emit(GridFSBucketReadStream.ERROR, error);\n        }\n      );\n      return;\n    }\n\n    if (!stream.s.file) return;\n\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`\n        )\n      );\n    }\n\n    if (doc.n < expectedN) {\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`)\n      );\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(\n          GridFSBucketReadStream.ERROR,\n          new MongoGridFSChunkError(\n            `ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`\n          )\n        );\n      }\n\n      return stream.emit(\n        GridFSBucketReadStream.ERROR,\n        new MongoGridFSChunkError(\n          `ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`\n        )\n      );\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction init(stream: GridFSBucketReadStream): void {\n  const findOneOptions: FindOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = ({\n    error,\n    doc\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    if (!doc) {\n      const identifier = stream.s.filter._id\n        ? stream.s.filter._id.toString()\n        : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    const filter: Document = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc as GridFSFile;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(\n    doc => handleReadResult({ error: null, doc }),\n    error => handleReadResult({ error, doc: null })\n  );\n}\n\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  options: GridFSBucketReadStreamOptions\n): number {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be greater than stream end (${options.end})`\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n  throw new MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  cursor: FindCursor<GridFSChunk>,\n  options: GridFSBucketReadStreamOptions\n) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream end (${options.end}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start == null || options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new MongoInvalidArgumentError('End option must be defined');\n}\n"]},"metadata":{},"sourceType":"script"}