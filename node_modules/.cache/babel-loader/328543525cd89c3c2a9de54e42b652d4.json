{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\n\nconst bson_1 = require(\"../bson\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos, common_1.ServerType.LoadBalancer]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone, common_1.ServerType.LoadBalancer]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\n\nclass ServerDescription {\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param hello - An optional hello response for this server\n   */\n  constructor(address, hello) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (address == null || address === '') {\n      throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n    }\n\n    this.address = typeof address === 'string' ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n    : address.toString();\n    this.type = parseServerType(hello, options);\n    this.hosts = hello?.hosts?.map(host => host.toLowerCase()) ?? [];\n    this.passives = hello?.passives?.map(host => host.toLowerCase()) ?? [];\n    this.arbiters = hello?.arbiters?.map(host => host.toLowerCase()) ?? [];\n    this.tags = hello?.tags ?? {};\n    this.minWireVersion = hello?.minWireVersion ?? 0;\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = (0, utils_1.now)();\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n    this.error = options.error ?? null; // TODO(NODE-2674): Preserve int64 sent from MongoDB\n\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n    this.setName = hello?.setName ?? null;\n    this.setVersion = hello?.setVersion ?? null;\n    this.electionId = hello?.electionId ?? null;\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n    this.primary = hello?.primary ?? null;\n    this.me = hello?.me?.toLowerCase() ?? null;\n    this.$clusterTime = hello?.$clusterTime ?? null;\n  }\n\n  get hostAddress() {\n    return utils_1.HostAddress.fromString(this.address);\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n\n\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n\n\n  equals(other) {\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\n    // for equality we should only always perform direct equality comparison\n    const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion || compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId != null && other?.electionId != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === other?.electionId;\n    return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n\n}\n\nexports.ServerDescription = ServerDescription; // Parses a `hello` message and determines the server type\n\nfunction parseServerType(hello, options) {\n  if (options?.loadBalanced) {\n    return common_1.ServerType.LoadBalancer;\n  }\n\n  if (!hello || !hello.ok) {\n    return common_1.ServerType.Unknown;\n  }\n\n  if (hello.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n\n  if (hello.setName) {\n    if (hello.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n\n  return common_1.ServerType.Standalone;\n}\n\nexports.parseServerType = parseServerType;\n\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\n\n\nfunction compareTopologyVersion(currentTv, newTv) {\n  if (currentTv == null || newTv == null) {\n    return -1;\n  }\n\n  if (!currentTv.processId.equals(newTv.processId)) {\n    return -1;\n  } // TODO(NODE-2674): Preserve int64 sent from MongoDB\n\n\n  const currentCounter = bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);\n  const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n  return currentCounter.compare(newCounter);\n}\n\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"mappings":"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","names":["WRITABLE_SERVER_TYPES","Set","common_1","RSPrimary","Standalone","Mongos","LoadBalancer","DATA_BEARING_SERVER_TYPES","RSSecondary","ServerDescription","constructor","address","hello","options","error_1","utils_1","fromString","toString","type","parseServerType","hosts","map","host","toLowerCase","passives","arbiters","tags","minWireVersion","maxWireVersion","roundTripTime","lastUpdateTime","lastWriteDate","lastWrite","error","topologyVersion","setName","setVersion","electionId","logicalSessionTimeoutMinutes","primary","me","$clusterTime","hostAddress","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","electionIdsEqual","tagsStrictEqual","exports","loadBalanced","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","isWritablePrimary","secondary","arbiterOnly","RSArbiter","tags2","tagsKeys","Object","keys","tags2Keys","every","key","currentTv","newTv","processId","currentCounter","bson_1","isLong","counter","fromNumber","newCounter","compare"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sdam\\server_description.ts"],"sourcesContent":["import { Document, Long, ObjectId } from '../bson';\nimport { MongoError, MongoRuntimeError, MongoServerError } from '../error';\nimport { arrayStrictEqual, compareObjectId, errorStrictEqual, HostAddress, now } from '../utils';\nimport type { ClusterTime } from './common';\nimport { ServerType } from './common';\n\nconst WRITABLE_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.Standalone,\n  ServerType.Mongos,\n  ServerType.LoadBalancer\n]);\n\nconst DATA_BEARING_SERVER_TYPES = new Set<ServerType>([\n  ServerType.RSPrimary,\n  ServerType.RSSecondary,\n  ServerType.Mongos,\n  ServerType.Standalone,\n  ServerType.LoadBalancer\n]);\n\n/** @public */\nexport interface TopologyVersion {\n  processId: ObjectId;\n  counter: Long;\n}\n\n/** @public */\nexport type TagSet = { [key: string]: string };\n\n/** @internal */\nexport interface ServerDescriptionOptions {\n  /** An Error used for better reporting debugging */\n  error?: MongoServerError;\n\n  /** The round trip time to ping this server (in ms) */\n  roundTripTime?: number;\n\n  /** If the client is in load balancing mode. */\n  loadBalanced?: boolean;\n}\n\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nexport class ServerDescription {\n  address: string;\n  type: ServerType;\n  hosts: string[];\n  passives: string[];\n  arbiters: string[];\n  tags: TagSet;\n  error: MongoError | null;\n  topologyVersion: TopologyVersion | null;\n  minWireVersion: number;\n  maxWireVersion: number;\n  roundTripTime: number;\n  lastUpdateTime: number;\n  lastWriteDate: number;\n  me: string | null;\n  primary: string | null;\n  setName: string | null;\n  setVersion: number | null;\n  electionId: ObjectId | null;\n  logicalSessionTimeoutMinutes: number | null;\n\n  // NOTE: does this belong here? It seems we should gossip the cluster time at the CMAP level\n  $clusterTime?: ClusterTime;\n\n  /**\n   * Create a ServerDescription\n   * @internal\n   *\n   * @param address - The address of the server\n   * @param hello - An optional hello response for this server\n   */\n  constructor(\n    address: HostAddress | string,\n    hello?: Document,\n    options: ServerDescriptionOptions = {}\n  ) {\n    if (address == null || address === '') {\n      throw new MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n    }\n\n    this.address =\n      typeof address === 'string'\n        ? HostAddress.fromString(address).toString() // Use HostAddress to normalize\n        : address.toString();\n    this.type = parseServerType(hello, options);\n    this.hosts = hello?.hosts?.map((host: string) => host.toLowerCase()) ?? [];\n    this.passives = hello?.passives?.map((host: string) => host.toLowerCase()) ?? [];\n    this.arbiters = hello?.arbiters?.map((host: string) => host.toLowerCase()) ?? [];\n    this.tags = hello?.tags ?? {};\n    this.minWireVersion = hello?.minWireVersion ?? 0;\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n    this.error = options.error ?? null;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n    this.setName = hello?.setName ?? null;\n    this.setVersion = hello?.setVersion ?? null;\n    this.electionId = hello?.electionId ?? null;\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n    this.primary = hello?.primary ?? null;\n    this.me = hello?.me?.toLowerCase() ?? null;\n    this.$clusterTime = hello?.$clusterTime ?? null;\n  }\n\n  get hostAddress(): HostAddress {\n    return HostAddress.fromString(this.address);\n  }\n\n  get allHosts(): string[] {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n\n  /** Is this server available for reads*/\n  get isReadable(): boolean {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n\n  /** Is this server data bearing */\n  get isDataBearing(): boolean {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n\n  /** Is this server available for writes */\n  get isWritable(): boolean {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host(): string {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port(): number {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n\n  /**\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n   */\n  equals(other?: ServerDescription | null): boolean {\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\n    // for equality we should only always perform direct equality comparison\n    const topologyVersionsEqual =\n      this.topologyVersion === other?.topologyVersion ||\n      compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n\n    const electionIdsEqual =\n      this.electionId != null && other?.electionId != null\n        ? compareObjectId(this.electionId, other.electionId) === 0\n        : this.electionId === other?.electionId;\n\n    return (\n      other != null &&\n      errorStrictEqual(this.error, other.error) &&\n      this.type === other.type &&\n      this.minWireVersion === other.minWireVersion &&\n      arrayStrictEqual(this.hosts, other.hosts) &&\n      tagsStrictEqual(this.tags, other.tags) &&\n      this.setName === other.setName &&\n      this.setVersion === other.setVersion &&\n      electionIdsEqual &&\n      this.primary === other.primary &&\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n      topologyVersionsEqual\n    );\n  }\n}\n\n// Parses a `hello` message and determines the server type\nexport function parseServerType(hello?: Document, options?: ServerDescriptionOptions): ServerType {\n  if (options?.loadBalanced) {\n    return ServerType.LoadBalancer;\n  }\n\n  if (!hello || !hello.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (hello.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (hello.setName) {\n    if (hello.hidden) {\n      return ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n\nfunction tagsStrictEqual(tags: TagSet, tags2: TagSet): boolean {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n\n  return (\n    tagsKeys.length === tags2Keys.length &&\n    tagsKeys.every((key: string) => tags2[key] === tags[key])\n  );\n}\n\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nexport function compareTopologyVersion(\n  currentTv?: TopologyVersion | null,\n  newTv?: TopologyVersion | null\n): 0 | -1 | 1 {\n  if (currentTv == null || newTv == null) {\n    return -1;\n  }\n\n  if (!currentTv.processId.equals(newTv.processId)) {\n    return -1;\n  }\n\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  const currentCounter = Long.isLong(currentTv.counter)\n    ? currentTv.counter\n    : Long.fromNumber(currentTv.counter);\n  const newCounter = Long.isLong(newTv.counter) ? newTv.counter : Long.fromNumber(newTv.counter);\n\n  return currentCounter.compare(newCounter);\n}\n"]},"metadata":{},"sourceType":"script"}