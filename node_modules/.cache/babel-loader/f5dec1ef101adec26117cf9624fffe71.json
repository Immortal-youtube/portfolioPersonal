{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListDatabasesOperation = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass ListDatabasesOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n\n  execute(server, session, callback) {\n    const cmd = {\n      listDatabases: 1\n    };\n\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n\n}\n\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"mappings":";;;;;;;AAIA;;AACA;;AACA;AAoBA;;;AACA,MAAaA,sBAAb,SAA4CC,0BAA5C,CAAiF;EAG/EC,YAAYC,EAAZ,EAAoBC,OAApB,EAAkD;IAChD,MAAMD,EAAN,EAAUC,OAAV;IACA,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;IACA,KAAKC,EAAL,GAAU,IAAIC,wBAAJ,CAAqB,OAArB,EAA8B,MAA9B,CAAV;EACD;;EAEQC,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGyB;IAEvC,MAAMC,GAAG,GAAa;MAAEC,aAAa,EAAE;IAAjB,CAAtB;;IACA,IAAI,KAAKR,OAAL,CAAaS,QAAjB,EAA2B;MACzBF,GAAG,CAACE,QAAJ,GAAeC,MAAM,CAACH,GAAG,CAACE,QAAL,CAArB;IACD;;IAED,IAAI,KAAKT,OAAL,CAAaW,MAAjB,EAAyB;MACvBJ,GAAG,CAACI,MAAJ,GAAa,KAAKX,OAAL,CAAaW,MAA1B;IACD;;IAED,IAAI,OAAO,KAAKX,OAAL,CAAaY,mBAApB,KAA4C,SAAhD,EAA2D;MACzDL,GAAG,CAACK,mBAAJ,GAA0B,KAAKZ,OAAL,CAAaY,mBAAvC;IACD,CAbsC,CAevC;IACA;;;IACA,IAAI,4BAAeR,MAAf,KAA0B,CAA1B,IAA+B,KAAKJ,OAAL,CAAaa,OAAb,KAAyBC,SAA5D,EAAuE;MACrEP,GAAG,CAACM,OAAJ,GAAc,KAAKb,OAAL,CAAaa,OAA3B;IACD;;IAED,MAAME,cAAN,CAAqBX,MAArB,EAA6BC,OAA7B,EAAsCE,GAAtC,EAA2CD,QAA3C;EACD;;AAlC8E;;AAAjFU;AAqCA,+BAAcpB,sBAAd,EAAsC,CAACqB,mBAAOC,cAAR,EAAwBD,mBAAOE,SAA/B,CAAtC","names":["ListDatabasesOperation","command_1","constructor","db","options","ns","utils_1","execute","server","session","callback","cmd","listDatabases","nameOnly","Number","filter","authorizedDatabases","comment","undefined","executeCommand","exports","operation_1","READ_OPERATION","RETRYABLE"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\list_databases.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion, MongoDBNamespace } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface ListDatabasesResult {\n  databases: ({ name: string; sizeOnDisk?: number; empty?: boolean } & Document)[];\n  totalSize?: number;\n  totalSizeMb?: number;\n  ok: 1 | 0;\n}\n\n/** @public */\nexport interface ListDatabasesOptions extends CommandOperationOptions {\n  /** A query predicate that determines which databases are listed */\n  filter?: Document;\n  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n  nameOnly?: boolean;\n  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n  authorizedDatabases?: boolean;\n}\n\n/** @internal */\nexport class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {\n  override options: ListDatabasesOptions;\n\n  constructor(db: Db, options?: ListDatabasesOptions) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<ListDatabasesResult>\n  ): void {\n    const cmd: Document = { listDatabases: 1 };\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (maxWireVersion(server) >= 9 && this.options.comment !== undefined) {\n      cmd.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\ndefineAspects(ListDatabasesOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"]},"metadata":{},"sourceType":"script"}