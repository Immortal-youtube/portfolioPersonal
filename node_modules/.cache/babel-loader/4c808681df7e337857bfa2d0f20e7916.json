{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionsOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass CollectionsOperation extends operation_1.AbstractOperation {\n  constructor(db, options) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n\n  execute(server, session, callback) {\n    // Let's get the collection names\n    this.db.listCollections({}, { ...this.options,\n      nameOnly: true,\n      readPreference: this.readPreference,\n      session\n    }).toArray().then(documents => {\n      const collections = [];\n\n      for (const {\n        name\n      } of documents) {\n        if (!name.includes('$')) {\n          // Filter collections removing any illegal ones\n          collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n        }\n      } // Return the collection objects\n\n\n      callback(undefined, collections);\n    }, error => callback(error));\n  }\n\n}\n\nexports.CollectionsOperation = CollectionsOperation;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAKA;AAMA;;;AACA,MAAaA,oBAAb,SAA0CC,6BAA1C,CAAyE;EAIvEC,YAAYC,EAAZ,EAAoBC,OAApB,EAA+C;IAC7C,MAAMA,OAAN;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKD,EAAL,GAAUA,EAAV;EACD;;EAEQE,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGkB;IAEhC;IACA,KAAKL,EAAL,CACGM,eADH,CAEI,EAFJ,EAGI,EAAE,GAAG,KAAKL,OAAV;MAAmBM,QAAQ,EAAE,IAA7B;MAAmCC,cAAc,EAAE,KAAKA,cAAxD;MAAwEJ;IAAxE,CAHJ,EAKGK,OALH,GAMGC,IANH,CAOIC,SAAS,IAAG;MACV,MAAMC,WAAW,GAAG,EAApB;;MACA,KAAK,MAAM;QAAEC;MAAF,CAAX,IAAuBF,SAAvB,EAAkC;QAChC,IAAI,CAACE,IAAI,CAACC,QAAL,CAAc,GAAd,CAAL,EAAyB;UACvB;UACAF,WAAW,CAACG,IAAZ,CAAiB,IAAIC,uBAAJ,CAAe,KAAKhB,EAApB,EAAwBa,IAAxB,EAA8B,KAAKb,EAAL,CAAQiB,CAAR,CAAUhB,OAAxC,CAAjB;QACD;MACF,CAPS,CAQV;;;MACAI,QAAQ,CAACa,SAAD,EAAYN,WAAZ,CAAR;IACD,CAjBL,EAkBIO,KAAK,IAAId,QAAQ,CAACc,KAAD,CAlBrB;EAoBD;;AApCsE;;AAAzEC","names":["CollectionsOperation","operation_1","constructor","db","options","execute","server","session","callback","listCollections","nameOnly","readPreference","toArray","then","documents","collections","name","includes","push","collection_1","s","undefined","error","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\collections.ts"],"sourcesContent":["import { Collection } from '../collection';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, OperationOptions } from './operation';\n\nexport interface CollectionsOptions extends OperationOptions {\n  nameOnly?: boolean;\n}\n\n/** @internal */\nexport class CollectionsOperation extends AbstractOperation<Collection[]> {\n  override options: CollectionsOptions;\n  db: Db;\n\n  constructor(db: Db, options: CollectionsOptions) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Collection[]>\n  ): void {\n    // Let's get the collection names\n    this.db\n      .listCollections(\n        {},\n        { ...this.options, nameOnly: true, readPreference: this.readPreference, session }\n      )\n      .toArray()\n      .then(\n        documents => {\n          const collections = [];\n          for (const { name } of documents) {\n            if (!name.includes('$')) {\n              // Filter collections removing any illegal ones\n              collections.push(new Collection(this.db, name, this.db.s.options));\n            }\n          }\n          // Return the collection objects\n          callback(undefined, collections);\n        },\n        error => callback(error)\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}