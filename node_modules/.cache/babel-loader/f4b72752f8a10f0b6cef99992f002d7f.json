{"ast":null,"code":"export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n  const configProvider = async () => {\n    const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n\n    if (typeof configValue === \"function\") {\n      return configValue();\n    }\n\n    return configValue;\n  };\n\n  if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n    return async () => {\n      const endpoint = await configProvider();\n\n      if (endpoint && typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n          return endpoint.url.href;\n        }\n\n        if (\"hostname\" in endpoint) {\n          const {\n            protocol,\n            hostname,\n            port,\n            path\n          } = endpoint;\n          return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n        }\n      }\n\n      return endpoint;\n    };\n  }\n\n  return configProvider;\n};","map":{"version":3,"names":["createConfigValueProvider","configKey","canonicalEndpointParamKey","config","configProvider","configValue","endpoint","url","href","protocol","hostname","port","path"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"],"sourcesContent":["export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAG,CAACC,SAAD,EAAYC,yBAAZ,EAAuCC,MAAvC,KAAkD;EACvF,MAAMC,cAAc,GAAG,YAAY;IAC/B,MAAMC,WAAW,GAAGF,MAAM,CAACF,SAAD,CAAN,IAAqBE,MAAM,CAACD,yBAAD,CAA/C;;IACA,IAAI,OAAOG,WAAP,KAAuB,UAA3B,EAAuC;MACnC,OAAOA,WAAW,EAAlB;IACH;;IACD,OAAOA,WAAP;EACH,CAND;;EAOA,IAAIJ,SAAS,KAAK,UAAd,IAA4BC,yBAAyB,KAAK,UAA9D,EAA0E;IACtE,OAAO,YAAY;MACf,MAAMI,QAAQ,GAAG,MAAMF,cAAc,EAArC;;MACA,IAAIE,QAAQ,IAAI,OAAOA,QAAP,KAAoB,QAApC,EAA8C;QAC1C,IAAI,SAASA,QAAb,EAAuB;UACnB,OAAOA,QAAQ,CAACC,GAAT,CAAaC,IAApB;QACH;;QACD,IAAI,cAAcF,QAAlB,EAA4B;UACxB,MAAM;YAAEG,QAAF;YAAYC,QAAZ;YAAsBC,IAAtB;YAA4BC;UAA5B,IAAqCN,QAA3C;UACA,OAAQ,GAAEG,QAAS,KAAIC,QAAS,GAAEC,IAAI,GAAG,MAAMA,IAAT,GAAgB,EAAG,GAAEC,IAAK,EAAhE;QACH;MACJ;;MACD,OAAON,QAAP;IACH,CAZD;EAaH;;EACD,OAAOF,cAAP;AACH,CAxBM"},"metadata":{},"sourceType":"module"}