{"ast":null,"code":"\"use strict\";\n\nconst punycode = require(\"punycode\");\n\nconst regexes = require(\"./lib/regexes.js\");\n\nconst mappingTable = require(\"./lib/mappingTable.json\");\n\nconst {\n  STATUS_MAPPING\n} = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val, _ref) {\n  let {\n    useSTD3ASCIIRules\n  } = _ref;\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, _ref2) {\n  let {\n    useSTD3ASCIIRules,\n    processingOption\n  } = _ref2;\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        hasError = true;\n        processed += ch;\n        break;\n\n      case STATUS_MAPPING.ignored:\n        break;\n\n      case STATUS_MAPPING.mapped:\n        processed += mapping;\n        break;\n\n      case STATUS_MAPPING.deviation:\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n\n        break;\n\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, _ref3) {\n  let {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    processingOption,\n    useSTD3ASCIIRules\n  } = _ref3;\n\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n\n    if (processingOption === \"transitional\" && status !== STATUS_MAPPING.valid || processingOption === \"nontransitional\" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      return false;\n    }\n  } // https://tools.ietf.org/html/rfc5892#appendix-A\n\n\n  if (checkJoiners) {\n    let last = 0;\n\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n\n        return false;\n      }\n    }\n  } // https://tools.ietf.org/html/rfc5893#section-2\n\n\n  if (checkBidi) {\n    let rtl; // 1\n\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const {\n    processingOption\n  } = options; // 1. Map.\n\n  let {\n    string,\n    error\n  } = mapChars(domainName, options); // 2. Normalize.\n\n  string = string.normalize(\"NFC\"); // 3. Break.\n\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels); // 4. Convert/Validate.\n\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n\n      curProcessing = \"nontransitional\";\n    } // No need to validate if we already know there is an error.\n\n\n    if (error) {\n      continue;\n    }\n\n    const validation = validateLabel(label, { ...options,\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    });\n\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName) {\n  let {\n    checkHyphens = false,\n    checkBidi = false,\n    checkJoiners = false,\n    useSTD3ASCIIRules = false,\n    processingOption = \"nontransitional\",\n    verifyDNSLength = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName) {\n  let {\n    checkHyphens = false,\n    checkBidi = false,\n    checkJoiners = false,\n    useSTD3ASCIIRules = false,\n    processingOption = \"nontransitional\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};","map":{"version":3,"names":["punycode","require","regexes","mappingTable","STATUS_MAPPING","containsNonASCII","str","test","findStatus","val","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","min","Array","isArray","max","disallowed_STD3_valid","disallowed_STD3_mapped","disallowed","slice","valid","mapped","mapChars","domainName","processingOption","hasError","processed","ch","status","mapping","codePointAt","ignored","deviation","string","error","validateLabel","label","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","from","startsWith","endsWith","includes","combiningMarks","last","i","entries","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","err","bidiDomain","processing","options","split","isBidi","origLabel","curProcessing","validation","toASCII","verifyDNSLength","RangeError","result","l","encode","e","total","toUnicode","module","exports"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/mongodb-connection-string-url/node_modules/tr46/index.js"],"sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules &&\n          (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        hasError = true;\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        processed += mapping;\n        break;\n      case STATUS_MAPPING.deviation:\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== STATUS_MAPPING.valid) ||\n        (processingOption === \"nontransitional\" &&\n         status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation)) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\"\n} = {}) {\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}