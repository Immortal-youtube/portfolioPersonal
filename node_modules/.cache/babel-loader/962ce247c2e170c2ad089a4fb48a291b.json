{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass DeleteOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.limit != null ? op.limit > 0 : true);\n  }\n\n  execute(server, session, callback) {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      delete: this.ns.collection,\n      deletes: this.statements,\n      ordered\n    };\n\n    if (options.let) {\n      command.let = options.let;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n\n    if (unacknowledgedWrite) {\n      if (this.statements.find(o => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.DeleteOperation = DeleteOperation;\n\nclass DeleteOneOperation extends DeleteOperation {\n  constructor(collection, filter, options) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, { ...options,\n      limit: 1\n    })], options);\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        deletedCount: res.n\n      });\n    });\n  }\n\n}\n\nexports.DeleteOneOperation = DeleteOneOperation;\n\nclass DeleteManyOperation extends DeleteOperation {\n  constructor(collection, filter, options) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        deletedCount: res.n\n      });\n    });\n  }\n\n}\n\nexports.DeleteManyOperation = DeleteManyOperation;\n\nfunction makeDeleteStatement(filter, options) {\n  const op = {\n    q: filter,\n    limit: typeof options.limit === 'number' ? options.limit : 0\n  };\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  return op;\n}\n\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"mappings":"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","names":["DeleteOperation","command_1","constructor","ns","statements","options","undefined","canRetryWrite","every","op","limit","execute","server","session","callback","ordered","command","delete","collection","deletes","let","comment","unacknowledgedWrite","writeConcern","w","find","o","hint","error_1","executeCommand","exports","DeleteOneOperation","filter","s","namespace","makeDeleteStatement","err","res","code","writeErrors","explain","acknowledged","deletedCount","n","DeleteManyOperation","q","collation","operation_1","RETRYABLE","WRITE_OPERATION","EXPLAINABLE","SKIP_COLLATION"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\delete.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport type { WriteConcernOptions } from '../write_concern';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/** @public */\nexport interface DeleteOptions extends CommandOperationOptions, WriteConcernOptions {\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n  ordered?: boolean;\n  /** Specifies the collation to use for the operation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface DeleteResult {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined. */\n  acknowledged: boolean;\n  /** The number of documents that were deleted */\n  deletedCount: number;\n}\n\n/** @public */\nexport interface DeleteStatement {\n  /** The query that matches documents to delete. */\n  q: Document;\n  /** The number of matching documents to delete. */\n  limit: number;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/** @internal */\nexport class DeleteOperation extends CommandOperation<DeleteResult> {\n  override options: DeleteOptions;\n  statements: DeleteStatement[];\n\n  constructor(ns: MongoDBNamespace, statements: DeleteStatement[], options: DeleteOptions) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      delete: this.ns.collection,\n      deletes: this.statements,\n      ordered\n    };\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\nexport class DeleteOneOperation extends DeleteOperation {\n  constructor(collection: Collection, filter: Document, options: DeleteOptions) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<DeleteResult>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        deletedCount: res.n\n      });\n    });\n  }\n}\n\nexport class DeleteManyOperation extends DeleteOperation {\n  constructor(collection: Collection, filter: Document, options: DeleteOptions) {\n    super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<DeleteResult>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || res == null) return callback(err);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n      if (this.explain) return callback(undefined, res);\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        deletedCount: res.n\n      });\n    });\n  }\n}\n\nexport function makeDeleteStatement(\n  filter: Document,\n  options: DeleteOptions & { limit?: number }\n): DeleteStatement {\n  const op: DeleteStatement = {\n    q: filter,\n    limit: typeof options.limit === 'number' ? options.limit : 0\n  };\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  return op;\n}\n\ndefineAspects(DeleteOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(DeleteOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(DeleteManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\n"]},"metadata":{},"sourceType":"script"}