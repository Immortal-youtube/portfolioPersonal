{"ast":null,"code":"export function splitEvery(value, delimiter, numDelimiters) {\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  const segments = value.split(delimiter);\n\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  const compoundSegments = [];\n  let currentSegment = \"\";\n\n  for (let i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      currentSegment = segments[i];\n    } else {\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      compoundSegments.push(currentSegment);\n      currentSegment = \"\";\n    }\n  }\n\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}","map":{"version":3,"names":["splitEvery","value","delimiter","numDelimiters","Number","isInteger","Error","segments","split","compoundSegments","currentSegment","i","length","push"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/smithy-client/dist-es/split-every.js"],"sourcesContent":["export function splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    const segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    const compoundSegments = [];\n    let currentSegment = \"\";\n    for (let i = 0; i < segments.length; i++) {\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        }\n        else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\n"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,SAA3B,EAAsCC,aAAtC,EAAqD;EACxD,IAAIA,aAAa,IAAI,CAAjB,IAAsB,CAACC,MAAM,CAACC,SAAP,CAAiBF,aAAjB,CAA3B,EAA4D;IACxD,MAAM,IAAIG,KAAJ,CAAU,mCAAmCH,aAAnC,GAAmD,mBAA7D,CAAN;EACH;;EACD,MAAMI,QAAQ,GAAGN,KAAK,CAACO,KAAN,CAAYN,SAAZ,CAAjB;;EACA,IAAIC,aAAa,KAAK,CAAtB,EAAyB;IACrB,OAAOI,QAAP;EACH;;EACD,MAAME,gBAAgB,GAAG,EAAzB;EACA,IAAIC,cAAc,GAAG,EAArB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;IACtC,IAAID,cAAc,KAAK,EAAvB,EAA2B;MACvBA,cAAc,GAAGH,QAAQ,CAACI,CAAD,CAAzB;IACH,CAFD,MAGK;MACDD,cAAc,IAAIR,SAAS,GAAGK,QAAQ,CAACI,CAAD,CAAtC;IACH;;IACD,IAAI,CAACA,CAAC,GAAG,CAAL,IAAUR,aAAV,KAA4B,CAAhC,EAAmC;MAC/BM,gBAAgB,CAACI,IAAjB,CAAsBH,cAAtB;MACAA,cAAc,GAAG,EAAjB;IACH;EACJ;;EACD,IAAIA,cAAc,KAAK,EAAvB,EAA2B;IACvBD,gBAAgB,CAACI,IAAjB,CAAsBH,cAAtB;EACH;;EACD,OAAOD,gBAAP;AACH"},"metadata":{},"sourceType":"module"}