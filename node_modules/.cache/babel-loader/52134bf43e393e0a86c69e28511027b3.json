{"ast":null,"code":"\"use strict\";\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\n\nconst util_1 = require(\"util\");\n\nconst bson_1 = require(\"./bson\");\n\nconst metrics_1 = require(\"./cmap/metrics\");\n\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"./error\");\n\nconst mongo_types_1 = require(\"./mongo_types\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst common_1 = require(\"./sdam/common\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst utils_1 = require(\"./utils\");\n\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\n\nconst kServerSession = Symbol('serverSession');\n/** @internal */\n\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\n\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\n\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\n\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\n\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(client, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n\n    this[_a] = false;\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n\n\n  get id() {\n    return this[kServerSession]?.id;\n  }\n\n  get serverSession() {\n    let serverSession = this[kServerSession];\n\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n\n      if (this.hasEnded) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n\n    return serverSession;\n  }\n  /** Whether or not this session is configured for snapshot reads */\n\n\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced() {\n    return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n\n\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n\n\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n\n\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n\n\n  async endSession(options) {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction();\n      }\n\n      if (!this.hasEnded) {\n        const serverSession = this[kServerSession];\n\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession); // Make sure a new serverSession never makes it onto this ClientSession\n\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        } // mark the session as ended, and emit a signal\n\n\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n    } catch {// spec indicates that we should ignore all errors for `endSessions`\n    } finally {\n      maybeClearPinnedConnection(this, {\n        force: true,\n        ...options\n      });\n    }\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n\n\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n\n\n  advanceClusterTime(clusterTime) {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n\n    if (!clusterTime.signature || clusterTime.signature.hash?._bsontype !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && clusterTime.signature.keyId?._bsontype !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n\n\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n\n\n  incrementTransactionNumber() {\n    this[kTxnNumberIncrement] += 1;\n  }\n  /** @returns whether this session is currently in a transaction or not */\n\n\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n\n\n  startTransaction(options) {\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n\n    if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    } // increment txnNumber\n\n\n    this.incrementTransactionNumber(); // create transaction state\n\n    this.transaction = new transactions_1.Transaction({\n      readConcern: options?.readConcern ?? this.defaultTransactionOptions.readConcern ?? this.clientOptions?.readConcern,\n      writeConcern: options?.writeConcern ?? this.defaultTransactionOptions.writeConcern ?? this.clientOptions?.writeConcern,\n      readPreference: options?.readPreference ?? this.defaultTransactionOptions.readPreference ?? this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n  /**\n   * Commits the currently active transaction in this session.\n   */\n\n\n  async commitTransaction() {\n    return endTransactionAsync(this, 'commitTransaction');\n  }\n  /**\n   * Aborts the currently active transaction in this session.\n   */\n\n\n  async abortTransaction() {\n    return endTransactionAsync(this, 'abortTransaction');\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n\n\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n\n\n  async withTransaction(fn, options) {\n    const startTime = (0, utils_1.now)();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n\n}\n\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\n\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n\n  const topology = session.client.topology; // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear({\n          serviceId: conn.serviceId\n        });\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n  let promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n\n      throw err;\n    }\n\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\n\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  const command = {\n    [commandName]: 1\n  }; // apply a writeConcern if specified\n\n  let writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(error, result) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n      return callback();\n    }\n\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult); // per txns spec, must unpin session in this case\n\n          session.unpin({\n            error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error\n        });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (error, result) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n\n    commandHandler(error, result);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\n\n\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n\n\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n\n\n  static clone(serverSession) {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n    const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type); // Manual prototype construction to avoid modifying the constructor of this class\n\n    return Object.setPrototypeOf({\n      id: {\n        id\n      },\n      lastUse: serverSession.lastUse,\n      txnNumber: serverSession.txnNumber,\n      isDirty: serverSession.isDirty\n    }, ServerSession.prototype);\n  }\n\n}\n\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\n\nclass ServerSessionPool {\n  constructor(client) {\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = new utils_1.List();\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n\n\n  acquire() {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n    let session = null; // Try to obtain from session pool\n\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n\n      if (potentialSession != null && (!!this.client.topology?.loadBalanced || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n        session = potentialSession;\n        break;\n      }\n    } // If nothing valid came from the pool make a new one\n\n\n    if (session == null) {\n      session = new ServerSession();\n    }\n\n    return session;\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n\n\n  release(session) {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      } // otherwise, readd this session to the session pool\n\n\n      this.sessions.unshift(session);\n    }\n  }\n\n}\n\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\n\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  } // May acquire serverSession here\n\n\n  const serverSession = session.serverSession;\n\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n\n    return;\n  } // mark the last use of this session, and apply the `lsid`\n\n\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0; // TODO(NODE-2674): Preserve int64 sent from MongoDB\n\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n\n    return;\n  } // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n\n  return;\n}\n\nexports.applySession = applySession;\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"mappings":"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","names":["minWireVersionForShardedTransactions","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","kTxnNumberIncrement","ClientSession","mongo_types_1","constructor","client","sessionPool","options","clientOptions","error_1","ServerSessionPool","snapshot","causalConsistency","hasEnded","explicit","acquire","defaultCausalConsistencyValue","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","Object","assign","transaction","transactions_1","id","serverSession","snapshotEnabled","loadBalanced","topology","description","type","common_1","LoadBalanced","pinnedConnection","pin","conn","TypeError","emit","constants_1","inTransaction","metrics_1","TXN","CURSOR","unpin","maybeClearPinnedConnection","unpinServer","isPinned","endSession","abortTransaction","release","defineProperty","value","ServerSession","clone","writable","force","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","equals","session","utils_1","buffer","incrementTransactionNumber","isActive","startTransaction","isCommitted","topologyMaxWireVersion","readConcern","writeConcern","readPreference","maxCommitTimeMS","transition","STARTING_TRANSACTION","commitTransaction","endTransactionAsync","toBSON","withTransaction","fn","startTime","attemptTransaction","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","err","isNonDeterministicWriteConcernError","codeName","has","isMaxTimeMSExpiredError","code","UnsatisfiableWriteConcern","UnknownReplWriteConcern","error","hasErrorLabel","TransientTransactionError","servers","Array","from","s","values","loadBalancer","pool","checkIn","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","catch","UnknownTransactionCommitResult","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","promise","Promise","reject","then","maybeRetryOrThrow","addErrorLabel","endTransaction","commandName","callback","txnState","TRANSACTION_COMMITTED_EMPTY","command","w","wtimeout","maxTimeMS","commandHandler","result","RetryableWriteError","recoveryToken","run_command_1","read_preference_1","primary","bypassPinningCheck","bson_1","SUBTYPE_UUID","lastUse","txnNumber","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","arrayBuffer","ArrayBuffer","idBytes","Buffer","set","sub_type","setPrototypeOf","prototype","sessions","logicalSessionTimeoutMinutes","length","potentialSession","shift","unshift","prune","applySession","lsid","inTxnOrTxnCommand","isRetryableWrite","willRetryWrite","fromNumber","afterClusterTime","level","read_concern_1","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sessions.ts"],"sourcesContent":["import { promisify } from 'util';\n\nimport { Binary, Document, Long, Timestamp } from './bson';\nimport type { CommandOptions, Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport { PINNED, UNPINNED } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport {\n  AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoWriteConcernError\n} from './error';\nimport type { MongoClient, MongoOptions } from './mongo_client';\nimport { TypedEventEmitter } from './mongo_types';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport { ReadConcernLevel } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { _advanceClusterTime, ClusterTime, TopologyType } from './sdam/common';\nimport { isTransactionCommand, Transaction, TransactionOptions, TxnState } from './transactions';\nimport {\n  ByteUtils,\n  calculateDurationInMs,\n  Callback,\n  commandSupportsReadConcern,\n  isPromiseLike,\n  List,\n  maxWireVersion,\n  now,\n  uuidV4\n} from './utils';\n\nconst minWireVersionForShardedTransactions = 8;\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = void> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n  /** @internal */\n  client: MongoClient;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions?: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /** @internal */\n  [kServerSession]: ServerSession | null;\n  /** @internal */\n  [kSnapshotTime]?: Timestamp;\n  /** @internal */\n  [kSnapshotEnabled] = false;\n  /** @internal */\n  [kPinnedConnection]?: Connection;\n  /** @internal */\n  [kTxnNumberIncrement]: number;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    client: MongoClient,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions?: MongoOptions\n  ) {\n    super();\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new MongoInvalidArgumentError(\n          'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n        );\n      }\n    }\n\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this[kServerSession]?.id;\n  }\n\n  get serverSession(): ServerSession {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled(): boolean {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced(): boolean {\n    return this.client.topology?.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  get pinnedConnection(): Connection | undefined {\n    return this[kPinnedConnection];\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(\n      PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n  async endSession(options?: EndSessionOptions): Promise<void> {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction();\n      }\n      if (!this.hasEnded) {\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it onto this ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n    } catch {\n      // spec indicates that we should ignore all errors for `endSessions`\n    } finally {\n      maybeClearPinnedConnection(this, { force: true, ...options });\n    }\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber(): void {\n    this[kTxnNumberIncrement] += 1;\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this[kSnapshotEnabled]) {\n      throw new MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.client.topology);\n    if (\n      isSharded(this.client.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   */\n  async commitTransaction(): Promise<Document> {\n    return endTransactionAsync(this, 'commitTransaction');\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   */\n  async abortTransaction(): Promise<Document> {\n    return endTransactionAsync(this, 'abortTransaction');\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  async withTransaction<T = void>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions\n  ): Promise<Document | undefined> {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime: number, max: number) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError) {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n  ) {\n    return;\n  }\n\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(\n        UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear({ serviceId: conn.serviceId });\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError) {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    (err.writeConcernError && err.writeConcernError.code === MONGODB_ERROR_CODES.MaxTimeMSExpired)\n  );\n}\n\nfunction attemptTransactionCommit<T>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  return session.commitTransaction().catch((err: MongoError) => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set<TxnState>([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session: ClientSession) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction<TSchema>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<TSchema>,\n  options?: TransactionOptions\n): Promise<any> {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new MongoInvalidArgumentError(\n      'Function provided to `withTransaction` must return a Promise'\n    );\n  }\n\n  return promise.then(\n    () => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    },\n    err => {\n      function maybeRetryOrThrow(err: MongoError): Promise<any> {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n        }\n\n        throw err;\n      }\n\n      if (session.inTransaction()) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    }\n  );\n}\n\nconst endTransactionAsync = promisify(\n  endTransaction as (\n    session: ClientSession,\n    commandName: 'abortTransaction' | 'commitTransaction',\n    callback: (error: Error, result: Document) => void\n  ) => void\n);\n\nfunction endTransaction(\n  session: ClientSession,\n  commandName: 'abortTransaction' | 'commitTransaction',\n  callback: Callback<Document>\n) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(\n        new MongoTransactionError('Cannot call commitTransaction after calling abortTransaction')\n      );\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(\n        new MongoTransactionError('Cannot call abortTransaction after calling commitTransaction')\n      );\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command: Document = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = { w: session.clientOptions.writeConcern.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(error?: Error, result?: Document) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, { force: false });\n      }\n\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n\n    session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof MongoError) {\n      if (\n        error.hasErrorLabel(MongoErrorLabel.RetryableWriteError) ||\n        error instanceof MongoWriteConcernError ||\n        isMaxTimeMSExpiredError(error)\n      ) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n\n          // per txns spec, must unpin session in this case\n          session.unpin({ error });\n        }\n      } else if (error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({ error });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  executeOperation(\n    session.client,\n    new RunAdminCommandOperation(undefined, command, {\n      session,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    }),\n    (error, result) => {\n      if (command.abortTransaction) {\n        // always unpin on abort regardless of command outcome\n        session.unpin();\n      }\n\n      if (error instanceof MongoError && error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        if (command.commitTransaction) {\n          // per txns spec, must unpin session in this case\n          session.unpin({ force: true });\n\n          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n            w: 'majority'\n          });\n        }\n\n        return executeOperation(\n          session.client,\n          new RunAdminCommandOperation(undefined, command, {\n            session,\n            readPreference: ReadPreference.primary,\n            bypassPinningCheck: true\n          }),\n          commandHandler\n        );\n      }\n\n      commandHandler(error, result);\n    }\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession: ServerSession): Readonly<ServerSession> {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n\n    const id = new Binary(idBytes, serverSession.id.id.sub_type);\n\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf(\n      {\n        id: { id },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      },\n      ServerSession.prototype\n    );\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  client: MongoClient;\n  sessions: List<ServerSession>;\n\n  constructor(client: MongoClient) {\n    if (client == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = new List<ServerSession>();\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    let session: ServerSession | null = null;\n\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (\n        potentialSession != null &&\n        (!!this.client.topology?.loadBalanced ||\n          !potentialSession.hasTimedOut(sessionTimeoutMinutes))\n      ) {\n        session = potentialSession;\n        break;\n      }\n    }\n\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n\n    return session;\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options: CommandOptions\n): MongoDriverError | undefined {\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  const inTxnOrTxnCommand = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command, options)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n  return;\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: Document): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}