{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass UpdateOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  execute(server, session, callback) {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n\n    if (unacknowledgedWrite) {\n      if (this.statements.find(o => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\n\nclass UpdateOneOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options,\n      multi: false\n    })], options);\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\n\nclass UpdateManyOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options,\n      multi: true\n    })], options);\n\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\n\nclass ReplaceOneOperation extends UpdateOperation {\n  constructor(collection, filter, replacement, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options,\n      multi: false\n    })], options);\n\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n\n}\n\nexports.ReplaceOneOperation = ReplaceOneOperation;\n\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op = {\n    q: filter,\n    u: update\n  };\n\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"mappings":"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","names":["UpdateOperation","command_1","constructor","ns","statements","options","undefined","canRetryWrite","every","op","multi","execute","server","session","callback","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","unacknowledgedWrite","writeConcern","w","find","o","hint","error_1","executeCommand","exports","UpdateOneOperation","filter","s","namespace","makeUpdateStatement","err","res","explain","code","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","ReplaceOneOperation","replacement","q","u","upsert","arrayFilters","collation","operation_1","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\update.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, hasAtomicOperators, MongoDBNamespace } from '../utils';\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, Hint } from './operation';\n\n/** @public */\nexport interface UpdateOptions extends CommandOperationOptions {\n  /** A set of filters specifying to which array elements an update should apply */\n  arrayFilters?: Document[];\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @public */\nexport interface UpdateResult {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of documents that matched the filter */\n  matchedCount: number;\n  /** The number of documents that were modified */\n  modifiedCount: number;\n  /** The number of documents that were upserted */\n  upsertedCount: number;\n  /** The identifier of the inserted document if an upsert took place */\n  upsertedId: ObjectId;\n}\n\n/** @public */\nexport interface UpdateStatement {\n  /** The query that matches documents to update. */\n  q: Document;\n  /** The modifications to apply. */\n  u: Document | Document[];\n  /**  If true, perform an insert if no documents match the query. */\n  upsert?: boolean;\n  /** If true, updates all documents that meet the query criteria. */\n  multi?: boolean;\n  /** Specifies the collation to use for the operation. */\n  collation?: CollationOptions;\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n  arrayFilters?: Document[];\n  /** A document or string that specifies the index to use to support the query predicate. */\n  hint?: Hint;\n}\n\n/** @internal */\nexport class UpdateOperation extends CommandOperation<Document> {\n  override options: UpdateOptions & { ordered?: boolean };\n  statements: UpdateStatement[];\n\n  constructor(\n    ns: MongoDBNamespace,\n    statements: UpdateStatement[],\n    options: UpdateOptions & { ordered?: boolean }\n  ) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n\n    this.statements = statements;\n  }\n\n  override get canRetryWrite(): boolean {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find((o: Document) => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class UpdateOneOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @internal */\nexport class UpdateManyOperation extends UpdateOperation {\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\n      options\n    );\n\n    if (!hasAtomicOperators(update)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\n/** @public */\nexport interface ReplaceOptions extends CommandOperationOptions {\n  /** If true, allows the write to opt-out of document level validation */\n  bypassDocumentValidation?: boolean;\n  /** Specifies a collation */\n  collation?: CollationOptions;\n  /** Specify that the update query should only consider plans using the hinted index */\n  hint?: string | Document;\n  /** When true, creates a new document if no document matches the query */\n  upsert?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n}\n\n/** @internal */\nexport class ReplaceOneOperation extends UpdateOperation {\n  constructor(\n    collection: Collection,\n    filter: Document,\n    replacement: Document,\n    options: ReplaceOptions\n  ) {\n    super(\n      collection.s.namespace,\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\n      options\n    );\n\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<UpdateResult | Document>\n  ): void {\n    super.execute(server, session, (err, res) => {\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new MongoServerError(res));\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\n\n      callback(undefined, {\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId:\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\n\nexport function makeUpdateStatement(\n  filter: Document,\n  update: Document | Document[],\n  options: UpdateOptions & { multi?: boolean }\n): UpdateStatement {\n  if (filter == null || typeof filter !== 'object') {\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n\n  if (update == null || typeof update !== 'object') {\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n\n  const op: UpdateStatement = { q: filter, u: update };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n\n  return op;\n}\n\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\ndefineAspects(UpdateOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(UpdateManyOperation, [\n  Aspect.WRITE_OPERATION,\n  Aspect.EXPLAINABLE,\n  Aspect.SKIP_COLLATION\n]);\ndefineAspects(ReplaceOneOperation, [\n  Aspect.RETRYABLE,\n  Aspect.WRITE_OPERATION,\n  Aspect.SKIP_COLLATION\n]);\n"]},"metadata":{},"sourceType":"script"}