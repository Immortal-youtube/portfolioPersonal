{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\n\nvar bson_1 = require(\"bson\");\n\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSON\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSON;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"BSONType\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONType;\n  }\n});\nObject.defineProperty(exports, \"calculateObjectSize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.calculateObjectSize;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"deserialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.deserialize;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Double;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Long;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"serialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.serialize;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Timestamp;\n  }\n});\n\nfunction pluckBSONSerializeOptions(options) {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\n\nfunction resolveBSONOptions(options, parent) {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n\nexports.resolveBSONOptions = resolveBSONOptions;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACEA;EAAAC;EAAAC;IAAA;EAAM;AAAN;AACAF;EAAAC;EAAAC;IAAA;EAAI;AAAJ;AACAF;EAAAC;EAAAC;IAAA;EAAU;AAAV;AACAF;EAAAC;EAAAC;IAAA;EAAU;AAAV;AACAF;EAAAC;EAAAC;IAAA;EAAQ;AAAR;AACAF;EAAAC;EAAAC;IAAA;EAAmB;AAAnB;AACAF;EAAAC;EAAAC;IAAA;EAAI;AAAJ;AACAF;EAAAC;EAAAC;IAAA;EAAK;AAAL;AACAF;EAAAC;EAAAC;IAAA;EAAU;AAAV;AACAF;EAAAC;EAAAC;IAAA;EAAW;AAAX;AAEAF;EAAAC;EAAAC;IAAA;EAAM;AAAN;AACAF;EAAAC;EAAAC;IAAA;EAAK;AAAL;AACAF;EAAAC;EAAAC;IAAA;EAAI;AAAJ;AACAF;EAAAC;EAAAC;IAAA;EAAM;AAAN;AACAF;EAAAC;EAAAC;IAAA;EAAM;AAAN;AACAF;EAAAC;EAAAC;IAAA;EAAQ;AAAR;AACAF;EAAAC;EAAAC;IAAA;EAAS;AAAT;AACAF;EAAAC;EAAAC;IAAA;EAAS;AAAT;;AA6CF,SAAgBC,yBAAhB,CAA0CC,OAA1C,EAAuE;EACrE,MAAM;IACJC,WADI;IAEJC,aAFI;IAGJC,cAHI;IAIJC,YAJI;IAKJC,kBALI;IAMJC,eANI;IAOJC,UAPI;IAQJC,GARI;IASJC;EATI,IAUFT,OAVJ;EAWA,OAAO;IACLC,WADK;IAELC,aAFK;IAGLC,cAHK;IAILC,YAJK;IAKLC,kBALK;IAMLC,eANK;IAOLC,UAPK;IAQLC,GARK;IASLC;EATK,CAAP;AAWD;;AAvBDC;AAyBA;;;;;;;AAMA,SAAgBC,kBAAhB,CACEX,OADF,EAEEY,MAFF,EAEiD;EAE/C,MAAMC,aAAa,GAAGD,MAAM,EAAEE,WAA9B;EACA,OAAO;IACLN,GAAG,EAAER,OAAO,EAAEQ,GAAT,IAAgBK,aAAa,EAAEL,GAA/B,IAAsC,KADtC;IAELJ,YAAY,EAAEJ,OAAO,EAAEI,YAAT,IAAyBS,aAAa,EAAET,YAAxC,IAAwD,IAFjE;IAGLF,aAAa,EAAEF,OAAO,EAAEE,aAAT,IAA0BW,aAAa,EAAEX,aAAzC,IAA0D,IAHpE;IAILC,cAAc,EAAEH,OAAO,EAAEG,cAAT,IAA2BU,aAAa,EAAEV,cAA1C,IAA4D,KAJvE;IAKLG,eAAe,EAAEN,OAAO,EAAEM,eAAT,IAA4BO,aAAa,EAAEP,eAA3C,IAA8D,KAL1E;IAMLC,UAAU,EAAEP,OAAO,EAAEO,UAAT,IAAuBM,aAAa,EAAEN,UAAtC,IAAoD,KAN3D;IAOLF,kBAAkB,EAAEL,OAAO,EAAEK,kBAAT,IAA+BQ,aAAa,EAAER,kBAA9C,IAAoE,KAPnF;IAQLJ,WAAW,EAAED,OAAO,EAAEC,WAAT,IAAwBY,aAAa,EAAEZ,WAAvC,IAAsD,EAR9D;IASLQ,oBAAoB,EAClBT,OAAO,EAAES,oBAAT,IAAiCI,aAAa,EAAEJ,oBAAhD,IAAwE;EAVrE,CAAP;AAYD;;AAjBDC","names":["Object","enumerable","get","pluckBSONSerializeOptions","options","fieldsAsRaw","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","exports","resolveBSONOptions","parent","parentOptions","bsonOptions"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\bson.ts"],"sourcesContent":["import type { DeserializeOptions, SerializeOptions } from 'bson';\n\nexport {\n  Binary,\n  BSON,\n  BSONRegExp,\n  BSONSymbol,\n  BSONType,\n  calculateObjectSize,\n  Code,\n  DBRef,\n  Decimal128,\n  deserialize,\n  Document,\n  Double,\n  Int32,\n  Long,\n  MaxKey,\n  MinKey,\n  ObjectId,\n  serialize,\n  Timestamp\n} from 'bson';\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport interface BSONSerializeOptions\n  extends Omit<SerializeOptions, 'index'>,\n    Omit<\n      DeserializeOptions,\n      | 'evalFunctions'\n      | 'cacheFunctions'\n      | 'cacheFunctionsCrc32'\n      | 'allowObjectSmallerThanBufferSize'\n      | 'index'\n      | 'validation'\n      | 'useBigInt64'\n    > {\n  /**\n   * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\n   * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\n   * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\n   * for more detail about what \"unsafe\" refers to in this context.\n   * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\n   * your own buffer and clone the contents:\n   *\n   * @example\n   * ```ts\n   * const raw = await collection.findOne({}, { raw: true });\n   * const myBuffer = Buffer.alloc(raw.byteLength);\n   * myBuffer.set(raw, 0);\n   * // Only save and use `myBuffer` beyond this point\n   * ```\n   *\n   * @remarks\n   * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\n   * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\n   */\n  raw?: boolean;\n\n  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n  enableUtf8Validation?: boolean;\n}\n\nexport function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nexport function resolveBSONOptions(\n  options?: BSONSerializeOptions,\n  parent?: { bsonOptions?: BSONSerializeOptions }\n): BSONSerializeOptions {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation:\n      options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n"]},"metadata":{},"sourceType":"script"}