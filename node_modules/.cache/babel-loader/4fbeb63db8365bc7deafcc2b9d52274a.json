{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameOperation = void 0;\n\nconst collection_1 = require(\"../collection\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n\nconst run_command_1 = require(\"./run_command\");\n/** @internal */\n\n\nclass RenameOperation extends run_command_1.RunAdminCommandOperation {\n  constructor(collection, newName, options) {\n    // Check the collection name\n    (0, utils_1.checkCollectionName)(newName); // Build the command\n\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err); // We have an error\n\n      if (doc?.errmsg) {\n        return callback(new error_1.MongoServerError(doc));\n      }\n\n      let newColl;\n\n      try {\n        newColl = new collection_1.Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      return callback(undefined, newColl);\n    });\n  }\n\n}\n\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAGA;;AAEA;;AACA;AAUA;;;AACA,MAAaA,eAAb,SAAqCC,sCAArC,CAA6D;EAK3DC,YAAYC,UAAZ,EAAoCC,OAApC,EAAqDC,OAArD,EAA2E;IACzE;IACA,iCAAoBD,OAApB,EAFyE,CAIzE;;IACA,MAAME,gBAAgB,GAAGH,UAAU,CAACI,SAApC;IACA,MAAMC,YAAY,GAAGL,UAAU,CAACM,CAAX,CAAaF,SAAb,CAAuBG,cAAvB,CAAsCN,OAAtC,EAA+CO,QAA/C,EAArB;IACA,MAAMC,UAAU,GAAG,OAAOP,OAAO,CAACO,UAAf,KAA8B,SAA9B,GAA0CP,OAAO,CAACO,UAAlD,GAA+D,KAAlF;IACA,MAAMC,GAAG,GAAG;MAAEP,gBAAgB,EAAEA,gBAApB;MAAsCQ,EAAE,EAAEN,YAA1C;MAAwDI,UAAU,EAAEA;IAApE,CAAZ;IAEA,MAAMT,UAAN,EAAkBU,GAAlB,EAAuBR,OAAvB;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;;EAEQW,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGgB;IAE9B,MAAMC,IAAI,GAAG,KAAKhB,UAAlB;IAEA,MAAMY,OAAN,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B,CAACG,GAAD,EAAMC,GAAN,KAAa;MAC1C,IAAID,GAAJ,EAAS,OAAOF,QAAQ,CAACE,GAAD,CAAf,CADiC,CAE1C;;MACA,IAAIC,GAAG,EAAEC,MAAT,EAAiB;QACf,OAAOJ,QAAQ,CAAC,IAAIK,wBAAJ,CAAqBF,GAArB,CAAD,CAAf;MACD;;MAED,IAAIG,OAAJ;;MACA,IAAI;QACFA,OAAO,GAAG,IAAIC,uBAAJ,CAAeN,IAAI,CAACV,CAAL,CAAOiB,EAAtB,EAA0B,KAAKtB,OAA/B,EAAwCe,IAAI,CAACV,CAAL,CAAOJ,OAA/C,CAAV;MACD,CAFD,CAEE,OAAOe,GAAP,EAAY;QACZ,OAAOF,QAAQ,CAACE,GAAD,CAAf;MACD;;MAED,OAAOF,QAAQ,CAACS,SAAD,EAAYH,OAAZ,CAAf;IACD,CAfD;EAgBD;;AA5C0D;;AAA7DI;AA+CA,+BAAc5B,eAAd,EAA+B,CAAC6B,mBAAOC,eAAR,CAA/B","names":["RenameOperation","run_command_1","constructor","collection","newName","options","renameCollection","namespace","toCollection","s","withCollection","toString","dropTarget","cmd","to","execute","server","session","callback","coll","err","doc","errmsg","error_1","newColl","collection_1","db","undefined","exports","operation_1","WRITE_OPERATION"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\rename.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { Collection } from '../collection';\nimport { MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, checkCollectionName } from '../utils';\nimport type { CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\nimport { RunAdminCommandOperation } from './run_command';\n\n/** @public */\nexport interface RenameOptions extends CommandOperationOptions {\n  /** Drop the target name collection if it previously exists. */\n  dropTarget?: boolean;\n  /** Unclear */\n  new_collection?: boolean;\n}\n\n/** @internal */\nexport class RenameOperation extends RunAdminCommandOperation {\n  override options: RenameOptions;\n  collection: Collection;\n  newName: string;\n\n  constructor(collection: Collection, newName: string, options: RenameOptions) {\n    // Check the collection name\n    checkCollectionName(newName);\n\n    // Build the command\n    const renameCollection = collection.namespace;\n    const toCollection = collection.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\n\n    super(collection, cmd, options);\n    this.options = options;\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Collection>\n  ): void {\n    const coll = this.collection;\n\n    super.execute(server, session, (err, doc) => {\n      if (err) return callback(err);\n      // We have an error\n      if (doc?.errmsg) {\n        return callback(new MongoServerError(doc));\n      }\n\n      let newColl: Collection<Document>;\n      try {\n        newColl = new Collection(coll.s.db, this.newName, coll.s.options);\n      } catch (err) {\n        return callback(err);\n      }\n\n      return callback(undefined, newColl);\n    });\n  }\n}\n\ndefineAspects(RenameOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}