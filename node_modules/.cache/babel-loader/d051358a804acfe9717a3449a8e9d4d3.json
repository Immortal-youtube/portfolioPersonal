{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\n\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\n\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\n\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n\n}\n\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\n\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n\n}\n\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\n\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\n\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n\n}\n\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId) {\n    this.connectionId = connectionId;\n  }\n\n}\n\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n  }\n\n}\n\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\n\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n\n}\n\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"mappings":";;;;;;AAIA;;;;;;AAKA,MAAaA,6BAAb,CAA0C;EAUxC;EACAC,YACEC,UADF,EAEEC,OAFF,EAGEC,mBAHF,EAIEC,cAJF,EAImC;IAEjC,KAAKH,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,cAAL,GAAsBA,cAAtB;EACD;;AArBuC;;AAA1CC;AAwBA;;;;;;AAKA,MAAaC,kBAAb,CAA+B;EAM7B;EACAN,YAAYC,UAAZ,EAAgCC,OAAhC,EAA+C;IAC7C,KAAKD,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;;AAV4B;;AAA/BG;AAaA;;;;;;AAKA,MAAaE,iBAAb,CAA8B;EAM5B;EACAP,YAAYC,UAAZ,EAAgCC,OAAhC,EAA+C;IAC7C,KAAKD,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeA,OAAf;EACD;;AAV2B;;AAA9BG;AAaA;;;;;;AAKA,MAAaG,+BAAb,CAA4C;EAQ1C;EACAR,YACEC,UADF,EAEEE,mBAFF,EAGEC,cAHF,EAGqC;IAEnC,KAAKH,UAAL,GAAkBA,UAAlB;IACA,KAAKE,mBAAL,GAA2BA,mBAA3B;IACA,KAAKC,cAAL,GAAsBA,cAAtB;EACD;;AAjByC;;AAA5CC;AAoBA;;;;;;AAKA,MAAaI,oBAAb,CAAiC;EAI/B;EACAT,YAAYC,UAAZ,EAA8B;IAC5B,KAAKA,UAAL,GAAkBA,UAAlB;EACD;;AAP8B;;AAAjCI;AAUA;;;;;;AAKA,MAAaK,mBAAb,CAAgC;EAI9B;EACAV,YAAYC,UAAZ,EAA8B;IAC5B,KAAKA,UAAL,GAAkBA,UAAlB;EACD;;AAP6B;;AAAhCI;AAUA;;;;;;;;AAOA,MAAaM,2BAAb,CAAwC;EAItC;EACAX,YAAYY,YAAZ,EAAgC;IAC9B,KAAKA,YAAL,GAAoBA,YAApB;EACD;;AAPqC;;AAAxCP;AAUA;;;;;;AAKA,MAAaQ,6BAAb,CAA0C;EAQxC;EACAb,YAAYY,YAAZ,EAAkCE,QAAlC,EAAoDC,KAApD,EAA0E;IACxE,KAAKH,YAAL,GAAoBA,YAApB;IACA,KAAKE,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAaA,KAAK,IAAI,EAAtB;EACD;;AAbuC;;AAA1CV;AAgBA;;;;;;AAKA,MAAaW,0BAAb,CAAuC;EAQrC;EACAhB,YAAYY,YAAZ,EAAkCE,QAAlC,EAAoDG,OAApD,EAAkE;IAChE,KAAKL,YAAL,GAAoBA,YAApB;IACA,KAAKE,QAAL,GAAgBA,QAAhB;IACA,KAAKG,OAAL,GAAeA,OAAf;EACD;;AAboC;;AAAvCZ","names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","exports","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sdam\\events.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ServerDescription } from './server_description';\nimport type { TopologyDescription } from './topology_description';\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport class ServerDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n  /** The previous server description */\n  previousDescription: ServerDescription;\n  /** The new server description */\n  newDescription: ServerDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    address: string,\n    previousDescription: ServerDescription,\n    newDescription: ServerDescription\n  ) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport class ServerOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport class ServerClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The address (host/port pair) of the server */\n  address: string;\n\n  /** @internal */\n  constructor(topologyId: number, address: string) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport class TopologyDescriptionChangedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n  /** The old topology description */\n  previousDescription: TopologyDescription;\n  /** The new topology description */\n  newDescription: TopologyDescription;\n\n  /** @internal */\n  constructor(\n    topologyId: number,\n    previousDescription: TopologyDescription,\n    newDescription: TopologyDescription\n  ) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport class TopologyOpeningEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport class TopologyClosedEvent {\n  /** A unique identifier for the topology */\n  topologyId: number;\n\n  /** @internal */\n  constructor(topologyId: number) {\n    this.topologyId = topologyId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport class ServerHeartbeatStartedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n\n  /** @internal */\n  constructor(connectionId: string) {\n    this.connectionId = connectionId;\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatSucceededEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command reply */\n  reply: Document;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, reply: Document | null) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply ?? {};\n  }\n}\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport class ServerHeartbeatFailedEvent {\n  /** The connection id for the command */\n  connectionId: string;\n  /** The execution time of the event in ms */\n  duration: number;\n  /** The command failure */\n  failure: Error;\n\n  /** @internal */\n  constructor(connectionId: string, duration: number, failure: Error) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}