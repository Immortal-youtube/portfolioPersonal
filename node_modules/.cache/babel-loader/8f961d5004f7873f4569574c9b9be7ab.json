{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsOperation = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = options ?? {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  execute(server, session, callback) {\n    return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), callback);\n  }\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n\n\n  generateCommand(wireVersion) {\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    }; // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return command;\n  }\n\n}\n\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":";;;;;;;AAIA;;AACA;;AACA;AAYA;;;AACA,MAAaA,wBAAb,SAA8CC,0BAA9C,CAAwE;EAQtEC,YAAYC,EAAZ,EAAoBC,MAApB,EAAsCC,OAAtC,EAAsE;IACpE,MAAMF,EAAN,EAAUE,OAAV;IAEA,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;IACA,KAAKF,EAAL,GAAUA,EAAV;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKE,QAAL,GAAgB,CAAC,CAAC,KAAKD,OAAL,CAAaC,QAA/B;IACA,KAAKC,qBAAL,GAA6B,CAAC,CAAC,KAAKF,OAAL,CAAaE,qBAA5C;;IAEA,IAAI,OAAO,KAAKF,OAAL,CAAaG,SAApB,KAAkC,QAAtC,EAAgD;MAC9C,KAAKA,SAAL,GAAiB,KAAKH,OAAL,CAAaG,SAA9B;IACD;EACF;;EAEQC,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGc;IAE5B,OAAO,MAAMC,cAAN,CACLH,MADK,EAELC,OAFK,EAGL,KAAKG,eAAL,CAAqB,4BAAeJ,MAAf,CAArB,CAHK,EAILE,QAJK,CAAP;EAMD;EAED;;;EACAE,eAAe,CAACC,WAAD,EAAoB;IACjC,MAAMC,OAAO,GAAa;MACxBC,eAAe,EAAE,CADO;MAExBb,MAAM,EAAE,KAAKA,MAFW;MAGxBc,MAAM,EAAE,KAAKV,SAAL,GAAiB;QAAEA,SAAS,EAAE,KAAKA;MAAlB,CAAjB,GAAiD,EAHjC;MAIxBF,QAAQ,EAAE,KAAKA,QAJS;MAKxBC,qBAAqB,EAAE,KAAKA;IALJ,CAA1B,CADiC,CASjC;IACA;;IACA,IAAIQ,WAAW,IAAI,CAAf,IAAoB,KAAKV,OAAL,CAAac,OAAb,KAAyBC,SAAjD,EAA4D;MAC1DJ,OAAO,CAACG,OAAR,GAAkB,KAAKd,OAAL,CAAac,OAA/B;IACD;;IAED,OAAOH,OAAP;EACD;;AApDqE;;AAAxEK;AAmEA,+BAAcrB,wBAAd,EAAwC,CACtCsB,mBAAOC,cAD+B,EAEtCD,mBAAOE,SAF+B,EAGtCF,mBAAOG,eAH+B,CAAxC","names":["ListCollectionsOperation","command_1","constructor","db","filter","options","nameOnly","authorizedCollections","batchSize","execute","server","session","callback","executeCommand","generateCommand","wireVersion","command","listCollections","cursor","comment","undefined","exports","operation_1","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\list_collections.ts"],"sourcesContent":["import type { Binary, Document } from '../bson';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface ListCollectionsOptions extends CommandOperationOptions {\n  /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\n  nameOnly?: boolean;\n  /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\n  authorizedCollections?: boolean;\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListCollectionsOperation extends CommandOperation<string[]> {\n  override options: ListCollectionsOptions;\n  db: Db;\n  filter: Document;\n  nameOnly: boolean;\n  authorizedCollections: boolean;\n  batchSize?: number;\n\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions) {\n    super(db, options);\n\n    this.options = options ?? {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string[]>\n  ): void {\n    return super.executeCommand(\n      server,\n      session,\n      this.generateCommand(maxWireVersion(server)),\n      callback\n    );\n  }\n\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n  generateCommand(wireVersion: number): Document {\n    const command: Document = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return command;\n  }\n}\n\n/** @public */\nexport interface CollectionInfo extends Document {\n  name: string;\n  type?: string;\n  options?: Document;\n  info?: {\n    readOnly?: false;\n    uuid?: Binary;\n  };\n  idIndex?: Document;\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script"}