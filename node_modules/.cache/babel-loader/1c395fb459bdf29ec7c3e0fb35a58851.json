{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RawSha256 = void 0;\n\nvar constants_1 = require(\"./constants\");\n/**\n * @internal\n */\n\n\nvar RawSha256 =\n/** @class */\nfunction () {\n  function RawSha256() {\n    this.state = Int32Array.from(constants_1.INIT);\n    this.temp = new Int32Array(64);\n    this.buffer = new Uint8Array(64);\n    this.bufferLength = 0;\n    this.bytesHashed = 0;\n    /**\n     * @internal\n     */\n\n    this.finished = false;\n  }\n\n  RawSha256.prototype.update = function (data) {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    var position = 0;\n    var byteLength = data.byteLength;\n    this.bytesHashed += byteLength;\n\n    if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n\n      if (this.bufferLength === constants_1.BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  };\n\n  RawSha256.prototype.digest = function () {\n    if (!this.finished) {\n      var bitsHashed = this.bytesHashed * 8;\n      var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n      var undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80); // Ensure the final block has enough room for the hashed length\n\n      if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {\n        for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n\n      bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);\n      bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);\n      this.hashBuffer();\n      this.finished = true;\n    } // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n\n\n    var out = new Uint8Array(constants_1.DIGEST_LENGTH);\n\n    for (var i = 0; i < 8; i++) {\n      out[i * 4] = this.state[i] >>> 24 & 0xff;\n      out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n      out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n      out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n    }\n\n    return out;\n  };\n\n  RawSha256.prototype.hashBuffer = function () {\n    var _a = this,\n        buffer = _a.buffer,\n        state = _a.state;\n\n    var state0 = state[0],\n        state1 = state[1],\n        state2 = state[2],\n        state3 = state[3],\n        state4 = state[4],\n        state5 = state[5],\n        state6 = state[6],\n        state7 = state[7];\n\n    for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;\n      } else {\n        var u = this.temp[i - 2];\n        var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;\n        u = this.temp[i - 15];\n        var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;\n        this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);\n      }\n\n      var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;\n      var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = state3 + t1 | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = t1 + t2 | 0;\n    }\n\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  };\n\n  return RawSha256;\n}();\n\nexports.RawSha256 = RawSha256;","map":{"version":3,"mappings":"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","names":["Int32Array","from","constants_1","Uint8Array","RawSha256","data","finished","Error","position","bytesHashed","byteLength","buffer","bufferLength","hashBuffer","bitsHashed","bufferView","DataView","byteOffset","undecoratedLength","setUint8","i","setUint32","Math","floor","out","state","state0","state1","state2","state3","state4","state5","state6","state7","temp","u","t1_1","t2_1","t1","t2","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\@aws-crypto\\sha256-js\\src\\RawSha256.ts"],"sourcesContent":["import {\n  BLOCK_SIZE,\n  DIGEST_LENGTH,\n  INIT,\n  KEY,\n  MAX_HASHABLE_LENGTH\n} from \"./constants\";\n\n/**\n * @internal\n */\nexport class RawSha256 {\n  private state: Int32Array = Int32Array.from(INIT);\n  private temp: Int32Array = new Int32Array(64);\n  private buffer: Uint8Array = new Uint8Array(64);\n  private bufferLength: number = 0;\n  private bytesHashed: number = 0;\n\n  /**\n   * @internal\n   */\n  finished: boolean = false;\n\n  update(data: Uint8Array): void {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    let position = 0;\n    let { byteLength } = data;\n    this.bytesHashed += byteLength;\n\n    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  }\n\n  digest(): Uint8Array {\n    if (!this.finished) {\n      const bitsHashed = this.bytesHashed * 8;\n      const bufferView = new DataView(\n        this.buffer.buffer,\n        this.buffer.byteOffset,\n        this.buffer.byteLength\n      );\n\n      const undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(\n        BLOCK_SIZE - 8,\n        Math.floor(bitsHashed / 0x100000000),\n        true\n      );\n      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);\n\n      this.hashBuffer();\n\n      this.finished = true;\n    }\n\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    const out = new Uint8Array(DIGEST_LENGTH);\n    for (let i = 0; i < 8; i++) {\n      out[i * 4] = (this.state[i] >>> 24) & 0xff;\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n    }\n\n    return out;\n  }\n\n  private hashBuffer(): void {\n    const { buffer, state } = this;\n\n    let state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n\n    for (let i = 0; i < BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] =\n          ((buffer[i * 4] & 0xff) << 24) |\n          ((buffer[i * 4 + 1] & 0xff) << 16) |\n          ((buffer[i * 4 + 2] & 0xff) << 8) |\n          (buffer[i * 4 + 3] & 0xff);\n      } else {\n        let u = this.temp[i - 2];\n        const t1 =\n          ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n\n        u = this.temp[i - 15];\n        const t2 =\n          ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n\n        this.temp[i] =\n          ((t1 + this.temp[i - 7]) | 0) + ((t2 + this.temp[i - 16]) | 0);\n      }\n\n      const t1 =\n        ((((((state4 >>> 6) | (state4 << 26)) ^\n          ((state4 >>> 11) | (state4 << 21)) ^\n          ((state4 >>> 25) | (state4 << 7))) +\n          ((state4 & state5) ^ (~state4 & state6))) |\n          0) +\n          ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) |\n        0;\n\n      const t2 =\n        ((((state0 >>> 2) | (state0 << 30)) ^\n          ((state0 >>> 13) | (state0 << 19)) ^\n          ((state0 >>> 22) | (state0 << 10))) +\n          ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n        0;\n\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = (state3 + t1) | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = (t1 + t2) | 0;\n    }\n\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}