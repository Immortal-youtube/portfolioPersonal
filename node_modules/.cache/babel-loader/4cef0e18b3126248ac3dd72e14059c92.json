{"ast":null,"code":"import { AssumeRoleCommand, STSClient } from \"@aws-sdk/client-sts\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromTemporaryCredentials = options => {\n  let stsClient;\n  return async () => {\n    const params = { ...options.params,\n      RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now()\n    };\n\n    if (params?.SerialNumber) {\n      if (!options.mfaCodeProvider) {\n        throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n      }\n\n      params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n    }\n\n    if (!stsClient) stsClient = new STSClient({ ...options.clientConfig,\n      credentials: options.masterCredentials\n    });\n\n    if (options.clientPlugins) {\n      for (const plugin of options.clientPlugins) {\n        stsClient.middlewareStack.use(plugin);\n      }\n    }\n\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};","map":{"version":3,"names":["AssumeRoleCommand","STSClient","CredentialsProviderError","fromTemporaryCredentials","options","stsClient","params","RoleSessionName","Date","now","SerialNumber","mfaCodeProvider","TokenCode","clientConfig","credentials","masterCredentials","clientPlugins","plugin","middlewareStack","use","Credentials","send","AccessKeyId","SecretAccessKey","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js"],"sourcesContent":["import { AssumeRoleCommand, STSClient } from \"@aws-sdk/client-sts\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromTemporaryCredentials = (options) => {\n    let stsClient;\n    return async () => {\n        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now() };\n        if (params?.SerialNumber) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n            }\n            params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n        }\n        if (!stsClient)\n            stsClient = new STSClient({ ...options.clientConfig, credentials: options.masterCredentials });\n        if (options.clientPlugins) {\n            for (const plugin of options.clientPlugins) {\n                stsClient.middlewareStack.use(plugin);\n            }\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,SAA5B,QAA6C,qBAA7C;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,OAAO,MAAMC,wBAAwB,GAAIC,OAAD,IAAa;EACjD,IAAIC,SAAJ;EACA,OAAO,YAAY;IACf,MAAMC,MAAM,GAAG,EAAE,GAAGF,OAAO,CAACE,MAAb;MAAqBC,eAAe,EAAEH,OAAO,CAACE,MAAR,CAAeC,eAAf,IAAkC,gBAAgBC,IAAI,CAACC,GAAL;IAAxF,CAAf;;IACA,IAAIH,MAAM,EAAEI,YAAZ,EAA0B;MACtB,IAAI,CAACN,OAAO,CAACO,eAAb,EAA8B;QAC1B,MAAM,IAAIT,wBAAJ,CAA8B,4DAAD,GAAgE,yCAA7F,EAAuI,KAAvI,CAAN;MACH;;MACDI,MAAM,CAACM,SAAP,GAAmB,MAAMR,OAAO,CAACO,eAAR,CAAwBL,MAAM,EAAEI,YAAhC,CAAzB;IACH;;IACD,IAAI,CAACL,SAAL,EACIA,SAAS,GAAG,IAAIJ,SAAJ,CAAc,EAAE,GAAGG,OAAO,CAACS,YAAb;MAA2BC,WAAW,EAAEV,OAAO,CAACW;IAAhD,CAAd,CAAZ;;IACJ,IAAIX,OAAO,CAACY,aAAZ,EAA2B;MACvB,KAAK,MAAMC,MAAX,IAAqBb,OAAO,CAACY,aAA7B,EAA4C;QACxCX,SAAS,CAACa,eAAV,CAA0BC,GAA1B,CAA8BF,MAA9B;MACH;IACJ;;IACD,MAAM;MAAEG;IAAF,IAAkB,MAAMf,SAAS,CAACgB,IAAV,CAAe,IAAIrB,iBAAJ,CAAsBM,MAAtB,CAAf,CAA9B;;IACA,IAAI,CAACc,WAAD,IAAgB,CAACA,WAAW,CAACE,WAA7B,IAA4C,CAACF,WAAW,CAACG,eAA7D,EAA8E;MAC1E,MAAM,IAAIrB,wBAAJ,CAA8B,uDAAsDI,MAAM,CAACkB,OAAQ,EAAnG,CAAN;IACH;;IACD,OAAO;MACHC,WAAW,EAAEL,WAAW,CAACE,WADtB;MAEHI,eAAe,EAAEN,WAAW,CAACG,eAF1B;MAGHI,YAAY,EAAEP,WAAW,CAACQ,YAHvB;MAIHC,UAAU,EAAET,WAAW,CAACU;IAJrB,CAAP;EAMH,CAzBD;AA0BH,CA5BM"},"metadata":{},"sourceType":"module"}