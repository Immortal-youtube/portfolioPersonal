{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidateCollectionOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst command_1 = require(\"./command\");\n/** @internal */\n\n\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    const command = {\n      validate: collectionName\n    };\n    const keys = Object.keys(options);\n\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options);\n    this.options = options;\n    this.command = command;\n    this.collectionName = collectionName;\n  }\n\n  execute(server, session, callback) {\n    const collectionName = this.collectionName;\n    super.executeCommand(server, session, this.command, (err, doc) => {\n      if (err != null) return callback(err); // TODO(NODE-3483): Replace these with MongoUnexpectedServerResponseError\n\n      if (doc.ok === 0) return callback(new error_1.MongoRuntimeError('Error with validate command'));\n      if (doc.result != null && typeof doc.result !== 'string') return callback(new error_1.MongoRuntimeError('Error with validation data'));\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null) return callback(new error_1.MongoRuntimeError(`Invalid collection ${collectionName}`));\n      if (doc.valid != null && !doc.valid) return callback(new error_1.MongoRuntimeError(`Invalid collection ${collectionName}`));\n      return callback(undefined, doc);\n    });\n  }\n\n}\n\nexports.ValidateCollectionOperation = ValidateCollectionOperation;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAIA;AAQA;;;AACA,MAAaA,2BAAb,SAAiDC,0BAAjD,CAA2E;EAKzEC,YAAYC,KAAZ,EAA0BC,cAA1B,EAAkDC,OAAlD,EAAoF;IAClF;IACA,MAAMC,OAAO,GAAa;MAAEC,QAAQ,EAAEH;IAAZ,CAA1B;IACA,MAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,OAAZ,CAAb;;IACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAID,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,OAArC,EAA8CG,IAAI,CAACE,CAAD,CAAlD,KAA0DF,IAAI,CAACE,CAAD,CAAJ,KAAY,SAA1E,EAAqF;QACnFJ,OAAO,CAACE,IAAI,CAACE,CAAD,CAAL,CAAP,GAAoBL,OAAoB,CAACG,IAAI,CAACE,CAAD,CAAL,CAAxC;MACD;IACF;;IAED,MAAMP,KAAK,CAACY,CAAN,CAAQC,EAAd,EAAkBX,OAAlB;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKF,cAAL,GAAsBA,cAAtB;EACD;;EAEQa,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGc;IAE5B,MAAMhB,cAAc,GAAG,KAAKA,cAA5B;IAEA,MAAMiB,cAAN,CAAqBH,MAArB,EAA6BC,OAA7B,EAAsC,KAAKb,OAA3C,EAAoD,CAACgB,GAAD,EAAMC,GAAN,KAAa;MAC/D,IAAID,GAAG,IAAI,IAAX,EAAiB,OAAOF,QAAQ,CAACE,GAAD,CAAf,CAD8C,CAG/D;;MACA,IAAIC,GAAG,CAACC,EAAJ,KAAW,CAAf,EAAkB,OAAOJ,QAAQ,CAAC,IAAIK,yBAAJ,CAAsB,6BAAtB,CAAD,CAAf;MAClB,IAAIF,GAAG,CAACG,MAAJ,IAAc,IAAd,IAAsB,OAAOH,GAAG,CAACG,MAAX,KAAsB,QAAhD,EACE,OAAON,QAAQ,CAAC,IAAIK,yBAAJ,CAAsB,4BAAtB,CAAD,CAAf;MACF,IAAIF,GAAG,CAACG,MAAJ,IAAc,IAAd,IAAsBH,GAAG,CAACG,MAAJ,CAAWC,KAAX,CAAiB,mBAAjB,KAAyC,IAAnE,EACE,OAAOP,QAAQ,CAAC,IAAIK,yBAAJ,CAAsB,sBAAsBrB,cAAc,EAA1D,CAAD,CAAf;MACF,IAAImB,GAAG,CAACK,KAAJ,IAAa,IAAb,IAAqB,CAACL,GAAG,CAACK,KAA9B,EACE,OAAOR,QAAQ,CAAC,IAAIK,yBAAJ,CAAsB,sBAAsBrB,cAAc,EAA1D,CAAD,CAAf;MAEF,OAAOgB,QAAQ,CAACS,SAAD,EAAYN,GAAZ,CAAf;IACD,CAbD;EAcD;;AA1CwE;;AAA3EO","names":["ValidateCollectionOperation","command_1","constructor","admin","collectionName","options","command","validate","keys","Object","i","length","prototype","hasOwnProperty","call","s","db","execute","server","session","callback","executeCommand","err","doc","ok","error_1","result","match","valid","undefined","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\validate_collection.ts"],"sourcesContent":["import type { Admin } from '../admin';\nimport type { Document } from '../bson';\nimport { MongoRuntimeError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\n\n/** @public */\nexport interface ValidateCollectionOptions extends CommandOperationOptions {\n  /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */\n  background?: boolean;\n}\n\n/** @internal */\nexport class ValidateCollectionOperation extends CommandOperation<Document> {\n  override options: ValidateCollectionOptions;\n  collectionName: string;\n  command: Document;\n\n  constructor(admin: Admin, collectionName: string, options: ValidateCollectionOptions) {\n    // Decorate command with extra options\n    const command: Document = { validate: collectionName };\n    const keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = (options as Document)[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options);\n    this.options = options;\n    this.command = command;\n    this.collectionName = collectionName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const collectionName = this.collectionName;\n\n    super.executeCommand(server, session, this.command, (err, doc) => {\n      if (err != null) return callback(err);\n\n      // TODO(NODE-3483): Replace these with MongoUnexpectedServerResponseError\n      if (doc.ok === 0) return callback(new MongoRuntimeError('Error with validate command'));\n      if (doc.result != null && typeof doc.result !== 'string')\n        return callback(new MongoRuntimeError('Error with validation data'));\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n        return callback(new MongoRuntimeError(`Invalid collection ${collectionName}`));\n      if (doc.valid != null && !doc.valid)\n        return callback(new MongoRuntimeError(`Invalid collection ${collectionName}`));\n\n      return callback(undefined, doc);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}