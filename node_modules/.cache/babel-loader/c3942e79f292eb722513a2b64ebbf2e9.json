{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst explain_1 = require(\"../explain\");\n\nconst read_concern_1 = require(\"../read_concern\");\n\nconst server_selection_1 = require(\"../sdam/server_selection\");\n\nconst utils_1 = require(\"../utils\");\n\nconst write_concern_1 = require(\"../write_concern\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass CommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options ?? {}; // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n\n    const dbNameOverride = options?.dbName || options?.authdb;\n\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if (options?.explain != null) {\n      throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n\n    return true;\n  }\n\n  executeCommand(server, session, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, {\n        writeConcern: this.writeConcern\n      });\n    }\n\n    if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n      Object.assign(cmd, {\n        collation: options.collation\n      });\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n\n}\n\nexports.CommandOperation = CommandOperation;","map":{"version":3,"mappings":"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","names":["CommandOperation","operation_1","constructor","parent","options","dbNameOverride","dbName","authdb","ns","utils_1","s","namespace","withCollection","readConcern","read_concern_1","fromOptions","writeConcern","write_concern_1","hasAspect","EXPLAINABLE","explain","explain_1","error_1","canRetryWrite","executeCommand","server","session","cmd","callback","bsonOptions","readPreference","serverWireVersion","inTransaction","Object","assign","trySecondaryWrite","server_selection_1","omitReadPreference","WRITE_OPERATION","collation","SKIP_COLLATION","maxTimeMS","command","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport { MongoInvalidArgumentError } from '../error';\nimport { Explain, ExplainOptions } from '../explain';\nimport { ReadConcern } from '../read_concern';\nimport type { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\nimport type { ClientSession } from '../sessions';\nimport {\n  Callback,\n  commandSupportsReadConcern,\n  decorateWithExplain,\n  maxWireVersion,\n  MongoDBNamespace\n} from '../utils';\nimport { WriteConcern, WriteConcernOptions } from '../write_concern';\nimport type { ReadConcernLike } from './../read_concern';\nimport { AbstractOperation, Aspect, OperationOptions } from './operation';\n\n/** @public */\nexport interface CollationOptions {\n  locale: string;\n  caseLevel?: boolean;\n  caseFirst?: string;\n  strength?: number;\n  numericOrdering?: boolean;\n  alternate?: string;\n  maxVariable?: string;\n  backwards?: boolean;\n  normalization?: boolean;\n}\n\n/** @public */\nexport interface CommandOperationOptions\n  extends OperationOptions,\n    WriteConcernOptions,\n    ExplainOptions {\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** Collation */\n  collation?: CollationOptions;\n  maxTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n\n  // Admin command overrides.\n  dbName?: string;\n  authdb?: string;\n  noResponse?: boolean;\n}\n\n/** @internal */\nexport interface OperationParent {\n  s: { namespace: MongoDBNamespace };\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  readPreference?: ReadPreference;\n  bsonOptions?: BSONSerializeOptions;\n}\n\n/** @internal */\nexport abstract class CommandOperation<T> extends AbstractOperation<T> {\n  override options: CommandOperationOptions;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  explain?: Explain;\n\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\n    super(options);\n    this.options = options ?? {};\n\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent\n        ? parent.s.namespace.withCollection('$cmd')\n        : new MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = ReadConcern.fromOptions(options);\n    this.writeConcern = WriteConcern.fromOptions(options);\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n    } else if (options?.explain != null) {\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  override get canRetryWrite(): boolean {\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n    return true;\n  }\n\n  executeCommand(\n    server: Server,\n    session: ClientSession | undefined,\n    cmd: Document,\n    callback: Callback\n  ): void {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\n      Object.assign(cmd, { writeConcern: this.writeConcern });\n    }\n\n    if (\n      options.collation &&\n      typeof options.collation === 'object' &&\n      !this.hasAspect(Aspect.SKIP_COLLATION)\n    ) {\n      Object.assign(cmd, { collation: options.collation });\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\n      cmd = decorateWithExplain(cmd, this.explain);\n    }\n\n    server.command(this.ns, cmd, options, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}