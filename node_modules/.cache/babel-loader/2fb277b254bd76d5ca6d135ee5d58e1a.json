{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommaAndColonSeparatedRecord = exports.ConnectionString = exports.redactConnectionString = void 0;\n\nconst whatwg_url_1 = require(\"whatwg-url\");\n\nconst redact_1 = require(\"./redact\");\n\nObject.defineProperty(exports, \"redactConnectionString\", {\n  enumerable: true,\n  get: function () {\n    return redact_1.redactConnectionString;\n  }\n});\nconst DUMMY_HOSTNAME = '__this_is_a_placeholder__';\n\nfunction connectionStringHasValidScheme(connectionString) {\n  return connectionString.startsWith('mongodb://') || connectionString.startsWith('mongodb+srv://');\n}\n\nconst HOSTS_REGEX = /^(?<protocol>[^/]+):\\/\\/(?:(?<username>[^:@]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]*)(?<rest>.*)/;\n\nclass CaseInsensitiveMap extends Map {\n  delete(name) {\n    return super.delete(this._normalizeKey(name));\n  }\n\n  get(name) {\n    return super.get(this._normalizeKey(name));\n  }\n\n  has(name) {\n    return super.has(this._normalizeKey(name));\n  }\n\n  set(name, value) {\n    return super.set(this._normalizeKey(name), value);\n  }\n\n  _normalizeKey(name) {\n    name = `${name}`;\n\n    for (const key of this.keys()) {\n      if (key.toLowerCase() === name.toLowerCase()) {\n        name = key;\n        break;\n      }\n    }\n\n    return name;\n  }\n\n}\n\nfunction caseInsenstiveURLSearchParams(Ctor) {\n  return class CaseInsenstiveURLSearchParams extends Ctor {\n    append(name, value) {\n      return super.append(this._normalizeKey(name), value);\n    }\n\n    delete(name) {\n      return super.delete(this._normalizeKey(name));\n    }\n\n    get(name) {\n      return super.get(this._normalizeKey(name));\n    }\n\n    getAll(name) {\n      return super.getAll(this._normalizeKey(name));\n    }\n\n    has(name) {\n      return super.has(this._normalizeKey(name));\n    }\n\n    set(name, value) {\n      return super.set(this._normalizeKey(name), value);\n    }\n\n    keys() {\n      return super.keys();\n    }\n\n    values() {\n      return super.values();\n    }\n\n    entries() {\n      return super.entries();\n    }\n\n    [Symbol.iterator]() {\n      return super[Symbol.iterator]();\n    }\n\n    _normalizeKey(name) {\n      return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n    }\n\n  };\n}\n\nclass URLWithoutHost extends whatwg_url_1.URL {}\n\nclass MongoParseError extends Error {\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nclass ConnectionString extends URLWithoutHost {\n  constructor(uri) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const {\n      looseValidation\n    } = options;\n\n    if (!looseValidation && !connectionStringHasValidScheme(uri)) {\n      throw new MongoParseError('Invalid scheme, expected connection string to start with \"mongodb://\" or \"mongodb+srv://\"');\n    }\n\n    const match = uri.match(HOSTS_REGEX);\n\n    if (!match) {\n      throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n    }\n\n    const {\n      protocol,\n      username,\n      password,\n      hosts,\n      rest\n    } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n\n    if (!looseValidation) {\n      if (!protocol || !hosts) {\n        throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n      }\n\n      try {\n        decodeURIComponent(username !== null && username !== void 0 ? username : '');\n        decodeURIComponent(password !== null && password !== void 0 ? password : '');\n      } catch (err) {\n        throw new MongoParseError(err.message);\n      }\n\n      const illegalCharacters = /[:/?#[\\]@]/gi;\n\n      if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n        throw new MongoParseError(`Username contains unescaped characters ${username}`);\n      }\n\n      if (!username || !password) {\n        const uriWithoutProtocol = uri.replace(`${protocol}://`, '');\n\n        if (uriWithoutProtocol.startsWith('@') || uriWithoutProtocol.startsWith(':')) {\n          throw new MongoParseError('URI contained empty userinfo section');\n        }\n      }\n\n      if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n        throw new MongoParseError('Password contains unescaped characters');\n      }\n    }\n\n    let authString = '';\n    if (typeof username === 'string') authString += username;\n    if (typeof password === 'string') authString += `:${password}`;\n    if (authString) authString += '@';\n\n    try {\n      super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n    } catch (err) {\n      if (looseValidation) {\n        new ConnectionString(uri, { ...options,\n          looseValidation: false\n        });\n      }\n\n      if (typeof err.message === 'string') {\n        err.message = err.message.replace(DUMMY_HOSTNAME, hosts);\n      }\n\n      throw err;\n    }\n\n    this._hosts = hosts.split(',');\n\n    if (!looseValidation) {\n      if (this.isSRV && this.hosts.length !== 1) {\n        throw new MongoParseError('mongodb+srv URI cannot have multiple service names');\n      }\n\n      if (this.isSRV && this.hosts.some(host => host.includes(':'))) {\n        throw new MongoParseError('mongodb+srv URI cannot have port number');\n      }\n    }\n\n    if (!this.pathname) {\n      this.pathname = '/';\n    }\n\n    Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n  }\n\n  get host() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set host(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get hostname() {\n    return DUMMY_HOSTNAME;\n  }\n\n  set hostname(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get port() {\n    return '';\n  }\n\n  set port(_ignored) {\n    throw new Error('No single host for connection string');\n  }\n\n  get href() {\n    return this.toString();\n  }\n\n  set href(_ignored) {\n    throw new Error('Cannot set href for connection strings');\n  }\n\n  get isSRV() {\n    return this.protocol.includes('srv');\n  }\n\n  get hosts() {\n    return this._hosts;\n  }\n\n  set hosts(list) {\n    this._hosts = list;\n  }\n\n  toString() {\n    return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(','));\n  }\n\n  clone() {\n    return new ConnectionString(this.toString(), {\n      looseValidation: true\n    });\n  }\n\n  redact(options) {\n    return (0, redact_1.redactValidConnectionString)(this, options);\n  }\n\n  typedSearchParams() {\n    const sametype = false && new (caseInsenstiveURLSearchParams(whatwg_url_1.URLSearchParams))();\n    return this.searchParams;\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    const {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    } = this;\n    return {\n      href,\n      origin,\n      protocol,\n      username,\n      password,\n      hosts,\n      pathname,\n      search,\n      searchParams,\n      hash\n    };\n  }\n\n}\n\nexports.ConnectionString = ConnectionString;\n\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n  constructor(from) {\n    super();\n\n    for (const entry of (from !== null && from !== void 0 ? from : '').split(',')) {\n      if (!entry) continue;\n      const colonIndex = entry.indexOf(':');\n\n      if (colonIndex === -1) {\n        this.set(entry, '');\n      } else {\n        this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n      }\n    }\n  }\n\n  toString() {\n    return [...this].map(entry => entry.join(':')).join(',');\n  }\n\n}\n\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\nexports.default = ConnectionString;","map":{"version":3,"mappings":"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","names":["Object","enumerable","get","redact_1","DUMMY_HOSTNAME","connectionStringHasValidScheme","connectionString","startsWith","HOSTS_REGEX","CaseInsensitiveMap","Map","delete","name","_normalizeKey","has","set","value","key","keys","toLowerCase","caseInsenstiveURLSearchParams","Ctor","CaseInsenstiveURLSearchParams","append","getAll","values","entries","Symbol","iterator","prototype","call","URLWithoutHost","whatwg_url_1","MongoParseError","Error","ConnectionString","constructor","uri","options","looseValidation","match","protocol","username","password","hosts","rest","groups","_a","decodeURIComponent","err","message","illegalCharacters","uriWithoutProtocol","replace","authString","_hosts","split","isSRV","length","some","host","includes","pathname","setPrototypeOf","searchParams","_ignored","hostname","port","href","toString","list","join","clone","redact","typedSearchParams","sametype","for","origin","search","hash","exports","CommaAndColonSeparatedRecord","from","entry","colonIndex","indexOf","slice","map"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}