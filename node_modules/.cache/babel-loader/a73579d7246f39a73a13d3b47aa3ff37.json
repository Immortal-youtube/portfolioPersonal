{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\"); // The default Buffer size if one is not provided.\n\n\nconst DEFAULT_SMARTBUFFER_SIZE = 4096; // The default string encoding to use for reading/writing strings.\n\nconst DEFAULT_SMARTBUFFER_ENCODING = 'utf8';\n\nclass SmartBuffer {\n  /**\n   * Creates a new SmartBuffer instance.\n   *\n   * @param options { SmartBufferOptions } The SmartBufferOptions to apply to this instance.\n   */\n  constructor(options) {\n    this.length = 0;\n    this._encoding = DEFAULT_SMARTBUFFER_ENCODING;\n    this._writeOffset = 0;\n    this._readOffset = 0;\n\n    if (SmartBuffer.isSmartBufferOptions(options)) {\n      // Checks for encoding\n      if (options.encoding) {\n        utils_1.checkEncoding(options.encoding);\n        this._encoding = options.encoding;\n      } // Checks for initial size length\n\n\n      if (options.size) {\n        if (utils_1.isFiniteInteger(options.size) && options.size > 0) {\n          this._buff = Buffer.allocUnsafe(options.size);\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_SIZE);\n        } // Check for initial Buffer\n\n      } else if (options.buff) {\n        if (Buffer.isBuffer(options.buff)) {\n          this._buff = options.buff;\n          this.length = options.buff.length;\n        } else {\n          throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_BUFFER);\n        }\n      } else {\n        this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n      }\n    } else {\n      // If something was passed but it's not a SmartBufferOptions object\n      if (typeof options !== 'undefined') {\n        throw new Error(utils_1.ERRORS.INVALID_SMARTBUFFER_OBJECT);\n      } // Otherwise default to sane options\n\n\n      this._buff = Buffer.allocUnsafe(DEFAULT_SMARTBUFFER_SIZE);\n    }\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided internal Buffer size and optional encoding.\n   *\n   * @param size { Number } The size of the internal Buffer.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n\n\n  static fromSize(size, encoding) {\n    return new this({\n      size: size,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided Buffer and optional encoding.\n   *\n   * @param buffer { Buffer } The Buffer to use as the internal Buffer value.\n   * @param encoding { String } The BufferEncoding to use for strings.\n   *\n   * @return { SmartBuffer }\n   */\n\n\n  static fromBuffer(buff, encoding) {\n    return new this({\n      buff: buff,\n      encoding: encoding\n    });\n  }\n  /**\n   * Creates a new SmartBuffer instance with the provided SmartBufferOptions options.\n   *\n   * @param options { SmartBufferOptions } The options to use when creating the SmartBuffer instance.\n   */\n\n\n  static fromOptions(options) {\n    return new this(options);\n  }\n  /**\n   * Type checking function that determines if an object is a SmartBufferOptions object.\n   */\n\n\n  static isSmartBufferOptions(options) {\n    const castOptions = options;\n    return castOptions && (castOptions.encoding !== undefined || castOptions.size !== undefined || castOptions.buff !== undefined);\n  } // Signed integers\n\n  /**\n   * Reads an Int8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt8, 1, offset);\n  }\n  /**\n   * Reads an Int16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16BE, 2, offset);\n  }\n  /**\n   * Reads an Int16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt16LE, 2, offset);\n  }\n  /**\n   * Reads an Int32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32BE, 4, offset);\n  }\n  /**\n   * Reads an Int32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, offset);\n  }\n  /**\n   * Writes an Int8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt8(value, offset) {\n    this._writeNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n\n    return this;\n  }\n  /**\n   * Inserts an Int8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt8, 1, value, offset);\n  }\n  /**\n   * Writes an Int16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an Int16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an Int16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an Int32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an Int32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an Int32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigInt64BE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { BigInt } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a Int64LE value at the given offset value.\n   *\n   * @param value { BigInt } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, value, offset);\n  } // Unsigned Integers\n\n  /**\n   * Reads an UInt8 value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt8(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt8, 1, offset);\n  }\n  /**\n   * Reads an UInt16BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt16BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, offset);\n  }\n  /**\n   * Reads an UInt16LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt16LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, offset);\n  }\n  /**\n   * Reads an UInt32BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt32BE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, offset);\n  }\n  /**\n   * Reads an UInt32LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readUInt32LE(offset) {\n    return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, offset);\n  }\n  /**\n   * Reads a BigUInt64BE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigUInt64BE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64BE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, offset);\n  }\n  /**\n   * Reads a BigUInt64LE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { BigInt }\n   */\n\n\n  readBigUInt64LE(offset) {\n    utils_1.bigIntAndBufferInt64Check('readBigUInt64LE');\n    return this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, offset);\n  }\n  /**\n   * Writes an UInt8 value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt8(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Inserts an UInt8 value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt8(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, value, offset);\n  }\n  /**\n   * Writes an UInt16BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt16BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt16BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt16LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt16LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Inserts an UInt16LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt16LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, value, offset);\n  }\n  /**\n   * Writes an UInt32BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt32BE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt32BE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, value, offset);\n  }\n  /**\n   * Writes an UInt32LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeUInt32LE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Inserts an UInt32LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertUInt32LE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, value, offset);\n  }\n  /**\n   * Writes a BigUInt64BE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64BE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigUInt64BE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64BE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, value, offset);\n  }\n  /**\n   * Writes a BigUInt64LE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  }\n  /**\n   * Inserts a BigUInt64LE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertBigUInt64LE(value, offset) {\n    utils_1.bigIntAndBufferInt64Check('writeBigUInt64LE');\n    return this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, value, offset);\n  } // Floating Point\n\n  /**\n   * Reads an FloatBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readFloatBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatBE, 4, offset);\n  }\n  /**\n   * Reads an FloatLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readFloatLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readFloatLE, 4, offset);\n  }\n  /**\n   * Writes a FloatBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeFloatBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertFloatBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, value, offset);\n  }\n  /**\n   * Writes a FloatLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeFloatLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  }\n  /**\n   * Inserts a FloatLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertFloatLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, value, offset);\n  } // Double Floating Point\n\n  /**\n   * Reads an DoublEBE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readDoubleBE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, offset);\n  }\n  /**\n   * Reads an DoubleLE value from the current read position or an optionally provided offset.\n   *\n   * @param offset { Number } The offset to read data from (optional)\n   * @return { Number }\n   */\n\n\n  readDoubleLE(offset) {\n    return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, offset);\n  }\n  /**\n   * Writes a DoubleBE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeDoubleBE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleBE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertDoubleBE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, value, offset);\n  }\n  /**\n   * Writes a DoubleLE value to the current write position (or at optional offset).\n   *\n   * @param value { Number } The value to write.\n   * @param offset { Number } The offset to write the value at.\n   *\n   * @return this\n   */\n\n\n  writeDoubleLE(value, offset) {\n    return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  }\n  /**\n   * Inserts a DoubleLE value at the given offset value.\n   *\n   * @param value { Number } The value to insert.\n   * @param offset { Number } The offset to insert the value at.\n   *\n   * @return this\n   */\n\n\n  insertDoubleLE(value, offset) {\n    return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, value, offset);\n  } // Strings\n\n  /**\n   * Reads a String from the current read position.\n   *\n   * @param arg1 { Number | String } The number of bytes to read as a String, or the BufferEncoding to use for\n   *             the string (Defaults to instance level encoding).\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n\n\n  readString(arg1, encoding) {\n    let lengthVal; // Length provided\n\n    if (typeof arg1 === 'number') {\n      utils_1.checkLengthValue(arg1);\n      lengthVal = Math.min(arg1, this.length - this._readOffset);\n    } else {\n      encoding = arg1;\n      lengthVal = this.length - this._readOffset;\n    } // Check encoding\n\n\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    }\n\n    const value = this._buff.slice(this._readOffset, this._readOffset + lengthVal).toString(encoding || this._encoding);\n\n    this._readOffset += lengthVal;\n    return value;\n  }\n  /**\n   * Inserts a String\n   *\n   * @param value { String } The String value to insert.\n   * @param offset { Number } The offset to insert the string at.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  insertString(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleString(value, true, offset, encoding);\n  }\n  /**\n   * Writes a String\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  writeString(value, arg2, encoding) {\n    return this._handleString(value, false, arg2, encoding);\n  }\n  /**\n   * Reads a null-terminated String from the current read position.\n   *\n   * @param encoding { String } The BufferEncoding to use for the string (Defaults to instance level encoding).\n   *\n   * @return { String }\n   */\n\n\n  readStringNT(encoding) {\n    if (typeof encoding !== 'undefined') {\n      utils_1.checkEncoding(encoding);\n    } // Set null character position to the end SmartBuffer instance.\n\n\n    let nullPos = this.length; // Find next null character (if one is not found, default from above is used)\n\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    } // Read string value\n\n\n    const value = this._buff.slice(this._readOffset, nullPos); // Increment internal Buffer read offset\n\n\n    this._readOffset = nullPos + 1;\n    return value.toString(encoding || this._encoding);\n  }\n  /**\n   * Inserts a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  insertStringNT(value, offset, encoding) {\n    utils_1.checkOffsetValue(offset); // Write Values\n\n    this.insertString(value, offset, encoding);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated String.\n   *\n   * @param value { String } The String value to write.\n   * @param arg2 { Number | String } The offset to write the string to, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   *\n   * @return this\n   */\n\n\n  writeStringNT(value, arg2, encoding) {\n    // Write Values\n    this.writeString(value, arg2, encoding);\n    this.writeUInt8(0x00, typeof arg2 === 'number' ? arg2 + value.length : this.writeOffset);\n    return this;\n  } // Buffers\n\n  /**\n   * Reads a Buffer from the internal read position.\n   *\n   * @param length { Number } The length of data to read as a Buffer.\n   *\n   * @return { Buffer }\n   */\n\n\n  readBuffer(length) {\n    if (typeof length !== 'undefined') {\n      utils_1.checkLengthValue(length);\n    }\n\n    const lengthVal = typeof length === 'number' ? length : this.length;\n    const endPoint = Math.min(this.length, this._readOffset + lengthVal); // Read buffer value\n\n    const value = this._buff.slice(this._readOffset, endPoint); // Increment internal Buffer read offset\n\n\n    this._readOffset = endPoint;\n    return value;\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  insertBuffer(value, offset) {\n    utils_1.checkOffsetValue(offset);\n    return this._handleBuffer(value, true, offset);\n  }\n  /**\n   * Writes a Buffer to the current write position.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  writeBuffer(value, offset) {\n    return this._handleBuffer(value, false, offset);\n  }\n  /**\n   * Reads a null-terminated Buffer from the current read poisiton.\n   *\n   * @return { Buffer }\n   */\n\n\n  readBufferNT() {\n    // Set null character position to the end SmartBuffer instance.\n    let nullPos = this.length; // Find next null character (if one is not found, default from above is used)\n\n    for (let i = this._readOffset; i < this.length; i++) {\n      if (this._buff[i] === 0x00) {\n        nullPos = i;\n        break;\n      }\n    } // Read value\n\n\n    const value = this._buff.slice(this._readOffset, nullPos); // Increment internal Buffer read offset\n\n\n    this._readOffset = nullPos + 1;\n    return value;\n  }\n  /**\n   * Inserts a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  insertBufferNT(value, offset) {\n    utils_1.checkOffsetValue(offset); // Write Values\n\n    this.insertBuffer(value, offset);\n    this.insertUInt8(0x00, offset + value.length);\n    return this;\n  }\n  /**\n   * Writes a null-terminated Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   *\n   * @return this\n   */\n\n\n  writeBufferNT(value, offset) {\n    // Checks for valid numberic value;\n    if (typeof offset !== 'undefined') {\n      utils_1.checkOffsetValue(offset);\n    } // Write Values\n\n\n    this.writeBuffer(value, offset);\n    this.writeUInt8(0x00, typeof offset === 'number' ? offset + value.length : this._writeOffset);\n    return this;\n  }\n  /**\n   * Clears the SmartBuffer instance to its original empty state.\n   */\n\n\n  clear() {\n    this._writeOffset = 0;\n    this._readOffset = 0;\n    this.length = 0;\n    return this;\n  }\n  /**\n   * Gets the remaining data left to be read from the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  remaining() {\n    return this.length - this._readOffset;\n  }\n  /**\n   * Gets the current read offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  get readOffset() {\n    return this._readOffset;\n  }\n  /**\n   * Sets the read offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n\n\n  set readOffset(offset) {\n    utils_1.checkOffsetValue(offset); // Check for bounds.\n\n    utils_1.checkTargetOffset(offset, this);\n    this._readOffset = offset;\n  }\n  /**\n   * Gets the current write offset value of the SmartBuffer instance.\n   *\n   * @return { Number }\n   */\n\n\n  get writeOffset() {\n    return this._writeOffset;\n  }\n  /**\n   * Sets the write offset value of the SmartBuffer instance.\n   *\n   * @param offset { Number } - The offset value to set.\n   */\n\n\n  set writeOffset(offset) {\n    utils_1.checkOffsetValue(offset); // Check for bounds.\n\n    utils_1.checkTargetOffset(offset, this);\n    this._writeOffset = offset;\n  }\n  /**\n   * Gets the currently set string encoding of the SmartBuffer instance.\n   *\n   * @return { BufferEncoding } The string Buffer encoding currently set.\n   */\n\n\n  get encoding() {\n    return this._encoding;\n  }\n  /**\n   * Sets the string encoding of the SmartBuffer instance.\n   *\n   * @param encoding { BufferEncoding } The string Buffer encoding to set.\n   */\n\n\n  set encoding(encoding) {\n    utils_1.checkEncoding(encoding);\n    this._encoding = encoding;\n  }\n  /**\n   * Gets the underlying internal Buffer. (This includes unmanaged data in the Buffer)\n   *\n   * @return { Buffer } The Buffer value.\n   */\n\n\n  get internalBuffer() {\n    return this._buff;\n  }\n  /**\n   * Gets the value of the internal managed Buffer (Includes managed data only)\n   *\n   * @param { Buffer }\n   */\n\n\n  toBuffer() {\n    return this._buff.slice(0, this.length);\n  }\n  /**\n   * Gets the String value of the internal managed Buffer\n   *\n   * @param encoding { String } The BufferEncoding to display the Buffer as (defaults to instance level encoding).\n   */\n\n\n  toString(encoding) {\n    const encodingVal = typeof encoding === 'string' ? encoding : this._encoding; // Check for invalid encoding.\n\n    utils_1.checkEncoding(encodingVal);\n    return this._buff.toString(encodingVal, 0, this.length);\n  }\n  /**\n   * Destroys the SmartBuffer instance.\n   */\n\n\n  destroy() {\n    this.clear();\n    return this;\n  }\n  /**\n   * Handles inserting and writing strings.\n   *\n   * @param value { String } The String value to insert.\n   * @param isInsert { Boolean } True if inserting a string, false if writing.\n   * @param arg2 { Number | String } The offset to insert the string at, or the BufferEncoding to use.\n   * @param encoding { String } The BufferEncoding to use for writing strings (defaults to instance encoding).\n   */\n\n\n  _handleString(value, isInsert, arg3, encoding) {\n    let offsetVal = this._writeOffset;\n    let encodingVal = this._encoding; // Check for offset\n\n    if (typeof arg3 === 'number') {\n      offsetVal = arg3; // Check for encoding\n    } else if (typeof arg3 === 'string') {\n      utils_1.checkEncoding(arg3);\n      encodingVal = arg3;\n    } // Check for encoding (third param)\n\n\n    if (typeof encoding === 'string') {\n      utils_1.checkEncoding(encoding);\n      encodingVal = encoding;\n    } // Calculate bytelength of string.\n\n\n    const byteLength = Buffer.byteLength(value, encodingVal); // Ensure there is enough internal Buffer capacity.\n\n    if (isInsert) {\n      this.ensureInsertable(byteLength, offsetVal);\n    } else {\n      this._ensureWriteable(byteLength, offsetVal);\n    } // Write value\n\n\n    this._buff.write(value, offsetVal, byteLength, encodingVal); // Increment internal Buffer write offset;\n\n\n    if (isInsert) {\n      this._writeOffset += byteLength;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof arg3 === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + byteLength);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += byteLength;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Handles writing or insert of a Buffer.\n   *\n   * @param value { Buffer } The Buffer to write.\n   * @param offset { Number } The offset to write the Buffer to.\n   */\n\n\n  _handleBuffer(value, isInsert, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure there is enough internal Buffer capacity.\n\n    if (isInsert) {\n      this.ensureInsertable(value.length, offsetVal);\n    } else {\n      this._ensureWriteable(value.length, offsetVal);\n    } // Write buffer value\n\n\n    value.copy(this._buff, offsetVal); // Increment internal Buffer write offset;\n\n    if (isInsert) {\n      this._writeOffset += value.length;\n    } else {\n      // If an offset was given, check to see if we wrote beyond the current writeOffset.\n      if (typeof offset === 'number') {\n        this._writeOffset = Math.max(this._writeOffset, offsetVal + value.length);\n      } else {\n        // If no offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n        this._writeOffset += value.length;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to read data.\n   *\n   * @param length { Number } The length of the data that needs to be read.\n   * @param offset { Number } The offset of the data that needs to be read.\n   */\n\n\n  ensureReadable(length, offset) {\n    // Offset value defaults to managed read offset.\n    let offsetVal = this._readOffset; // If an offset was provided, use it.\n\n    if (typeof offset !== 'undefined') {\n      // Checks for valid numberic value;\n      utils_1.checkOffsetValue(offset); // Overide with custom offset.\n\n      offsetVal = offset;\n    } // Checks if offset is below zero, or the offset+length offset is beyond the total length of the managed data.\n\n\n    if (offsetVal < 0 || offsetVal + length > this.length) {\n      throw new Error(utils_1.ERRORS.INVALID_READ_BEYOND_BOUNDS);\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to insert data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written.\n   */\n\n\n  ensureInsertable(dataLength, offset) {\n    // Checks for valid numberic value;\n    utils_1.checkOffsetValue(offset); // Ensure there is enough internal Buffer capacity.\n\n    this._ensureCapacity(this.length + dataLength); // If an offset was provided and its not the very end of the buffer, copy data into appropriate location in regards to the offset.\n\n\n    if (offset < this.length) {\n      this._buff.copy(this._buff, offset + dataLength, offset, this._buff.length);\n    } // Adjust tracked smart buffer length\n\n\n    if (offset + dataLength > this.length) {\n      this.length = offset + dataLength;\n    } else {\n      this.length += dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write data.\n   *\n   * @param dataLength { Number } The length of the data that needs to be written.\n   * @param offset { Number } The offset of the data to be written (defaults to writeOffset).\n   */\n\n\n  _ensureWriteable(dataLength, offset) {\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure enough capacity to write data.\n\n    this._ensureCapacity(offsetVal + dataLength); // Adjust SmartBuffer length (if offset + length is larger than managed length, adjust length)\n\n\n    if (offsetVal + dataLength > this.length) {\n      this.length = offsetVal + dataLength;\n    }\n  }\n  /**\n   * Ensures that the internal Buffer is large enough to write at least the given amount of data.\n   *\n   * @param minLength { Number } The minimum length of the data needs to be written.\n   */\n\n\n  _ensureCapacity(minLength) {\n    const oldLength = this._buff.length;\n\n    if (minLength > oldLength) {\n      let data = this._buff;\n      let newLength = oldLength * 3 / 2 + 1;\n\n      if (newLength < minLength) {\n        newLength = minLength;\n      }\n\n      this._buff = Buffer.allocUnsafe(newLength);\n      data.copy(this._buff, 0, 0, oldLength);\n    }\n  }\n  /**\n   * Reads a numeric number value using the provided function.\n   *\n   * @typeparam T { number | bigint } The type of the value to be read\n   *\n   * @param func { Function(offset: number) => number } The function to read data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes read.\n   * @param offset { Number } The offset to read from (optional). When this is not provided, the managed readOffset is used instead.\n   *\n   * @returns { T } the number value\n   */\n\n\n  _readNumberValue(func, byteSize, offset) {\n    this.ensureReadable(byteSize, offset); // Call Buffer.readXXXX();\n\n    const value = func.call(this._buff, typeof offset === 'number' ? offset : this._readOffset); // Adjust internal read offset if an optional read offset was not provided.\n\n    if (typeof offset === 'undefined') {\n      this._readOffset += byteSize;\n    }\n\n    return value;\n  }\n  /**\n   * Inserts a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n\n\n  _insertNumberValue(func, byteSize, value, offset) {\n    // Check for invalid offset values.\n    utils_1.checkOffsetValue(offset); // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n\n    this.ensureInsertable(byteSize, offset); // Call buffer.writeXXXX();\n\n    func.call(this._buff, value, offset); // Adjusts internally managed write offset.\n\n    this._writeOffset += byteSize;\n    return this;\n  }\n  /**\n   * Writes a numeric number value based on the given offset and value.\n   *\n   * @typeparam T { number | bigint } The type of the value to be written\n   *\n   * @param func { Function(offset: T, offset?) => number} The function to write data on the internal Buffer with.\n   * @param byteSize { Number } The number of bytes written.\n   * @param value { T } The number value to write.\n   * @param offset { Number } the offset to write the number at (REQUIRED).\n   *\n   * @returns SmartBuffer this buffer\n   */\n\n\n  _writeNumberValue(func, byteSize, value, offset) {\n    // If an offset was provided, validate it.\n    if (typeof offset === 'number') {\n      // Check if we're writing beyond the bounds of the managed data.\n      if (offset < 0) {\n        throw new Error(utils_1.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);\n      }\n\n      utils_1.checkOffsetValue(offset);\n    } // Default to writeOffset if no offset value was given.\n\n\n    const offsetVal = typeof offset === 'number' ? offset : this._writeOffset; // Ensure there is enough internal Buffer capacity. (raw offset is passed)\n\n    this._ensureWriteable(byteSize, offsetVal);\n\n    func.call(this._buff, value, offsetVal); // If an offset was given, check to see if we wrote beyond the current writeOffset.\n\n    if (typeof offset === 'number') {\n      this._writeOffset = Math.max(this._writeOffset, offsetVal + byteSize);\n    } else {\n      // If no numeric offset was given, we wrote to the end of the SmartBuffer so increment writeOffset.\n      this._writeOffset += byteSize;\n    }\n\n    return this;\n  }\n\n}\n\nexports.SmartBuffer = SmartBuffer;","map":{"version":3,"mappings":"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","names":["DEFAULT_SMARTBUFFER_SIZE","DEFAULT_SMARTBUFFER_ENCODING","SmartBuffer","constructor","options","isSmartBufferOptions","encoding","utils_1","_encoding","size","_buff","Buffer","allocUnsafe","Error","INVALID_SMARTBUFFER_SIZE","buff","isBuffer","length","INVALID_SMARTBUFFER_BUFFER","INVALID_SMARTBUFFER_OBJECT","fromSize","fromBuffer","fromOptions","castOptions","undefined","readInt8","offset","_readNumberValue","prototype","readInt16BE","readInt16LE","readInt32BE","readInt32LE","readBigInt64BE","readBigInt64LE","writeInt8","value","_writeNumberValue","insertInt8","_insertNumberValue","writeInt16BE","insertInt16BE","writeInt16LE","insertInt16LE","writeInt32BE","insertInt32BE","writeInt32LE","insertInt32LE","writeBigInt64BE","insertBigInt64BE","writeBigInt64LE","insertBigInt64LE","readUInt8","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","readBigUInt64BE","readBigUInt64LE","writeUInt8","insertUInt8","writeUInt16BE","insertUInt16BE","writeUInt16LE","insertUInt16LE","writeUInt32BE","insertUInt32BE","writeUInt32LE","insertUInt32LE","writeBigUInt64BE","insertBigUInt64BE","writeBigUInt64LE","insertBigUInt64LE","readFloatBE","readFloatLE","writeFloatBE","insertFloatBE","writeFloatLE","insertFloatLE","readDoubleBE","readDoubleLE","writeDoubleBE","insertDoubleBE","writeDoubleLE","insertDoubleLE","readString","arg1","lengthVal","Math","min","_readOffset","slice","toString","insertString","_handleString","writeString","arg2","readStringNT","nullPos","i","insertStringNT","writeStringNT","writeOffset","readBuffer","endPoint","insertBuffer","_handleBuffer","writeBuffer","readBufferNT","insertBufferNT","writeBufferNT","_writeOffset","clear","remaining","readOffset","internalBuffer","toBuffer","encodingVal","destroy","isInsert","arg3","offsetVal","byteLength","ensureInsertable","_ensureWriteable","write","max","copy","ensureReadable","INVALID_READ_BEYOND_BOUNDS","dataLength","_ensureCapacity","minLength","oldLength","data","newLength","func","byteSize","call","INVALID_WRITE_BEYOND_BOUNDS","exports"],"sources":["../src/smartbuffer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}