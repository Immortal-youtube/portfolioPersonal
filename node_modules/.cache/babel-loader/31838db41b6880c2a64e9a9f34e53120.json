{"ast":null,"code":"import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n  const year = date.getUTCFullYear();\n  const month = date.getUTCMonth();\n  const dayOfWeek = date.getUTCDay();\n  const dayOfMonthInt = date.getUTCDate();\n  const hoursInt = date.getUTCHours();\n  const minutesInt = date.getUTCMinutes();\n  const secondsInt = date.getUTCSeconds();\n  const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n  const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n  const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n  const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n  return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport const parseRfc3339DateTime = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n\n  const match = RFC3339.exec(value);\n\n  if (!match) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n\n  const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n  const year = strictParseShort(stripLeadingZeroes(yearStr));\n  const month = parseDateValue(monthStr, \"month\", 1, 12);\n  const day = parseDateValue(dayStr, \"day\", 1, 31);\n  return buildDate(year, month, day, {\n    hours,\n    minutes,\n    seconds,\n    fractionalMilliseconds\n  });\n};\nconst RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nexport const parseRfc3339DateTimeWithOffset = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n\n  const match = RFC3339_WITH_OFFSET.exec(value);\n\n  if (!match) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n\n  const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n  const year = strictParseShort(stripLeadingZeroes(yearStr));\n  const month = parseDateValue(monthStr, \"month\", 1, 12);\n  const day = parseDateValue(dayStr, \"day\", 1, 31);\n  const date = buildDate(year, month, day, {\n    hours,\n    minutes,\n    seconds,\n    fractionalMilliseconds\n  });\n\n  if (offsetStr.toUpperCase() != \"Z\") {\n    date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n  }\n\n  return date;\n};\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport const parseRfc7231DateTime = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n  }\n\n  let match = IMF_FIXDATE.exec(value);\n\n  if (match) {\n    const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours,\n      minutes,\n      seconds,\n      fractionalMilliseconds\n    });\n  }\n\n  match = RFC_850_DATE.exec(value);\n\n  if (match) {\n    const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours,\n      minutes,\n      seconds,\n      fractionalMilliseconds\n    }));\n  }\n\n  match = ASC_TIME.exec(value);\n\n  if (match) {\n    const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n      hours,\n      minutes,\n      seconds,\n      fractionalMilliseconds\n    });\n  }\n\n  throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport const parseEpochTimestamp = value => {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  let valueAsDouble;\n\n  if (typeof value === \"number\") {\n    valueAsDouble = value;\n  } else if (typeof value === \"string\") {\n    valueAsDouble = strictParseDouble(value);\n  } else {\n    throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n  }\n\n  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n    throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n  }\n\n  return new Date(Math.round(valueAsDouble * 1000));\n};\n\nconst buildDate = (year, month, day, time) => {\n  const adjustedMonth = month - 1;\n  validateDayOfMonth(year, adjustedMonth, day);\n  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\n\nconst parseTwoDigitYear = value => {\n  const thisYear = new Date().getUTCFullYear();\n  const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n\n  if (valueInThisCentury < thisYear) {\n    return valueInThisCentury + 100;\n  }\n\n  return valueInThisCentury;\n};\n\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\n\nconst adjustRfc850Year = input => {\n  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n  }\n\n  return input;\n};\n\nconst parseMonthByShortName = value => {\n  const monthIdx = MONTHS.indexOf(value);\n\n  if (monthIdx < 0) {\n    throw new TypeError(`Invalid month: ${value}`);\n  }\n\n  return monthIdx + 1;\n};\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nconst validateDayOfMonth = (year, month, day) => {\n  let maxDays = DAYS_IN_MONTH[month];\n\n  if (month === 1 && isLeapYear(year)) {\n    maxDays = 29;\n  }\n\n  if (day > maxDays) {\n    throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n  }\n};\n\nconst isLeapYear = year => {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\n\nconst parseDateValue = (value, type, lower, upper) => {\n  const dateVal = strictParseByte(stripLeadingZeroes(value));\n\n  if (dateVal < lower || dateVal > upper) {\n    throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n  }\n\n  return dateVal;\n};\n\nconst parseMilliseconds = value => {\n  if (value === null || value === undefined) {\n    return 0;\n  }\n\n  return strictParseFloat32(\"0.\" + value) * 1000;\n};\n\nconst parseOffsetToMilliseconds = value => {\n  const directionStr = value[0];\n  let direction = 1;\n\n  if (directionStr == \"+\") {\n    direction = 1;\n  } else if (directionStr == \"-\") {\n    direction = -1;\n  } else {\n    throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n  }\n\n  const hour = Number(value.substring(1, 3));\n  const minute = Number(value.substring(4, 6));\n  return direction * (hour * 60 + minute) * 60 * 1000;\n};\n\nconst stripLeadingZeroes = value => {\n  let idx = 0;\n\n  while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n    idx++;\n  }\n\n  if (idx === 0) {\n    return value;\n  }\n\n  return value.slice(idx);\n};","map":{"version":3,"names":["strictParseByte","strictParseDouble","strictParseFloat32","strictParseShort","DAYS","MONTHS","dateToUtcString","date","year","getUTCFullYear","month","getUTCMonth","dayOfWeek","getUTCDay","dayOfMonthInt","getUTCDate","hoursInt","getUTCHours","minutesInt","getUTCMinutes","secondsInt","getUTCSeconds","dayOfMonthString","hoursString","minutesString","secondsString","RFC3339","RegExp","parseRfc3339DateTime","value","undefined","TypeError","match","exec","_","yearStr","monthStr","dayStr","hours","minutes","seconds","fractionalMilliseconds","stripLeadingZeroes","parseDateValue","day","buildDate","RFC3339_WITH_OFFSET","parseRfc3339DateTimeWithOffset","offsetStr","toUpperCase","setTime","getTime","parseOffsetToMilliseconds","IMF_FIXDATE","RFC_850_DATE","ASC_TIME","parseRfc7231DateTime","parseMonthByShortName","adjustRfc850Year","parseTwoDigitYear","trimLeft","parseEpochTimestamp","valueAsDouble","Number","isNaN","Infinity","Date","Math","round","time","adjustedMonth","validateDayOfMonth","UTC","parseMilliseconds","thisYear","valueInThisCentury","floor","FIFTY_YEARS_IN_MILLIS","input","getUTCMilliseconds","monthIdx","indexOf","DAYS_IN_MONTH","maxDays","isLeapYear","type","lower","upper","dateVal","directionStr","direction","hour","substring","minute","idx","length","charAt","slice"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js"],"sourcesContent":["import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport const parseRfc3339DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n};\nconst RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nexport const parseRfc3339DateTimeWithOffset = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339_WITH_OFFSET.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n    if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n    }\n    return date;\n};\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport const parseRfc7231DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport const parseEpochTimestamp = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nconst buildDate = (year, month, day, time) => {\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nconst parseTwoDigitYear = (value) => {\n    const thisYear = new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nconst adjustRfc850Year = (input) => {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nconst parseMonthByShortName = (value) => {\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n};\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst validateDayOfMonth = (year, month, day) => {\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n};\nconst isLeapYear = (year) => {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nconst parseDateValue = (value, type, lower, upper) => {\n    const dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n};\nconst parseMilliseconds = (value) => {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nconst parseOffsetToMilliseconds = (value) => {\n    const directionStr = value[0];\n    let direction = 1;\n    if (directionStr == \"+\") {\n        direction = 1;\n    }\n    else if (directionStr == \"-\") {\n        direction = -1;\n    }\n    else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n    }\n    const hour = Number(value.substring(1, 3));\n    const minute = Number(value.substring(4, 6));\n    return direction * (hour * 60 + minute) * 60 * 1000;\n};\nconst stripLeadingZeroes = (value) => {\n    let idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,iBAA1B,EAA6CC,kBAA7C,EAAiEC,gBAAjE,QAAyF,eAAzF;AACA,MAAMC,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;AACA,MAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;EAClC,MAAMC,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAb;EACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,WAAL,EAAd;EACA,MAAMC,SAAS,GAAGL,IAAI,CAACM,SAAL,EAAlB;EACA,MAAMC,aAAa,GAAGP,IAAI,CAACQ,UAAL,EAAtB;EACA,MAAMC,QAAQ,GAAGT,IAAI,CAACU,WAAL,EAAjB;EACA,MAAMC,UAAU,GAAGX,IAAI,CAACY,aAAL,EAAnB;EACA,MAAMC,UAAU,GAAGb,IAAI,CAACc,aAAL,EAAnB;EACA,MAAMC,gBAAgB,GAAGR,aAAa,GAAG,EAAhB,GAAsB,IAAGA,aAAc,EAAvC,GAA4C,GAAEA,aAAc,EAArF;EACA,MAAMS,WAAW,GAAGP,QAAQ,GAAG,EAAX,GAAiB,IAAGA,QAAS,EAA7B,GAAkC,GAAEA,QAAS,EAAjE;EACA,MAAMQ,aAAa,GAAGN,UAAU,GAAG,EAAb,GAAmB,IAAGA,UAAW,EAAjC,GAAsC,GAAEA,UAAW,EAAzE;EACA,MAAMO,aAAa,GAAGL,UAAU,GAAG,EAAb,GAAmB,IAAGA,UAAW,EAAjC,GAAsC,GAAEA,UAAW,EAAzE;EACA,OAAQ,GAAEhB,IAAI,CAACQ,SAAD,CAAY,KAAIU,gBAAiB,IAAGjB,MAAM,CAACK,KAAD,CAAQ,IAAGF,IAAK,IAAGe,WAAY,IAAGC,aAAc,IAAGC,aAAc,MAAzH;AACH;AACD,MAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,sEAAX,CAAhB;AACA,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAAW;EAC3C,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACvC,OAAOA,SAAP;EACH;;EACD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIE,SAAJ,CAAc,kDAAd,CAAN;EACH;;EACD,MAAMC,KAAK,GAAGN,OAAO,CAACO,IAAR,CAAaJ,KAAb,CAAd;;EACA,IAAI,CAACG,KAAL,EAAY;IACR,MAAM,IAAID,SAAJ,CAAc,kCAAd,CAAN;EACH;;EACD,MAAM,CAACG,CAAD,EAAIC,OAAJ,EAAaC,QAAb,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwDC,sBAAxD,IAAkFT,KAAxF;EACA,MAAMxB,IAAI,GAAGL,gBAAgB,CAACuC,kBAAkB,CAACP,OAAD,CAAnB,CAA7B;EACA,MAAMzB,KAAK,GAAGiC,cAAc,CAACP,QAAD,EAAW,OAAX,EAAoB,CAApB,EAAuB,EAAvB,CAA5B;EACA,MAAMQ,GAAG,GAAGD,cAAc,CAACN,MAAD,EAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAA1B;EACA,OAAOQ,SAAS,CAACrC,IAAD,EAAOE,KAAP,EAAckC,GAAd,EAAmB;IAAEN,KAAF;IAASC,OAAT;IAAkBC,OAAlB;IAA2BC;EAA3B,CAAnB,CAAhB;AACH,CAhBM;AAiBP,MAAMK,mBAAmB,GAAG,IAAInB,MAAJ,CAAW,2FAAX,CAA5B;AACA,OAAO,MAAMoB,8BAA8B,GAAIlB,KAAD,IAAW;EACrD,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACvC,OAAOA,SAAP;EACH;;EACD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIE,SAAJ,CAAc,kDAAd,CAAN;EACH;;EACD,MAAMC,KAAK,GAAGc,mBAAmB,CAACb,IAApB,CAAyBJ,KAAzB,CAAd;;EACA,IAAI,CAACG,KAAL,EAAY;IACR,MAAM,IAAID,SAAJ,CAAc,kCAAd,CAAN;EACH;;EACD,MAAM,CAACG,CAAD,EAAIC,OAAJ,EAAaC,QAAb,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwDC,sBAAxD,EAAgFO,SAAhF,IAA6FhB,KAAnG;EACA,MAAMxB,IAAI,GAAGL,gBAAgB,CAACuC,kBAAkB,CAACP,OAAD,CAAnB,CAA7B;EACA,MAAMzB,KAAK,GAAGiC,cAAc,CAACP,QAAD,EAAW,OAAX,EAAoB,CAApB,EAAuB,EAAvB,CAA5B;EACA,MAAMQ,GAAG,GAAGD,cAAc,CAACN,MAAD,EAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAA1B;EACA,MAAM9B,IAAI,GAAGsC,SAAS,CAACrC,IAAD,EAAOE,KAAP,EAAckC,GAAd,EAAmB;IAAEN,KAAF;IAASC,OAAT;IAAkBC,OAAlB;IAA2BC;EAA3B,CAAnB,CAAtB;;EACA,IAAIO,SAAS,CAACC,WAAV,MAA2B,GAA/B,EAAoC;IAChC1C,IAAI,CAAC2C,OAAL,CAAa3C,IAAI,CAAC4C,OAAL,KAAiBC,yBAAyB,CAACJ,SAAD,CAAvD;EACH;;EACD,OAAOzC,IAAP;AACH,CApBM;AAqBP,MAAM8C,WAAW,GAAG,IAAI1B,MAAJ,CAAW,gJAAX,CAApB;AACA,MAAM2B,YAAY,GAAG,IAAI3B,MAAJ,CAAW,6KAAX,CAArB;AACA,MAAM4B,QAAQ,GAAG,IAAI5B,MAAJ,CAAW,kJAAX,CAAjB;AACA,OAAO,MAAM6B,oBAAoB,GAAI3B,KAAD,IAAW;EAC3C,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACvC,OAAOA,SAAP;EACH;;EACD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIE,SAAJ,CAAc,kDAAd,CAAN;EACH;;EACD,IAAIC,KAAK,GAAGqB,WAAW,CAACpB,IAAZ,CAAiBJ,KAAjB,CAAZ;;EACA,IAAIG,KAAJ,EAAW;IACP,MAAM,CAACE,CAAD,EAAIG,MAAJ,EAAYD,QAAZ,EAAsBD,OAAtB,EAA+BG,KAA/B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwDC,sBAAxD,IAAkFT,KAAxF;IACA,OAAOa,SAAS,CAAC1C,gBAAgB,CAACuC,kBAAkB,CAACP,OAAD,CAAnB,CAAjB,EAAgDsB,qBAAqB,CAACrB,QAAD,CAArE,EAAiFO,cAAc,CAACN,MAAD,EAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAA/F,EAAuH;MAAEC,KAAF;MAASC,OAAT;MAAkBC,OAAlB;MAA2BC;IAA3B,CAAvH,CAAhB;EACH;;EACDT,KAAK,GAAGsB,YAAY,CAACrB,IAAb,CAAkBJ,KAAlB,CAAR;;EACA,IAAIG,KAAJ,EAAW;IACP,MAAM,CAACE,CAAD,EAAIG,MAAJ,EAAYD,QAAZ,EAAsBD,OAAtB,EAA+BG,KAA/B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwDC,sBAAxD,IAAkFT,KAAxF;IACA,OAAO0B,gBAAgB,CAACb,SAAS,CAACc,iBAAiB,CAACxB,OAAD,CAAlB,EAA6BsB,qBAAqB,CAACrB,QAAD,CAAlD,EAA8DO,cAAc,CAACN,MAAD,EAAS,KAAT,EAAgB,CAAhB,EAAmB,EAAnB,CAA5E,EAAoG;MACjIC,KADiI;MAEjIC,OAFiI;MAGjIC,OAHiI;MAIjIC;IAJiI,CAApG,CAAV,CAAvB;EAMH;;EACDT,KAAK,GAAGuB,QAAQ,CAACtB,IAAT,CAAcJ,KAAd,CAAR;;EACA,IAAIG,KAAJ,EAAW;IACP,MAAM,CAACE,CAAD,EAAIE,QAAJ,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,sBAA/C,EAAuEN,OAAvE,IAAkFH,KAAxF;IACA,OAAOa,SAAS,CAAC1C,gBAAgB,CAACuC,kBAAkB,CAACP,OAAD,CAAnB,CAAjB,EAAgDsB,qBAAqB,CAACrB,QAAD,CAArE,EAAiFO,cAAc,CAACN,MAAM,CAACuB,QAAP,EAAD,EAAoB,KAApB,EAA2B,CAA3B,EAA8B,EAA9B,CAA/F,EAAkI;MAAEtB,KAAF;MAASC,OAAT;MAAkBC,OAAlB;MAA2BC;IAA3B,CAAlI,CAAhB;EACH;;EACD,MAAM,IAAIV,SAAJ,CAAc,kCAAd,CAAN;AACH,CA5BM;AA6BP,OAAO,MAAM8B,mBAAmB,GAAIhC,KAAD,IAAW;EAC1C,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACvC,OAAOA,SAAP;EACH;;EACD,IAAIgC,aAAJ;;EACA,IAAI,OAAOjC,KAAP,KAAiB,QAArB,EAA+B;IAC3BiC,aAAa,GAAGjC,KAAhB;EACH,CAFD,MAGK,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAChCiC,aAAa,GAAG7D,iBAAiB,CAAC4B,KAAD,CAAjC;EACH,CAFI,MAGA;IACD,MAAM,IAAIE,SAAJ,CAAc,6FAAd,CAAN;EACH;;EACD,IAAIgC,MAAM,CAACC,KAAP,CAAaF,aAAb,KAA+BA,aAAa,KAAKG,QAAjD,IAA6DH,aAAa,KAAK,CAACG,QAApF,EAA8F;IAC1F,MAAM,IAAIlC,SAAJ,CAAc,gEAAd,CAAN;EACH;;EACD,OAAO,IAAImC,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWN,aAAa,GAAG,IAA3B,CAAT,CAAP;AACH,CAlBM;;AAmBP,MAAMjB,SAAS,GAAG,CAACrC,IAAD,EAAOE,KAAP,EAAckC,GAAd,EAAmByB,IAAnB,KAA4B;EAC1C,MAAMC,aAAa,GAAG5D,KAAK,GAAG,CAA9B;EACA6D,kBAAkB,CAAC/D,IAAD,EAAO8D,aAAP,EAAsB1B,GAAtB,CAAlB;EACA,OAAO,IAAIsB,IAAJ,CAASA,IAAI,CAACM,GAAL,CAAShE,IAAT,EAAe8D,aAAf,EAA8B1B,GAA9B,EAAmCD,cAAc,CAAC0B,IAAI,CAAC/B,KAAN,EAAa,MAAb,EAAqB,CAArB,EAAwB,EAAxB,CAAjD,EAA8EK,cAAc,CAAC0B,IAAI,CAAC9B,OAAN,EAAe,QAAf,EAAyB,CAAzB,EAA4B,EAA5B,CAA5F,EAA6HI,cAAc,CAAC0B,IAAI,CAAC7B,OAAN,EAAe,SAAf,EAA0B,CAA1B,EAA6B,EAA7B,CAA3I,EAA6KiC,iBAAiB,CAACJ,IAAI,CAAC5B,sBAAN,CAA9L,CAAT,CAAP;AACH,CAJD;;AAKA,MAAMkB,iBAAiB,GAAI9B,KAAD,IAAW;EACjC,MAAM6C,QAAQ,GAAG,IAAIR,IAAJ,GAAWzD,cAAX,EAAjB;EACA,MAAMkE,kBAAkB,GAAGR,IAAI,CAACS,KAAL,CAAWF,QAAQ,GAAG,GAAtB,IAA6B,GAA7B,GAAmCvE,gBAAgB,CAACuC,kBAAkB,CAACb,KAAD,CAAnB,CAA9E;;EACA,IAAI8C,kBAAkB,GAAGD,QAAzB,EAAmC;IAC/B,OAAOC,kBAAkB,GAAG,GAA5B;EACH;;EACD,OAAOA,kBAAP;AACH,CAPD;;AAQA,MAAME,qBAAqB,GAAG,KAAK,GAAL,GAAW,EAAX,GAAgB,EAAhB,GAAqB,EAArB,GAA0B,IAAxD;;AACA,MAAMnB,gBAAgB,GAAIoB,KAAD,IAAW;EAChC,IAAIA,KAAK,CAAC3B,OAAN,KAAkB,IAAIe,IAAJ,GAAWf,OAAX,EAAlB,GAAyC0B,qBAA7C,EAAoE;IAChE,OAAO,IAAIX,IAAJ,CAASA,IAAI,CAACM,GAAL,CAASM,KAAK,CAACrE,cAAN,KAAyB,GAAlC,EAAuCqE,KAAK,CAACnE,WAAN,EAAvC,EAA4DmE,KAAK,CAAC/D,UAAN,EAA5D,EAAgF+D,KAAK,CAAC7D,WAAN,EAAhF,EAAqG6D,KAAK,CAAC3D,aAAN,EAArG,EAA4H2D,KAAK,CAACzD,aAAN,EAA5H,EAAmJyD,KAAK,CAACC,kBAAN,EAAnJ,CAAT,CAAP;EACH;;EACD,OAAOD,KAAP;AACH,CALD;;AAMA,MAAMrB,qBAAqB,GAAI5B,KAAD,IAAW;EACrC,MAAMmD,QAAQ,GAAG3E,MAAM,CAAC4E,OAAP,CAAepD,KAAf,CAAjB;;EACA,IAAImD,QAAQ,GAAG,CAAf,EAAkB;IACd,MAAM,IAAIjD,SAAJ,CAAe,kBAAiBF,KAAM,EAAtC,CAAN;EACH;;EACD,OAAOmD,QAAQ,GAAG,CAAlB;AACH,CAND;;AAOA,MAAME,aAAa,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAAtB;;AACA,MAAMX,kBAAkB,GAAG,CAAC/D,IAAD,EAAOE,KAAP,EAAckC,GAAd,KAAsB;EAC7C,IAAIuC,OAAO,GAAGD,aAAa,CAACxE,KAAD,CAA3B;;EACA,IAAIA,KAAK,KAAK,CAAV,IAAe0E,UAAU,CAAC5E,IAAD,CAA7B,EAAqC;IACjC2E,OAAO,GAAG,EAAV;EACH;;EACD,IAAIvC,GAAG,GAAGuC,OAAV,EAAmB;IACf,MAAM,IAAIpD,SAAJ,CAAe,mBAAkB1B,MAAM,CAACK,KAAD,CAAQ,OAAMF,IAAK,KAAIoC,GAAI,EAAlE,CAAN;EACH;AACJ,CARD;;AASA,MAAMwC,UAAU,GAAI5E,IAAD,IAAU;EACzB,OAAOA,IAAI,GAAG,CAAP,KAAa,CAAb,KAAmBA,IAAI,GAAG,GAAP,KAAe,CAAf,IAAoBA,IAAI,GAAG,GAAP,KAAe,CAAtD,CAAP;AACH,CAFD;;AAGA,MAAMmC,cAAc,GAAG,CAACd,KAAD,EAAQwD,IAAR,EAAcC,KAAd,EAAqBC,KAArB,KAA+B;EAClD,MAAMC,OAAO,GAAGxF,eAAe,CAAC0C,kBAAkB,CAACb,KAAD,CAAnB,CAA/B;;EACA,IAAI2D,OAAO,GAAGF,KAAV,IAAmBE,OAAO,GAAGD,KAAjC,EAAwC;IACpC,MAAM,IAAIxD,SAAJ,CAAe,GAAEsD,IAAK,oBAAmBC,KAAM,QAAOC,KAAM,aAA5D,CAAN;EACH;;EACD,OAAOC,OAAP;AACH,CAND;;AAOA,MAAMf,iBAAiB,GAAI5C,KAAD,IAAW;EACjC,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C;IACvC,OAAO,CAAP;EACH;;EACD,OAAO5B,kBAAkB,CAAC,OAAO2B,KAAR,CAAlB,GAAmC,IAA1C;AACH,CALD;;AAMA,MAAMuB,yBAAyB,GAAIvB,KAAD,IAAW;EACzC,MAAM4D,YAAY,GAAG5D,KAAK,CAAC,CAAD,CAA1B;EACA,IAAI6D,SAAS,GAAG,CAAhB;;EACA,IAAID,YAAY,IAAI,GAApB,EAAyB;IACrBC,SAAS,GAAG,CAAZ;EACH,CAFD,MAGK,IAAID,YAAY,IAAI,GAApB,EAAyB;IAC1BC,SAAS,GAAG,CAAC,CAAb;EACH,CAFI,MAGA;IACD,MAAM,IAAI3D,SAAJ,CAAe,qBAAoB0D,YAAa,sBAAhD,CAAN;EACH;;EACD,MAAME,IAAI,GAAG5B,MAAM,CAAClC,KAAK,CAAC+D,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAAnB;EACA,MAAMC,MAAM,GAAG9B,MAAM,CAAClC,KAAK,CAAC+D,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAD,CAArB;EACA,OAAOF,SAAS,IAAIC,IAAI,GAAG,EAAP,GAAYE,MAAhB,CAAT,GAAmC,EAAnC,GAAwC,IAA/C;AACH,CAfD;;AAgBA,MAAMnD,kBAAkB,GAAIb,KAAD,IAAW;EAClC,IAAIiE,GAAG,GAAG,CAAV;;EACA,OAAOA,GAAG,GAAGjE,KAAK,CAACkE,MAAN,GAAe,CAArB,IAA0BlE,KAAK,CAACmE,MAAN,CAAaF,GAAb,MAAsB,GAAvD,EAA4D;IACxDA,GAAG;EACN;;EACD,IAAIA,GAAG,KAAK,CAAZ,EAAe;IACX,OAAOjE,KAAP;EACH;;EACD,OAAOA,KAAK,CAACoE,KAAN,CAAYH,GAAZ,CAAP;AACH,CATD"},"metadata":{},"sourceType":"module"}