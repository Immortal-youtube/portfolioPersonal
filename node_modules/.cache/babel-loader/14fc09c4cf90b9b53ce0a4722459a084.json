{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst admin_1 = require(\"./admin\");\n\nconst bson_1 = require(\"./bson\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst collection_1 = require(\"./collection\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_1 = require(\"./utils\");\n\nconst write_concern_1 = require(\"./write_concern\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    options = options ?? {}; // Filter the options\n\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n\n\n  get secondaryOk() {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n\n\n  async createCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n\n\n  async command(command, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options));\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async stats(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n\n\n  async renameCollection(fromCollection, toCollection, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options,\n      new_collection: true,\n      readPreference: read_preference_1.ReadPreference.primary\n    }));\n  }\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n\n\n  async dropCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async dropDatabase(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async collections(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n\n\n  async createIndex(name, indexSpec, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n\n\n  async addUser(username, passwordOrOptions, options) {\n    options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n\n\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n\n\n  async setProfilingLevel(level, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  async profilingLevel(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n\n\n  async indexInformation(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"mappings":"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","names":["DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","validateDatabaseName","s","readPreference","read_preference_1","fromOptions","bsonOptions","pkFactory","utils_1","readConcern","read_concern_1","writeConcern","write_concern_1","namespace","db","secondaryOk","preference","toString","createCollection","name","create_collection_1","command","run_command_1","aggregate","pipeline","aggregation_cursor_1","admin","admin_1","collection","error_1","collection_1","stats","stats_1","listCollections","filter","list_collections_cursor_1","renameCollection","fromCollection","toCollection","rename_1","new_collection","primary","dropCollection","drop_1","dropDatabase","collections","collections_1","createIndex","indexSpec","indexes_1","addUser","username","passwordOrOptions","undefined","password","add_user_1","removeUser","remove_user_1","setProfilingLevel","level","set_profiling_level_1","profilingLevel","profiling_level_1","indexInformation","watch","Array","isArray","change_stream_1","exports","CONSTANTS","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","length","invalidChars","i","indexOf"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import { Admin } from './admin';\nimport { BSONSerializeOptions, Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, ChangeStreamDocument, ChangeStreamOptions } from './change_stream';\nimport { Collection, CollectionOptions } from './collection';\nimport * as CONSTANTS from './constants';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type { TODO_NODE_3286 } from './mongo_types';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { CollectionsOperation } from './operations/collections';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport { CreateCollectionOperation, CreateCollectionOptions } from './operations/create_collection';\nimport {\n  DropCollectionOperation,\n  DropCollectionOptions,\n  DropDatabaseOperation,\n  DropDatabaseOptions\n} from './operations/drop';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  CreateIndexesOptions,\n  CreateIndexOperation,\n  IndexInformationOperation,\n  IndexSpecification\n} from './operations/indexes';\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\nimport { ProfilingLevelOperation, ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport {\n  ProfilingLevel,\n  SetProfilingLevelOperation,\n  SetProfilingLevelOptions\n} from './operations/set_profiling_level';\nimport { DbStatsOperation, DbStatsOptions } from './operations/stats';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport { DEFAULT_PK_FACTORY, filterOptions, MongoDBNamespace, resolveOptions } from './utils';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'enableUtf8Validation',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  client: MongoClient;\n  options?: DbOptions;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>> {\n    return executeOperation(\n      this.s.client,\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(this.s.client, new RunCommandOperation(this, command, options));\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    return new AggregationCursor(\n      this.s.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new Collection<TSchema>(this, name, resolveOptions(this, options));\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options?: DbStatsOptions): Promise<Document> {\n    return executeOperation(\n      this.s.client,\n      new DbStatsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions\n  ): Promise<Collection<TSchema>> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      this.s.client,\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        { ...options, new_collection: true, readPreference: ReadPreference.primary }\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean> {\n    return executeOperation(\n      this.s.client,\n      new DropCollectionOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options?: DropDatabaseOptions): Promise<boolean> {\n    return executeOperation(\n      this.s.client,\n      new DropDatabaseOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options?: ListCollectionsOptions): Promise<Collection[]> {\n    return executeOperation(\n      this.s.client,\n      new CollectionsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ): Promise<string> {\n    return executeOperation(\n      this.s.client,\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\n   * @param options - Optional settings for the command\n   */\n  async addUser(\n    username: string,\n    passwordOrOptions?: string | AddUserOptions,\n    options?: AddUserOptions\n  ): Promise<Document> {\n    options =\n      options != null && typeof options === 'object'\n        ? options\n        : passwordOrOptions != null && typeof passwordOrOptions === 'object'\n        ? passwordOrOptions\n        : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return executeOperation(\n      this.s.client,\n      new AddUserOperation(this, username, password, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return executeOperation(\n      this.s.client,\n      new RemoveUserOperation(this, username, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel> {\n    return executeOperation(\n      this.s.client,\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options?: ProfilingLevelOptions): Promise<string> {\n    return executeOperation(\n      this.s.client,\n      new ProfilingLevelOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  async indexInformation(name: string, options?: IndexInformationOptions): Promise<Document> {\n    return executeOperation(\n      this.s.client,\n      new IndexInformationOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n}\n\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}