{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\n\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\n\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\n\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n}); // From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\n\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/** @public */\n\nexports.MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n});\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.cause = message;\n    } else {\n      super(message);\n    }\n\n    this[kErrorLabels] = new Set();\n  }\n\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label) {\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels() {\n    return Array.from(this[kErrorLabels]);\n  }\n\n}\n\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\n\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n\n  get name() {\n    return 'MongoServerError';\n  }\n\n}\n\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\n\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDriverError';\n  }\n\n}\n\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAPIError';\n  }\n\n}\n\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\n\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoRuntimeError';\n  }\n\n}\n\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\n\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n\n}\n\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\n\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoDecompressionError';\n  }\n\n}\n\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\n\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n\n}\n\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\n\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTransactionError';\n  }\n\n}\n\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\n\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n\n}\n\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\n\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoKerberosError';\n  }\n\n}\n\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\n\nclass MongoAWSError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoAWSError';\n  }\n\n}\n\nexports.MongoAWSError = MongoAWSError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n\n}\n\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\n\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n\n}\n\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n\n}\n\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\n\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n\n}\n\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\n\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoUnexpectedServerResponseError';\n  }\n\n}\n\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n\n}\n\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\n\nclass MongoServerClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoServerClosedError';\n  }\n\n}\n\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\n\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n\n}\n\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\n\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    super(message);\n  }\n\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n\n}\n\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\n\nconst kBeforeHandshake = Symbol('beforeHandshake');\n\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\n\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\n\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name() {\n    return 'MongoNetworkError';\n  }\n\n}\n\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\n\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n\n}\n\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\n\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoParseError';\n  }\n\n}\n\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n\n}\n\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n\n}\n\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n\n}\n\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\n\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n\n}\n\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\n\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  get name() {\n    return 'MongoSystemError';\n  }\n\n}\n\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\n\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n\n}\n\nexports.MongoServerSelectionError = MongoServerSelectionError;\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\n\n\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n\n}\n\nexports.MongoWriteConcernError = MongoWriteConcernError; // https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\n\nconst RETRYABLE_READ_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]); // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([...RETRYABLE_READ_ERROR_CODES, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\n\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (error instanceof MongoError) {\n    if ((maxWireVersion >= 9 || error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\n\nfunction isRetryableWriteError(error) {\n  return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError);\n}\n\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\n\nfunction isRetryableReadError(error) {\n  const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\n\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\n\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\n\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\n\nfunction isResumableError(error, wireVersion) {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n\n    return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n  }\n\n  if (typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n\nexports.isResumableError = isResumableError;","map":{"version":3,"mappings":"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","names":["kErrorLabels","Symbol","exports","RegExp","Object","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Set","RetryableWriteError","TransientTransactionError","UnknownTransactionCommitResult","ResumableChangeStreamError","HandshakeError","ResetPool","InterruptInUseConnections","NoWritesPerformed","MongoError","Error","constructor","message","cause","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","errorLabels","Array","from","MongoServerError","$err","MongoDriverError","MongoAPIError","MongoRuntimeError","MongoBatchReExecutionError","MongoDecompressionError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoAWSError","MongoChangeStreamError","MongoTailableCursorError","MongoGridFSStreamError","MongoGridFSChunkError","MongoUnexpectedServerResponseError","MongoCursorInUseError","MongoServerClosedError","MongoCursorExhaustedError","MongoTopologyClosedError","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","options","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoInvalidArgumentError","MongoCompatibilityError","MongoMissingCredentialsError","MongoMissingDependencyError","MongoSystemError","reason","error","code","MongoServerSelectionError","makeWriteConcernResultObject","input","output","assign","ok","codeName","MongoWriteConcernError","result","isArray","errInfo","RETRYABLE_READ_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","needsRetryableWriteLabel","maxWireVersion","isNotWritablePrimaryError","test","isNodeIsRecoveringError","isRetryableWriteError","isRetryableReadError","hasRetryableErrorCode","SDAM_RECOVERING_CODES","SDAM_NOT_PRIMARY_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","match","isResumableError","wireVersion"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\error.ts"],"sourcesContent":["import type { Document } from './bson';\nimport type { TopologyVersion } from './sdam/server_description';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\n  'not master or secondary',\n  'i'\n);\n\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexport const NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n} as const);\n\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport const MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n} as const);\n\n/** @public */\nexport type MongoErrorLabel = typeof MongoErrorLabel[keyof typeof MongoErrorLabel];\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  [kErrorLabels]: Set<string>;\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n  connectionGeneration?: number;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  cause?: Error; // depending on the node version, this may or may not exist on the base\n\n  constructor(message: string | Error) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.cause = message;\n    } else {\n      super(message);\n    }\n    this[kErrorLabels] = new Set();\n  }\n\n  override get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels(): string[] {\n    return Array.from(this[kErrorLabels]);\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n        this[name] = message[name];\n    }\n  }\n\n  override get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport class MongoAWSError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAWSError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  override get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nexport function isNetworkErrorBeforeHandshake(err: MongoNetworkError): boolean {\n  return err[kBeforeHandshake] === true;\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake: boolean;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  [kBeforeHandshake]?: boolean;\n\n  constructor(message: string | Error, options?: MongoNetworkErrorOptions) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  override get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  override get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  override get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input: any) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document (provided if ok: 1) */\n  result?: Document;\n\n  constructor(message: ErrorDescription, result?: Document) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  override get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set<number>([\n  ...RETRYABLE_READ_ERROR_CODES,\n  MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n\nexport function needsRetryableWriteLabel(error: Error, maxWireVersion: number): boolean {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (error instanceof MongoError) {\n    if (\n      (maxWireVersion >= 9 || error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) &&\n      !error.hasErrorLabel(MongoErrorLabel.HandshakeError)\n    ) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n\n  if (error instanceof MongoError && typeof error.code === 'number') {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  return error.hasErrorLabel(MongoErrorLabel.RetryableWriteError);\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableReadError(error: MongoError): boolean {\n  const hasRetryableErrorCode =\n    typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst SDAM_NOT_PRIMARY_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return (\n    LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n    NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message)\n  );\n}\n\nfunction isNotWritablePrimaryError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexport function isResumableError(error?: Error, wireVersion?: number): boolean {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(MongoErrorLabel.ResumableChangeStreamError);\n  }\n\n  if (typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}