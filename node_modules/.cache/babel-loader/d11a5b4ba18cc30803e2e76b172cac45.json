{"ast":null,"code":"const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n  constructor() {\n    let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"aws:cognito-identity-ids\";\n    this.dbName = dbName;\n  }\n\n  getItem(key) {\n    return this.withObjectStore(\"readonly\", store => {\n      const req = store.get(key);\n      return new Promise(resolve => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.delete(key);\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id, value) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.put({\n        id,\n        value\n      });\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  getDb() {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  }\n\n  withObjectStore(mode, action) {\n    return this.getDb().then(db => {\n      const tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = () => db.close();\n\n      return new Promise((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(err => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["STORE_NAME","IndexedDbStorage","constructor","dbName","getItem","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","removeItem","delete","reject","error","setItem","id","put","getDb","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js"],"sourcesContent":["const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n    constructor(dbName = \"aws:cognito-identity-ids\") {\n        this.dbName = dbName;\n    }\n    getItem(key) {\n        return this.withObjectStore(\"readonly\", (store) => {\n            const req = store.get(key);\n            return new Promise((resolve) => {\n                req.onerror = () => resolve(null);\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\n            });\n        }).catch(() => null);\n    }\n    removeItem(key) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.delete(key);\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    setItem(id, value) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.put({ id, value });\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    getDb() {\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\n        return new Promise((resolve, reject) => {\n            openDbRequest.onsuccess = () => {\n                resolve(openDbRequest.result);\n            };\n            openDbRequest.onerror = () => {\n                reject(openDbRequest.error);\n            };\n            openDbRequest.onblocked = () => {\n                reject(new Error(\"Unable to access DB\"));\n            };\n            openDbRequest.onupgradeneeded = () => {\n                const db = openDbRequest.result;\n                db.onerror = () => {\n                    reject(new Error(\"Failed to create object store\"));\n                };\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n            };\n        });\n    }\n    withObjectStore(mode, action) {\n        return this.getDb().then((db) => {\n            const tx = db.transaction(STORE_NAME, mode);\n            tx.oncomplete = () => db.close();\n            return new Promise((resolve, reject) => {\n                tx.onerror = () => reject(tx.error);\n                resolve(action(tx.objectStore(STORE_NAME)));\n            }).catch((err) => {\n                db.close();\n                throw err;\n            });\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}