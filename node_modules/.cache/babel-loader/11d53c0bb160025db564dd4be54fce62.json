{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prepareDocs = exports.indexInformation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nfunction indexInformation(db, name, _optionsOrCallback, _callback) {\n  let options = _optionsOrCallback;\n  let callback = _callback;\n\n  if ('function' === typeof _optionsOrCallback) {\n    callback = _optionsOrCallback;\n    options = {};\n  } // If we specified full information\n\n\n  const full = options.full == null ? false : options.full;\n  let topology;\n\n  try {\n    topology = (0, utils_1.getTopology)(db);\n  } catch (error) {\n    return callback(error);\n  } // Did the user destroy the topology\n\n\n  if (topology.isDestroyed()) return callback(new error_1.MongoTopologyClosedError()); // Process all the results from the index command and collection\n\n  function processResults(indexes) {\n    // Contains all the information\n    const info = {}; // Process all the indexes\n\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i]; // Let's unpack the object\n\n      info[index.name] = [];\n\n      for (const name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  } // Get the list of indexes of the specified collection\n\n\n  db.collection(name).listIndexes(options).toArray().then(indexes => {\n    if (!Array.isArray(indexes)) return callback(undefined, []);\n    if (full) return callback(undefined, indexes);\n    callback(undefined, processResults(indexes));\n  }, error => callback(error));\n}\n\nexports.indexInformation = indexInformation;\n\nfunction prepareDocs(coll, docs, options) {\n  const forceServerObjectId = typeof options.forceServerObjectId === 'boolean' ? options.forceServerObjectId : coll.s.db.options?.forceServerObjectId; // no need to modify the docs if server sets the ObjectId\n\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n\n  return docs.map(doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  });\n}\n\nexports.prepareDocs = prepareDocs;","map":{"version":3,"mappings":";;;;;;;AAGA;;AAGA;;AAqBA,SAAgBA,gBAAhB,CACEC,EADF,EAEEC,IAFF,EAGEC,kBAHF,EAIEC,SAJF,EAIsB;EAEpB,IAAIC,OAAO,GAAGF,kBAAd;EACA,IAAIG,QAAQ,GAAGF,SAAf;;EACA,IAAI,eAAe,OAAOD,kBAA1B,EAA8C;IAC5CG,QAAQ,GAAGH,kBAAX;IACAE,OAAO,GAAG,EAAV;EACD,CAPmB,CAQpB;;;EACA,MAAME,IAAI,GAAGF,OAAO,CAACE,IAAR,IAAgB,IAAhB,GAAuB,KAAvB,GAA+BF,OAAO,CAACE,IAApD;EAEA,IAAIC,QAAJ;;EACA,IAAI;IACFA,QAAQ,GAAG,yBAAYP,EAAZ,CAAX;EACD,CAFD,CAEE,OAAOQ,KAAP,EAAc;IACd,OAAOH,QAAQ,CAACG,KAAD,CAAf;EACD,CAhBmB,CAkBpB;;;EACA,IAAID,QAAQ,CAACE,WAAT,EAAJ,EAA4B,OAAOJ,QAAQ,CAAC,IAAIK,gCAAJ,EAAD,CAAf,CAnBR,CAoBpB;;EACA,SAASC,cAAT,CAAwBC,OAAxB,EAAoC;IAClC;IACA,MAAMC,IAAI,GAAQ,EAAlB,CAFkC,CAGlC;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;MACvC,MAAME,KAAK,GAAGJ,OAAO,CAACE,CAAD,CAArB,CADuC,CAEvC;;MACAD,IAAI,CAACG,KAAK,CAACf,IAAP,CAAJ,GAAmB,EAAnB;;MACA,KAAK,MAAMA,IAAX,IAAmBe,KAAK,CAACC,GAAzB,EAA8B;QAC5BJ,IAAI,CAACG,KAAK,CAACf,IAAP,CAAJ,CAAiBiB,IAAjB,CAAsB,CAACjB,IAAD,EAAOe,KAAK,CAACC,GAAN,CAAUhB,IAAV,CAAP,CAAtB;MACD;IACF;;IAED,OAAOY,IAAP;EACD,CAnCmB,CAqCpB;;;EACAb,EAAE,CAACmB,UAAH,CAAclB,IAAd,EACGmB,WADH,CACehB,OADf,EAEGiB,OAFH,GAGGC,IAHH,CAIIV,OAAO,IAAG;IACR,IAAI,CAACW,KAAK,CAACC,OAAN,CAAcZ,OAAd,CAAL,EAA6B,OAAOP,QAAQ,CAACoB,SAAD,EAAY,EAAZ,CAAf;IAC7B,IAAInB,IAAJ,EAAU,OAAOD,QAAQ,CAACoB,SAAD,EAAYb,OAAZ,CAAf;IACVP,QAAQ,CAACoB,SAAD,EAAYd,cAAc,CAACC,OAAD,CAA1B,CAAR;EACD,CARL,EASIJ,KAAK,IAAIH,QAAQ,CAACG,KAAD,CATrB;AAWD;;AArDDkB;;AAuDA,SAAgBC,WAAhB,CACEC,IADF,EAEEC,IAFF,EAGEzB,OAHF,EAG4C;EAE1C,MAAM0B,mBAAmB,GACvB,OAAO1B,OAAO,CAAC0B,mBAAf,KAAuC,SAAvC,GACI1B,OAAO,CAAC0B,mBADZ,GAEIF,IAAI,CAACG,CAAL,CAAO/B,EAAP,CAAUI,OAAV,EAAmB0B,mBAHzB,CAF0C,CAO1C;;EACA,IAAIA,mBAAmB,KAAK,IAA5B,EAAkC;IAChC,OAAOD,IAAP;EACD;;EAED,OAAOA,IAAI,CAACG,GAAL,CAASC,GAAG,IAAG;IACpB,IAAIA,GAAG,CAACC,GAAJ,IAAW,IAAf,EAAqB;MACnBD,GAAG,CAACC,GAAJ,GAAUN,IAAI,CAACG,CAAL,CAAOI,SAAP,CAAiBC,QAAjB,EAAV;IACD;;IAED,OAAOH,GAAP;EACD,CANM,CAAP;AAOD;;AAtBDP","names":["indexInformation","db","name","_optionsOrCallback","_callback","options","callback","full","topology","error","isDestroyed","error_1","processResults","indexes","info","i","length","index","key","push","collection","listIndexes","toArray","then","Array","isArray","undefined","exports","prepareDocs","coll","docs","forceServerObjectId","s","map","doc","_id","pkFactory","createPk"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\common_functions.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport { MongoTopologyClosedError } from '../error';\nimport type { ReadPreference } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Callback, getTopology } from '../utils';\n\n/** @public */\nexport interface IndexInformationOptions {\n  full?: boolean;\n  readPreference?: ReadPreference;\n  session?: ClientSession;\n}\n/**\n * Retrieves this collections index info.\n *\n * @param db - The Db instance on which to retrieve the index info.\n * @param name - The name of the collection.\n */\nexport function indexInformation(db: Db, name: string, callback: Callback): void;\nexport function indexInformation(\n  db: Db,\n  name: string,\n  options: IndexInformationOptions,\n  callback?: Callback\n): void;\nexport function indexInformation(\n  db: Db,\n  name: string,\n  _optionsOrCallback: IndexInformationOptions | Callback,\n  _callback?: Callback\n): void {\n  let options = _optionsOrCallback as IndexInformationOptions;\n  let callback = _callback as Callback;\n  if ('function' === typeof _optionsOrCallback) {\n    callback = _optionsOrCallback;\n    options = {};\n  }\n  // If we specified full information\n  const full = options.full == null ? false : options.full;\n\n  let topology;\n  try {\n    topology = getTopology(db);\n  } catch (error) {\n    return callback(error);\n  }\n\n  // Did the user destroy the topology\n  if (topology.isDestroyed()) return callback(new MongoTopologyClosedError());\n  // Process all the results from the index command and collection\n  function processResults(indexes: any) {\n    // Contains all the information\n    const info: any = {};\n    // Process all the indexes\n    for (let i = 0; i < indexes.length; i++) {\n      const index = indexes[i];\n      // Let's unpack the object\n      info[index.name] = [];\n      for (const name in index.key) {\n        info[index.name].push([name, index.key[name]]);\n      }\n    }\n\n    return info;\n  }\n\n  // Get the list of indexes of the specified collection\n  db.collection(name)\n    .listIndexes(options)\n    .toArray()\n    .then(\n      indexes => {\n        if (!Array.isArray(indexes)) return callback(undefined, []);\n        if (full) return callback(undefined, indexes);\n        callback(undefined, processResults(indexes));\n      },\n      error => callback(error)\n    );\n}\n\nexport function prepareDocs(\n  coll: Collection,\n  docs: Document[],\n  options: { forceServerObjectId?: boolean }\n): Document[] {\n  const forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : coll.s.db.options?.forceServerObjectId;\n\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docs;\n  }\n\n  return docs.map(doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  });\n}\n"]},"metadata":{},"sourceType":"script"}