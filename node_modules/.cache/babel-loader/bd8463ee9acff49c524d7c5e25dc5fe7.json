{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    }; // Create the bulk operation\n\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options); // for each op go through and add to the bulk\n\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    } // Execute the bulk\n\n\n    bulk.execute({ ...options,\n      session\n    }).then(result => callback(undefined, result), error => callback(error));\n  }\n\n}\n\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;;AAUA;AAEA;;;AACA,MAAaA,kBAAb,SAAwCC,6BAAxC,CAA0E;EAKxEC,YACEC,UADF,EAEEC,UAFF,EAGEC,OAHF,EAG2B;IAEzB,MAAMA,OAAN;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKF,UAAL,GAAkBA,UAAlB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;EACD;;EAEQE,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGqB;IAEnC,MAAMC,IAAI,GAAG,KAAKP,UAAlB;IACA,MAAMC,UAAU,GAAG,KAAKA,UAAxB;IACA,MAAMC,OAAO,GAAG,EAAE,GAAG,KAAKA,OAAV;MAAmB,GAAG,KAAKM,WAA3B;MAAwCC,cAAc,EAAE,KAAKA;IAA7D,CAAhB,CAJmC,CAMnC;;IACA,MAAMC,IAAI,GACRR,OAAO,CAACS,OAAR,KAAoB,KAApB,GACIJ,IAAI,CAACK,yBAAL,CAA+BV,OAA/B,CADJ,GAEIK,IAAI,CAACM,uBAAL,CAA6BX,OAA7B,CAHN,CAPmC,CAYnC;;IACA,IAAI;MACF,KAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,UAAU,CAACc,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;QAC1CJ,IAAI,CAACM,GAAL,CAASf,UAAU,CAACa,CAAD,CAAnB;MACD;IACF,CAJD,CAIE,OAAOG,GAAP,EAAY;MACZ,OAAOX,QAAQ,CAACW,GAAD,CAAf;IACD,CAnBkC,CAqBnC;;;IACAP,IAAI,CAACP,OAAL,CAAa,EAAE,GAAGD,OAAL;MAAcG;IAAd,CAAb,EAAsCa,IAAtC,CACEC,MAAM,IAAIb,QAAQ,CAACc,SAAD,EAAYD,MAAZ,CADpB,EAEEE,KAAK,IAAIf,QAAQ,CAACe,KAAD,CAFnB;EAID;;AA7CuE;;AAA1EC;AAgDA,+BAAczB,kBAAd,EAAkC,CAACC,mBAAOyB,eAAR,CAAlC","names":["BulkWriteOperation","operation_1","constructor","collection","operations","options","execute","server","session","callback","coll","bsonOptions","readPreference","bulk","ordered","initializeUnorderedBulkOp","initializeOrderedBulkOp","i","length","raw","err","then","result","undefined","error","exports","WRITE_OPERATION"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\bulk_write.ts"],"sourcesContent":["import type {\n  AnyBulkWriteOperation,\n  BulkOperationBase,\n  BulkWriteOptions,\n  BulkWriteResult\n} from '../bulk/common';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\n/** @internal */\nexport class BulkWriteOperation extends AbstractOperation<BulkWriteResult> {\n  override options: BulkWriteOptions;\n  collection: Collection;\n  operations: AnyBulkWriteOperation[];\n\n  constructor(\n    collection: Collection,\n    operations: AnyBulkWriteOperation[],\n    options: BulkWriteOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<BulkWriteResult>\n  ): void {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n\n    // Create the bulk operation\n    const bulk: BulkOperationBase =\n      options.ordered === false\n        ? coll.initializeUnorderedBulkOp(options)\n        : coll.initializeOrderedBulkOp(options);\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Execute the bulk\n    bulk.execute({ ...options, session }).then(\n      result => callback(undefined, result),\n      error => callback(error)\n    );\n  }\n}\n\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}