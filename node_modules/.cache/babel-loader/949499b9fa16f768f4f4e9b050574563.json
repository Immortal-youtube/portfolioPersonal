{"ast":null,"code":"const alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\n\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n  const char = String.fromCharCode(i + start);\n  alphabetByEncoding[char] = i;\n  alphabetByValue[i] = char;\n}\n\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n  const char = String.fromCharCode(i + start);\n  const index = i + 26;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\n\nfor (let i = 0; i < 10; i++) {\n  alphabetByEncoding[i.toString(10)] = i + 52;\n  const char = i.toString(10);\n  const index = i + 52;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\n\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };","map":{"version":3,"names":["alphabetByEncoding","alphabetByValue","Array","i","start","charCodeAt","limit","char","String","fromCharCode","index","toString","bitsPerLetter","bitsPerByte","maxLetterValue"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js"],"sourcesContent":["const alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor (let i = 0; i < 10; i++) {\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,EAA3B;AACA,MAAMC,eAAe,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAxB;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAnB,EAAsCC,KAAK,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAnD,EAAsEF,CAAC,GAAGC,KAAJ,IAAaE,KAAnF,EAA0FH,CAAC,EAA3F,EAA+F;EAC3F,MAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBN,CAAC,GAAGC,KAAxB,CAAb;EACAJ,kBAAkB,CAACO,IAAD,CAAlB,GAA2BJ,CAA3B;EACAF,eAAe,CAACE,CAAD,CAAf,GAAqBI,IAArB;AACH;;AACD,KAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,KAAK,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAnB,EAAsCC,KAAK,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAnD,EAAsEF,CAAC,GAAGC,KAAJ,IAAaE,KAAnF,EAA0FH,CAAC,EAA3F,EAA+F;EAC3F,MAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBN,CAAC,GAAGC,KAAxB,CAAb;EACA,MAAMM,KAAK,GAAGP,CAAC,GAAG,EAAlB;EACAH,kBAAkB,CAACO,IAAD,CAAlB,GAA2BG,KAA3B;EACAT,eAAe,CAACS,KAAD,CAAf,GAAyBH,IAAzB;AACH;;AACD,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;EACzBH,kBAAkB,CAACG,CAAC,CAACQ,QAAF,CAAW,EAAX,CAAD,CAAlB,GAAqCR,CAAC,GAAG,EAAzC;EACA,MAAMI,IAAI,GAAGJ,CAAC,CAACQ,QAAF,CAAW,EAAX,CAAb;EACA,MAAMD,KAAK,GAAGP,CAAC,GAAG,EAAlB;EACAH,kBAAkB,CAACO,IAAD,CAAlB,GAA2BG,KAA3B;EACAT,eAAe,CAACS,KAAD,CAAf,GAAyBH,IAAzB;AACH;;AACDP,kBAAkB,CAAC,GAAD,CAAlB,GAA0B,EAA1B;AACAC,eAAe,CAAC,EAAD,CAAf,GAAsB,GAAtB;AACAD,kBAAkB,CAAC,GAAD,CAAlB,GAA0B,EAA1B;AACAC,eAAe,CAAC,EAAD,CAAf,GAAsB,GAAtB;AACA,MAAMW,aAAa,GAAG,CAAtB;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,cAAc,GAAG,QAAvB;AACA,SAASd,kBAAT,EAA6BC,eAA7B,EAA8CW,aAA9C,EAA6DC,WAA7D,EAA0EC,cAA1E"},"metadata":{},"sourceType":"module"}