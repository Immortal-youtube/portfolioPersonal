{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\n\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\n\n\nclass PoolClosedError extends error_1.MongoDriverError {\n  constructor(pool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  get name() {\n    return 'MongoPoolClosedError';\n  }\n\n}\n\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\n\nclass PoolClearedError extends error_1.MongoNetworkError {\n  constructor(pool, message) {\n    const errorMessage = message ? message : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage);\n    this.address = pool.address;\n    this.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n  }\n\n  get name() {\n    return 'MongoPoolClearedError';\n  }\n\n}\n\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\n\nclass PoolClearedOnNetworkError extends PoolClearedError {\n  constructor(pool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n\n  get name() {\n    return 'PoolClearedOnNetworkError';\n  }\n\n}\n\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\n\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n  constructor(message, address) {\n    super(message);\n    this.address = address;\n  }\n\n  get name() {\n    return 'MongoWaitQueueTimeoutError';\n  }\n\n}\n\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"mappings":";;;;;;;AAAA;AAGA;;;;;;AAIA,MAAaA,eAAb,SAAqCC,wBAArC,CAAqD;EAInDC,YAAYC,IAAZ,EAAgC;IAC9B,MAAM,iEAAN;IACA,KAAKC,OAAL,GAAeD,IAAI,CAACC,OAApB;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,sBAAP;EACD;;AAXkD;;AAArDC;AAcA;;;;;AAIA,MAAaC,gBAAb,SAAsCN,yBAAtC,CAAuD;EAIrDC,YAAYC,IAAZ,EAAkCK,OAAlC,EAAkD;IAChD,MAAMC,YAAY,GAAGD,OAAO,GACxBA,OADwB,GAExB,uBAAuBL,IAAI,CAACC,OAAO,wDAAwDD,IAAI,CAACO,WAAL,EAAkBF,OAAO,GAFxH;IAGA,MAAMC,YAAN;IACA,KAAKL,OAAL,GAAeD,IAAI,CAACC,OAApB;IAEA,KAAKO,aAAL,CAAmBV,wBAAgBW,mBAAnC;EACD;;EAEgB,IAAJP,IAAI;IACf,OAAO,uBAAP;EACD;;AAhBoD;;AAAvDC;AAmBA;;;;;AAIA,MAAaO,yBAAb,SAA+CN,gBAA/C,CAA+D;EAC7DL,YAAYC,IAAZ,EAAgC;IAC9B,MAAMA,IAAN,EAAY,iBAAiBA,IAAI,CAACC,OAAO,4CAAzC;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,2BAAP;EACD;;AAP4D;;AAA/DC;AAUA;;;;;AAIA,MAAaQ,qBAAb,SAA2Cb,wBAA3C,CAA2D;EAIzDC,YAAYM,OAAZ,EAA6BJ,OAA7B,EAA4C;IAC1C,MAAMI,OAAN;IACA,KAAKJ,OAAL,GAAeA,OAAf;EACD;;EAEgB,IAAJC,IAAI;IACf,OAAO,4BAAP;EACD;;AAXwD;;AAA3DC","names":["PoolClosedError","error_1","constructor","pool","address","name","exports","PoolClearedError","message","errorMessage","serverError","addErrorLabel","RetryableWriteError","PoolClearedOnNetworkError","WaitQueueTimeoutError"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cmap\\errors.ts"],"sourcesContent":["import { MongoDriverError, MongoErrorLabel, MongoNetworkError } from '../error';\nimport type { ConnectionPool } from './connection_pool';\n\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nexport class PoolClosedError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClosedError';\n  }\n}\n\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nexport class PoolClearedError extends MongoNetworkError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool, message?: string) {\n    const errorMessage = message\n      ? message\n      : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage);\n    this.address = pool.address;\n\n    this.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n  }\n\n  override get name(): string {\n    return 'MongoPoolClearedError';\n  }\n}\n\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nexport class PoolClearedOnNetworkError extends PoolClearedError {\n  constructor(pool: ConnectionPool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n\n  override get name(): string {\n    return 'PoolClearedOnNetworkError';\n  }\n}\n\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nexport class WaitQueueTimeoutError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(message: string, address: string) {\n    super(message);\n    this.address = address;\n  }\n\n  override get name(): string {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}