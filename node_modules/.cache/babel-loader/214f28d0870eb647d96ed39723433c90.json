{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionsOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass OptionsOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    coll.s.db.listCollections({\n      name: coll.collectionName\n    }, { ...this.options,\n      nameOnly: false,\n      readPreference: this.readPreference,\n      session\n    }).toArray().then(collections => {\n      if (collections.length === 0) {\n        // TODO(NODE-3485)\n        return callback(new error_1.MongoAPIError(`collection ${coll.namespace} not found`));\n      }\n\n      callback(undefined, collections[0].options);\n    }, error => callback(error));\n  }\n\n}\n\nexports.OptionsOperation = OptionsOperation;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAIA;AAEA;;;AACA,MAAaA,gBAAb,SAAsCC,6BAAtC,CAAiE;EAI/DC,YAAYC,UAAZ,EAAoCC,OAApC,EAA6D;IAC3D,MAAMA,OAAN;IACA,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKD,UAAL,GAAkBA,UAAlB;EACD;;EAEQE,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGc;IAE5B,MAAMC,IAAI,GAAG,KAAKN,UAAlB;IAEAM,IAAI,CAACC,CAAL,CAAOC,EAAP,CACGC,eADH,CAEI;MAAEC,IAAI,EAAEJ,IAAI,CAACK;IAAb,CAFJ,EAGI,EAAE,GAAG,KAAKV,OAAV;MAAmBW,QAAQ,EAAE,KAA7B;MAAoCC,cAAc,EAAE,KAAKA,cAAzD;MAAyET;IAAzE,CAHJ,EAKGU,OALH,GAMGC,IANH,CAOIC,WAAW,IAAG;MACZ,IAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;QAC5B;QACA,OAAOZ,QAAQ,CAAC,IAAIa,qBAAJ,CAAkB,cAAcZ,IAAI,CAACa,SAAS,YAA9C,CAAD,CAAf;MACD;;MAEDd,QAAQ,CAACe,SAAD,EAAYJ,WAAW,CAAC,CAAD,CAAX,CAAef,OAA3B,CAAR;IACD,CAdL,EAeIoB,KAAK,IAAIhB,QAAQ,CAACgB,KAAD,CAfrB;EAiBD;;AAlC8D;;AAAjEC","names":["OptionsOperation","operation_1","constructor","collection","options","execute","server","session","callback","coll","s","db","listCollections","name","collectionName","nameOnly","readPreference","toArray","then","collections","length","error_1","namespace","undefined","error","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\options_operation.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoAPIError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { Callback } from '../utils';\nimport { AbstractOperation, OperationOptions } from './operation';\n\n/** @internal */\nexport class OptionsOperation extends AbstractOperation<Document> {\n  override options: OperationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: OperationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const coll = this.collection;\n\n    coll.s.db\n      .listCollections(\n        { name: coll.collectionName },\n        { ...this.options, nameOnly: false, readPreference: this.readPreference, session }\n      )\n      .toArray()\n      .then(\n        collections => {\n          if (collections.length === 0) {\n            // TODO(NODE-3485)\n            return callback(new MongoAPIError(`collection ${coll.namespace} not found`));\n          }\n\n          callback(undefined, collections[0].options);\n        },\n        error => callback(error)\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}