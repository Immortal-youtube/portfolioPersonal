{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\n\nconst utils_1 = require(\"../utils\");\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\n\n\nclass DistinctOperation extends command_1.CommandOperation {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.options = options ?? {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n\n\n    if (typeof options.comment !== 'undefined') {\n      cmd.comment = options.comment;\n    } // Do we have a readConcern specified\n\n\n    (0, utils_1.decorateWithReadConcern)(cmd, coll, options); // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n\n}\n\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"mappings":";;;;;;;AAIA;;AACA;;AACA;AAKA;;;;;;AAIA,MAAaA,iBAAb,SAAuCC,0BAAvC,CAA8D;EAQ5D;;;;;;;;EAQAC,YAAYC,UAAZ,EAAoCC,GAApC,EAAiDC,KAAjD,EAAkEC,OAAlE,EAA2F;IACzF,MAAMH,UAAN,EAAkBG,OAAlB;IAEA,KAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;IACA,KAAKH,UAAL,GAAkBA,UAAlB;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKC,KAAL,GAAaA,KAAb;EACD;;EAEQE,OAAO,CACdC,MADc,EAEdC,OAFc,EAGdC,QAHc,EAGW;IAEzB,MAAMC,IAAI,GAAG,KAAKR,UAAlB;IACA,MAAMC,GAAG,GAAG,KAAKA,GAAjB;IACA,MAAMC,KAAK,GAAG,KAAKA,KAAnB;IACA,MAAMC,OAAO,GAAG,KAAKA,OAArB,CALyB,CAOzB;;IACA,MAAMM,GAAG,GAAa;MACpBC,QAAQ,EAAEF,IAAI,CAACG,cADK;MAEpBV,GAAG,EAAEA,GAFe;MAGpBC,KAAK,EAAEA;IAHa,CAAtB,CARyB,CAczB;;IACA,IAAI,OAAOC,OAAO,CAACS,SAAf,KAA6B,QAAjC,EAA2C;MACzCH,GAAG,CAACG,SAAJ,GAAgBT,OAAO,CAACS,SAAxB;IACD,CAjBwB,CAmBzB;IACA;;;IACA,IAAI,OAAOT,OAAO,CAACU,OAAf,KAA2B,WAA/B,EAA4C;MAC1CJ,GAAG,CAACI,OAAJ,GAAcV,OAAO,CAACU,OAAtB;IACD,CAvBwB,CAyBzB;;;IACA,qCAAwBJ,GAAxB,EAA6BD,IAA7B,EAAmCL,OAAnC,EA1ByB,CA4BzB;;IACA,IAAI;MACF,mCAAsBM,GAAtB,EAA2BD,IAA3B,EAAiCL,OAAjC;IACD,CAFD,CAEE,OAAOW,GAAP,EAAY;MACZ,OAAOP,QAAQ,CAACO,GAAD,CAAf;IACD;;IAED,MAAMC,cAAN,CAAqBV,MAArB,EAA6BC,OAA7B,EAAsCG,GAAtC,EAA2C,CAACK,GAAD,EAAME,MAAN,KAAgB;MACzD,IAAIF,GAAJ,EAAS;QACPP,QAAQ,CAACO,GAAD,CAAR;QACA;MACD;;MAEDP,QAAQ,CAACU,SAAD,EAAY,KAAKC,OAAL,GAAeF,MAAf,GAAwBA,MAAM,CAACG,MAA3C,CAAR;IACD,CAPD;EAQD;;AAvE2D;;AAA9DC;AA0EA,+BAAcvB,iBAAd,EAAiC,CAACwB,mBAAOC,cAAR,EAAwBD,mBAAOE,SAA/B,EAA0CF,mBAAOG,WAAjD,CAAjC","names":["DistinctOperation","command_1","constructor","collection","key","query","options","execute","server","session","callback","coll","cmd","distinct","collectionName","maxTimeMS","comment","err","executeCommand","result","undefined","explain","values","exports","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\operations\\distinct.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, decorateWithCollation, decorateWithReadConcern } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport type DistinctOptions = CommandOperationOptions;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nexport class DistinctOperation extends CommandOperation<any[]> {\n  override options: DistinctOptions;\n  collection: Collection;\n  /** Field of the document to find distinct values for. */\n  key: string;\n  /** The query for filtering the set of documents to which we apply the distinct filter. */\n  query: Document;\n\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection: Collection, key: string, query: Document, options?: DistinctOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<any[]>\n  ): void {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd: Document = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (typeof options.comment !== 'undefined') {\n      cmd.comment = options.comment;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXPLAINABLE]);\n"]},"metadata":{},"sourceType":"script"}