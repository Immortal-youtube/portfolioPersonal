{"ast":null,"code":"import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\n\nconst decorateDefaultRegion = region => {\n  if (typeof region !== \"function\") {\n    return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n  }\n\n  return async () => {\n    try {\n      return await region();\n    } catch (e) {\n      return ASSUME_ROLE_DEFAULT_REGION;\n    }\n  };\n};\n\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  let closureSourceCreds;\n  return async (sourceCreds, params) => {\n    closureSourceCreds = sourceCreds;\n\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        credentialDefaultProvider: () => async () => closureSourceCreds,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  return async params => {\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n    }\n\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const decorateDefaultCredentialProvider = provider => input => provider({\n  roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n  roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n  ...input\n});","map":{"version":3,"names":["AssumeRoleCommand","AssumeRoleWithWebIdentityCommand","ASSUME_ROLE_DEFAULT_REGION","decorateDefaultRegion","region","undefined","e","getDefaultRoleAssumer","stsOptions","stsClientCtor","stsClient","closureSourceCreds","sourceCreds","params","logger","requestHandler","credentialDefaultProvider","Credentials","send","AccessKeyId","SecretAccessKey","Error","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","getDefaultRoleAssumerWithWebIdentity","decorateDefaultCredentialProvider","provider","input","roleAssumer","roleAssumerWithWebIdentity"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js"],"sourcesContent":["import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = (region) => {\n    if (typeof region !== \"function\") {\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n    }\n    return async () => {\n        try {\n            return await region();\n        }\n        catch (e) {\n            return ASSUME_ROLE_DEFAULT_REGION;\n        }\n    };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}