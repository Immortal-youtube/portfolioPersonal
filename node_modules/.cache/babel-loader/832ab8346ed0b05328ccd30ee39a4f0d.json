{"ast":null,"code":"import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = function () {\n  let conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const conditionsReferenceRecord = {};\n\n  for (const condition of conditions) {\n    const {\n      result,\n      toAssign\n    } = evaluateCondition(condition, { ...options,\n      referenceRecord: { ...options.referenceRecord,\n        ...conditionsReferenceRecord\n      }\n    });\n\n    if (!result) {\n      return {\n        result\n      };\n    }\n\n    if (toAssign) {\n      conditionsReferenceRecord[toAssign.name] = toAssign.value;\n      options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n    }\n  }\n\n  return {\n    result: true,\n    referenceRecord: conditionsReferenceRecord\n  };\n};","map":{"version":3,"names":["debugId","toDebugString","evaluateCondition","evaluateConditions","conditions","options","conditionsReferenceRecord","condition","result","toAssign","referenceRecord","name","value","logger","debug"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js"],"sourcesContent":["import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = (conditions = [], options) => {\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions) {\n        const { result, toAssign } = evaluateCondition(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord,\n            },\n        });\n        if (!result) {\n            return { result };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n        }\n    }\n    return { result: true, referenceRecord: conditionsReferenceRecord };\n};\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,aAAlB,QAAuC,UAAvC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAO,MAAMC,kBAAkB,GAAG,YAA8B;EAAA,IAA7BC,UAA6B,uEAAhB,EAAgB;EAAA,IAAZC,OAAY;EAC5D,MAAMC,yBAAyB,GAAG,EAAlC;;EACA,KAAK,MAAMC,SAAX,IAAwBH,UAAxB,EAAoC;IAChC,MAAM;MAAEI,MAAF;MAAUC;IAAV,IAAuBP,iBAAiB,CAACK,SAAD,EAAY,EACtD,GAAGF,OADmD;MAEtDK,eAAe,EAAE,EACb,GAAGL,OAAO,CAACK,eADE;QAEb,GAAGJ;MAFU;IAFqC,CAAZ,CAA9C;;IAOA,IAAI,CAACE,MAAL,EAAa;MACT,OAAO;QAAEA;MAAF,CAAP;IACH;;IACD,IAAIC,QAAJ,EAAc;MACVH,yBAAyB,CAACG,QAAQ,CAACE,IAAV,CAAzB,GAA2CF,QAAQ,CAACG,KAApD;MACAP,OAAO,CAACQ,MAAR,EAAgBC,KAAhB,GAAwBd,OAAxB,EAAkC,WAAUS,QAAQ,CAACE,IAAK,OAAMV,aAAa,CAACQ,QAAQ,CAACG,KAAV,CAAiB,EAA9F;IACH;EACJ;;EACD,OAAO;IAAEJ,MAAM,EAAE,IAAV;IAAgBE,eAAe,EAAEJ;EAAjC,CAAP;AACH,CAnBM"},"metadata":{},"sourceType":"module"}