{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explain = exports.ExplainVerbosity = void 0;\n\nconst error_1 = require(\"./error\");\n/** @public */\n\n\nexports.ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\n\nclass Explain {\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  static fromOptions(options) {\n    if (options?.explain == null) return;\n    const explain = options.explain;\n\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n\n}\n\nexports.Explain = Explain;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;AACaA,2BAAmBC,MAAM,CAACC,MAAP,CAAc;EAC5CC,YAAY,EAAE,cAD8B;EAE5CC,oBAAoB,EAAE,sBAFsB;EAG5CC,cAAc,EAAE,gBAH4B;EAI5CC,iBAAiB,EAAE;AAJyB,CAAd,CAAnB;AAwBb;;AACA,MAAaC,OAAb,CAAoB;EAGlBC,YAAYC,SAAZ,EAA2C;IACzC,IAAI,OAAOA,SAAP,KAAqB,SAAzB,EAAoC;MAClC,KAAKA,SAAL,GAAiBA,SAAS,GACtBT,yBAAiBM,iBADK,GAEtBN,yBAAiBG,YAFrB;IAGD,CAJD,MAIO;MACL,KAAKM,SAAL,GAAiBA,SAAjB;IACD;EACF;;EAEiB,OAAXC,WAAW,CAACC,OAAD,EAAyB;IACzC,IAAIA,OAAO,EAAEC,OAAT,IAAoB,IAAxB,EAA8B;IAE9B,MAAMA,OAAO,GAAGD,OAAO,CAACC,OAAxB;;IACA,IAAI,OAAOA,OAAP,KAAmB,SAAnB,IAAgC,OAAOA,OAAP,KAAmB,QAAvD,EAAiE;MAC/D,OAAO,IAAIL,OAAJ,CAAYK,OAAZ,CAAP;IACD;;IAED,MAAM,IAAIC,iCAAJ,CAA8B,+CAA9B,CAAN;EACD;;AAtBiB;;AAApBb","names":["exports","Object","freeze","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","fromOptions","options","explain","error_1"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\explain.ts"],"sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike;\n}\n\n/** @internal */\nexport class Explain {\n  verbosity: ExplainVerbosity;\n\n  constructor(verbosity: ExplainVerbosityLike) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  static fromOptions(options?: ExplainOptions): Explain | undefined {\n    if (options?.explain == null) return;\n\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    throw new MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}