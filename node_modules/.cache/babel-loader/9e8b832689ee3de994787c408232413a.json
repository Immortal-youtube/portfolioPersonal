{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nasync function typeImplementation(element, text, _ref) {\n  let {\n    delay,\n    skipClick = false,\n    skipAutoClose = false,\n    initialSelectionStart = undefined,\n    initialSelectionEnd = undefined\n  } = _ref;\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0\n  // but most of the time when people call \"type\", they expect it to type\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitly start typing with the cursor at 0. Not super common.\n\n\n  const value = (0, _utils.getValue)(currentElement());\n  const {\n    selectionStart,\n    selectionEnd\n  } = (0, _utils.getSelectionRange)(element);\n\n  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n  }\n\n  const {\n    promise,\n    releaseAllKeys\n  } = (0, _keyboard.keyboardImplementationWrapper)(text, {\n    delay,\n    document: element.ownerDocument\n  });\n\n  if (delay > 0) {\n    await promise;\n  }\n\n  if (!skipAutoClose) {\n    releaseAllKeys();\n  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n  return promise;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","typeImplementation","_utils","require","_click","_keyboard","element","text","delay","skipClick","skipAutoClose","initialSelectionStart","undefined","initialSelectionEnd","disabled","click","currentElement","getActiveElement","ownerDocument","getValue","selectionStart","selectionEnd","getSelectionRange","setSelectionRange","length","promise","releaseAllKeys","keyboardImplementationWrapper","document"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@testing-library/user-event/dist/type/typeImplementation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nasync function typeImplementation(element, text, {\n  delay,\n  skipClick = false,\n  skipAutoClose = false,\n  initialSelectionStart = undefined,\n  initialSelectionEnd = undefined\n}) {\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0\n  // but most of the time when people call \"type\", they expect it to type\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitly start typing with the cursor at 0. Not super common.\n\n\n  const value = (0, _utils.getValue)(currentElement());\n  const {\n    selectionStart,\n    selectionEnd\n  } = (0, _utils.getSelectionRange)(element);\n\n  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n  }\n\n  const {\n    promise,\n    releaseAllKeys\n  } = (0, _keyboard.keyboardImplementationWrapper)(text, {\n    delay,\n    document: element.ownerDocument\n  });\n\n  if (delay > 0) {\n    await promise;\n  }\n\n  if (!skipAutoClose) {\n    releaseAllKeys();\n  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n  return promise;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,eAAeF,kBAAf,CAAkCK,OAAlC,EAA2CC,IAA3C,QAMG;EAAA,IAN8C;IAC/CC,KAD+C;IAE/CC,SAAS,GAAG,KAFmC;IAG/CC,aAAa,GAAG,KAH+B;IAI/CC,qBAAqB,GAAGC,SAJuB;IAK/CC,mBAAmB,GAAGD;EALyB,CAM9C;EACD;EACA;EACA,IAAIN,OAAO,CAACQ,QAAZ,EAAsB;EACtB,IAAI,CAACL,SAAL,EAAgB,CAAC,GAAGL,MAAM,CAACW,KAAX,EAAkBT,OAAlB,EAJf,CAI2C;;EAE5C,MAAMU,cAAc,GAAG,MAAM,CAAC,GAAGd,MAAM,CAACe,gBAAX,EAA6BX,OAAO,CAACY,aAArC,CAA7B,CANC,CAMiF;EAClF;EACA;EACA;EACA;EACA;EACA;EACA;;;EAGA,MAAMlB,KAAK,GAAG,CAAC,GAAGE,MAAM,CAACiB,QAAX,EAAqBH,cAAc,EAAnC,CAAd;EACA,MAAM;IACJI,cADI;IAEJC;EAFI,IAGF,CAAC,GAAGnB,MAAM,CAACoB,iBAAX,EAA8BhB,OAA9B,CAHJ;;EAKA,IAAIN,KAAK,IAAI,IAAT,KAAkBoB,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,CAAhE,MAAuEC,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,CAAjH,CAAJ,EAAyH;IACvH,CAAC,GAAGnB,MAAM,CAACqB,iBAAX,EAA8BP,cAAc,EAA5C,EAAgDL,qBAAqB,IAAI,IAAzB,GAAgCA,qBAAhC,GAAwDX,KAAK,CAACwB,MAA9G,EAAsHX,mBAAmB,IAAI,IAAvB,GAA8BA,mBAA9B,GAAoDb,KAAK,CAACwB,MAAhL;EACD;;EAED,MAAM;IACJC,OADI;IAEJC;EAFI,IAGF,CAAC,GAAGrB,SAAS,CAACsB,6BAAd,EAA6CpB,IAA7C,EAAmD;IACrDC,KADqD;IAErDoB,QAAQ,EAAEtB,OAAO,CAACY;EAFmC,CAAnD,CAHJ;;EAQA,IAAIV,KAAK,GAAG,CAAZ,EAAe;IACb,MAAMiB,OAAN;EACD;;EAED,IAAI,CAACf,aAAL,EAAoB;IAClBgB,cAAc;EACf,CAxCA,CAwCC;;;EAGF,OAAOD,OAAP;AACD"},"metadata":{},"sourceType":"script"}