{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\n\nconst dns = require(\"dns\");\n\nconst timers_1 = require(\"timers\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\n\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\n\n\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n\n}\n\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\n\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  } // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n\n\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n\n    this._timeout = (0, timers_1.setTimeout)(() => {\n      this._poll().catch(() => null);\n    }, this.intervalMS);\n  }\n\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure() {\n    this.haMode = true;\n    this.schedule();\n  }\n\n  async _poll() {\n    const generation = this.generation;\n    let srvRecords;\n\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure();\n      return;\n    }\n\n    if (generation !== this.generation) {\n      return;\n    }\n\n    const finalAddresses = [];\n\n    for (const record of srvRecords) {\n      if (matchesParentDomain(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      }\n    }\n\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n\n    this.success(finalAddresses);\n  }\n\n}\n\nexports.SrvPoller = SrvPoller;\n/** @event */\n\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"mappings":"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","names":["matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","constructor","srvRecords","hostnames","Set","map","r","utils_1","fromSrvRecord","toString","exports","SrvPoller","mongo_types_1","options","srvHost","error_1","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","haMode","generation","_timeout","undefined","intervalMS","start","schedule","stop","_poll","catch","success","emit","SRV_RECORD_DISCOVERY","failure","dns","promises","resolveSrv","dnsError","finalAddresses","record","name","push","length"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sdam\\srv_polling.ts"],"sourcesContent":["import * as dns from 'dns';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoRuntimeError } from '../error';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { HostAddress } from '../utils';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * @internal\n * @category Event\n */\nexport class SrvPollingEvent {\n  srvRecords: dns.SrvRecord[];\n  constructor(srvRecords: dns.SrvRecord[]) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames(): Set<string> {\n    return new Set(this.srvRecords.map(r => HostAddress.fromSrvRecord(r).toString()));\n  }\n}\n\n/** @internal */\nexport interface SrvPollerOptions {\n  srvServiceName: string;\n  srvMaxHosts: number;\n  srvHost: string;\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport type SrvPollerEvents = {\n  srvRecordDiscovery(event: SrvPollingEvent): void;\n};\n\n/** @internal */\nexport class SrvPoller extends TypedEventEmitter<SrvPollerEvents> {\n  srvHost: string;\n  rescanSrvIntervalMS: number;\n  heartbeatFrequencyMS: number;\n  haMode: boolean;\n  generation: number;\n  srvMaxHosts: number;\n  srvServiceName: string;\n  _timeout?: NodeJS.Timeout;\n\n  /** @event */\n  static readonly SRV_RECORD_DISCOVERY = 'srvRecordDiscovery' as const;\n\n  constructor(options: SrvPollerOptions) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = undefined;\n  }\n\n  get srvAddress(): string {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS(): number {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start(): void {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n  schedule(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => {\n      this._poll().catch(() => null);\n    }, this.intervalMS);\n  }\n\n  success(srvRecords: dns.SrvRecord[]): void {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(): void {\n    this.haMode = true;\n    this.schedule();\n  }\n\n  async _poll(): Promise<void> {\n    const generation = this.generation;\n    let srvRecords;\n\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure();\n      return;\n    }\n\n    if (generation !== this.generation) {\n      return;\n    }\n\n    const finalAddresses: dns.SrvRecord[] = [];\n    for (const record of srvRecords) {\n      if (matchesParentDomain(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      }\n    }\n\n    if (!finalAddresses.length) {\n      this.failure();\n      return;\n    }\n\n    this.success(finalAddresses);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}