{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport const getDefaultRetryQuota = (initialRetryTokens, options) => {\n  const MAX_CAPACITY = initialRetryTokens;\n  const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n  const retryCost = options?.retryCost ?? RETRY_COST;\n  const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n  let availableCapacity = initialRetryTokens;\n\n  const getCapacityAmount = error => error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost;\n\n  const hasRetryTokens = error => getCapacityAmount(error) <= availableCapacity;\n\n  const retrieveRetryTokens = error => {\n    if (!hasRetryTokens(error)) {\n      throw new Error(\"No retry token available\");\n    }\n\n    const capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n\n  const releaseRetryTokens = capacityReleaseAmount => {\n    availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n\n  return Object.freeze({\n    hasRetryTokens,\n    retrieveRetryTokens,\n    releaseRetryTokens\n  });\n};","map":{"version":3,"names":["NO_RETRY_INCREMENT","RETRY_COST","TIMEOUT_RETRY_COST","getDefaultRetryQuota","initialRetryTokens","options","MAX_CAPACITY","noRetryIncrement","retryCost","timeoutRetryCost","availableCapacity","getCapacityAmount","error","name","hasRetryTokens","retrieveRetryTokens","Error","capacityAmount","releaseRetryTokens","capacityReleaseAmount","Math","min","Object","freeze"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js"],"sourcesContent":["import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport const getDefaultRetryQuota = (initialRetryTokens, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n    const retryCost = options?.retryCost ?? RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;\n    const retrieveRetryTokens = (error) => {\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n    });\n};\n"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,UAA7B,EAAyCC,kBAAzC,QAAmE,qBAAnE;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,kBAAD,EAAqBC,OAArB,KAAiC;EACjE,MAAMC,YAAY,GAAGF,kBAArB;EACA,MAAMG,gBAAgB,GAAGF,OAAO,EAAEE,gBAAT,IAA6BP,kBAAtD;EACA,MAAMQ,SAAS,GAAGH,OAAO,EAAEG,SAAT,IAAsBP,UAAxC;EACA,MAAMQ,gBAAgB,GAAGJ,OAAO,EAAEI,gBAAT,IAA6BP,kBAAtD;EACA,IAAIQ,iBAAiB,GAAGN,kBAAxB;;EACA,MAAMO,iBAAiB,GAAIC,KAAD,IAAYA,KAAK,CAACC,IAAN,KAAe,cAAf,GAAgCJ,gBAAhC,GAAmDD,SAAzF;;EACA,MAAMM,cAAc,GAAIF,KAAD,IAAWD,iBAAiB,CAACC,KAAD,CAAjB,IAA4BF,iBAA9D;;EACA,MAAMK,mBAAmB,GAAIH,KAAD,IAAW;IACnC,IAAI,CAACE,cAAc,CAACF,KAAD,CAAnB,EAA4B;MACxB,MAAM,IAAII,KAAJ,CAAU,0BAAV,CAAN;IACH;;IACD,MAAMC,cAAc,GAAGN,iBAAiB,CAACC,KAAD,CAAxC;IACAF,iBAAiB,IAAIO,cAArB;IACA,OAAOA,cAAP;EACH,CAPD;;EAQA,MAAMC,kBAAkB,GAAIC,qBAAD,IAA2B;IAClDT,iBAAiB,IAAIS,qBAAqB,IAAIZ,gBAA9C;IACAG,iBAAiB,GAAGU,IAAI,CAACC,GAAL,CAASX,iBAAT,EAA4BJ,YAA5B,CAApB;EACH,CAHD;;EAIA,OAAOgB,MAAM,CAACC,MAAP,CAAc;IACjBT,cADiB;IAEjBC,mBAFiB;IAGjBG;EAHiB,CAAd,CAAP;AAKH,CAzBM"},"metadata":{},"sourceType":"module"}