{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\n\nconst timers_1 = require(\"timers\");\n\nconst util_1 = require(\"util\");\n\nconst connection_string_1 = require(\"../connection_string\");\n\nconst constants_1 = require(\"../constants\");\n\nconst error_1 = require(\"../error\");\n\nconst mongo_types_1 = require(\"../mongo_types\");\n\nconst read_preference_1 = require(\"../read_preference\");\n\nconst utils_1 = require(\"../utils\");\n\nconst common_1 = require(\"./common\");\n\nconst events_1 = require(\"./events\");\n\nconst server_1 = require(\"./server\");\n\nconst server_description_1 = require(\"./server_description\");\n\nconst server_selection_1 = require(\"./server_selection\");\n\nconst srv_polling_1 = require(\"./srv_polling\");\n\nconst topology_description_1 = require(\"./topology_description\"); // Global state\n\n\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\n\nconst kCancelled = Symbol('cancelled');\n/** @internal */\n\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\n\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    super();\n    this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback)); // Options should only be undefined in tests, MongoClient will always have defined options\n\n    options = options ?? {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist = [];\n\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  detectShardedTopology(event) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ?? {};\n\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, common_1.STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)])); // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const exitWithError = error => callback ? callback(error) : this.emit(Topology.ERROR, error);\n\n    const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({\n          force: false\n        }, () => exitWithError(err));\n      } // TODO: NODE-2471\n\n\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          callback?.(undefined, this);\n        });\n        return;\n      }\n\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      callback?.(undefined, this);\n    });\n  }\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options ?? {};\n\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return callback?.();\n    }\n\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return (0, util_1.promisify)(destroyServer)(server, this, options);\n    });\n    Promise.all(destroyedServers).then(() => {\n      this.s.servers.clear();\n      stateTransition(this, common_1.STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n      (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n        this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      }\n\n      this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n      stateTransition(this, common_1.STATE_CLOSED); // emit an event for close\n\n      this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }).finally(() => callback?.());\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n\n\n  selectServer(selector, options, callback) {\n    let serverSelector;\n\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n\n\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    if (!previousServerDescription) {\n      return;\n    } // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  } // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n\n\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n\n}\n\nexports.Topology = Topology;\n/** @event */\n\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\n\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\n\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\n\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\n\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\n\nTopology.ERROR = constants_1.ERROR;\n/** @event */\n\nTopology.OPEN = constants_1.OPEN;\n/** @event */\n\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\n\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\n\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options ?? {};\n\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\n\n\nfunction topologyTypeFromOptions(options) {\n  if (options?.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\n\n\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\n\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n\n    if (server) {\n      server.s.description = incomingServerDescription;\n\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.s.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n\n        if (shouldMarkPoolReady) {\n          server.s.pool.ready();\n        }\n      }\n    }\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        (0, timers_1.clearTimeout)(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    let selectedServer;\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n\n    if (!selectedServer) {\n      waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n      return;\n    }\n\n    const transaction = waitQueueMember.transaction;\n\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\n\n\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n\n}\n\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"mappings":"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","names":["globalTopologyCounter","stateTransition","common_1","kCancelled","Symbol","kWaitQueue","Topology","mongo_types_1","constructor","seeds","options","selectServerAsync","selector","callback","selectServer","hosts","utils_1","fromString","Object","fromEntries","connection_string_1","entries","Array","isArray","seedlist","seed","push","error_1","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","serverDescriptions","Map","hostAddress","set","toString","server_description_1","s","id","state","description","topology_description_1","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","srvHost","loadBalanced","srvPoller","srv_polling_1","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","events_1","capabilities","ServerCapabilities","lastHello","connect","TOPOLOGY_OPENING","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","exitWithError","error","ERROR","readPreference","read_preference_1","primary","err","server","close","force","skipPingOnConnect","for","command","ping","OPEN","CONNECT","destroyedServers","destroyServer","Promise","all","then","clear","drainWaitQueue","stop","removeListener","TOPOLOGY_CLOSED","finally","serverSelector","translate","assign","isSharded","session","transaction","waitQueueMember","timer","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","SERVER_DESCRIPTION_CHANGED","auth","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","result","maxWireVersion","commonWireVersion","exports","constants_1","topology","removeAllListeners","destroy","SERVER_CLOSED","directConnection","ReplicaSetNoPrimary","LoadBalanced","SERVER_OPENING","server_1","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","hasErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","pool","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","shift","membersToProcess","i","selectedDescriptions","selectedServer","descriptions","server1","server2","operationCount","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\sdam\\topology.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\nimport { promisify } from 'util';\n\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents, DestroyOptions } from '../cmap/connection';\nimport type { CloseOptions, ConnectionPoolEvents } from '../cmap/connection_pool';\nimport { DEFAULT_OPTIONS, FEATURE_FLAGS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoClient, ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport type { Transaction } from '../transactions';\nimport {\n  Callback,\n  ClientMetadata,\n  EventEmitterWithState,\n  HostAddress,\n  List,\n  makeStateMachine,\n  ns,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  ClusterTime,\n  drainTimerQueue,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TimerQueue,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport { Server, ServerEvents, ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, ServerSelector } from './server_selection';\nimport { SrvPoller, SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  transaction?: Transaction;\n  callback: ServerSelectionCallback;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @internal */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  /** @internal */\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** @internal */\n  [featureFlag: symbol]: any;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: List<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  client!: MongoClient;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  selectServerAsync: (\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions\n  ) => Promise<Server>;\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds: string | string[] | HostAddress | HostAddress[], options: TopologyOptions) {\n    super();\n\n    this.selectServerAsync = promisify(\n      (\n        selector: string | ReadPreference | ServerSelector,\n        options: SelectServerOptions,\n        callback: (e: Error, r: Server) => void\n      ) => this.selectServer(selector, options, callback as any)\n    );\n\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  connect(callback: Callback): void;\n  connect(options: ConnectOptions, callback: Callback): void;\n  connect(options?: ConnectOptions | Callback, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const exitWithError = (error: Error) =>\n      callback ? callback(error) : this.emit(Topology.ERROR, error);\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({ force: false }, () => exitWithError(err));\n      }\n\n      // TODO: NODE-2471\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command(ns('admin.$cmd'), { ping: 1 }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n\n          stateTransition(this, STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n\n          callback?.(undefined, this);\n        });\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      callback?.(undefined, this);\n    });\n  }\n\n  /** Close this topology */\n  close(callback: Callback): void;\n  close(options: CloseOptions): void;\n  close(options: CloseOptions, callback: Callback): void;\n  close(options?: CloseOptions | Callback, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n    options = options ?? {};\n\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return callback?.();\n    }\n\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return promisify(destroyServer)(server, this, options as CloseOptions);\n    });\n\n    Promise.all(destroyedServers)\n      .then(() => {\n        this.s.servers.clear();\n\n        stateTransition(this, STATE_CLOSING);\n\n        drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n        drainTimerQueue(this.s.connectionTimers);\n\n        if (this.s.srvPoller) {\n          this.s.srvPoller.stop();\n          this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n        stateTransition(this, STATE_CLOSED);\n\n        // emit an event for close\n        this.emit(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n      })\n      .finally(() => callback?.());\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions,\n    callback: Callback<Server>\n  ): void {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport(): boolean {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport(): boolean {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | null {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(\n  server: Server,\n  topology: Topology,\n  options?: DestroyOptions,\n  callback?: Callback\n) {\n  options = options ?? {};\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(\n      Topology.SERVER_CLOSED,\n      new ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emit(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (\n        incomingServerDescription.error instanceof MongoError &&\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\n      ) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\n          MongoErrorLabel.InterruptInUseConnections\n        );\n\n        server.s.pool.clear({ interruptInUseConnections });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady =\n          incomingServerDescription.isDataBearing ||\n          (incomingServerDescription.type !== ServerType.Unknown &&\n            newTopologyType === TopologyType.Single);\n        if (shouldMarkPoolReady) {\n          server.s.pool.ready();\n        }\n      }\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, err?: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = shuffle(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n\n      selectedServer =\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\n          ? server1\n          : server2;\n    }\n\n    if (!selectedServer) {\n      waitQueueMember.callback(\n        new MongoServerSelectionError(\n          'server selection returned a server description but the server was not found in the topology',\n          topology.description\n        )\n      );\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}