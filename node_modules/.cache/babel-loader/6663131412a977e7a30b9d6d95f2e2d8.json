{"ast":null,"code":"import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = (_ref, unsignableHeaders, signableHeaders) => {\n  let {\n    headers\n  } = _ref;\n  const canonical = {};\n\n  for (const headerName of Object.keys(headers).sort()) {\n    if (headers[headerName] == undefined) {\n      continue;\n    }\n\n    const canonicalHeaderName = headerName.toLowerCase();\n\n    if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n      if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n        continue;\n      }\n    }\n\n    canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n  }\n\n  return canonical;\n};","map":{"version":3,"names":["ALWAYS_UNSIGNABLE_HEADERS","PROXY_HEADER_PATTERN","SEC_HEADER_PATTERN","getCanonicalHeaders","unsignableHeaders","signableHeaders","headers","canonical","headerName","Object","keys","sort","undefined","canonicalHeaderName","toLowerCase","has","test","trim","replace"],"sources":["C:/Users/anshs/OneDrive/Documents/Code/WebDevelopement/portfolioPersonal/node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js"],"sourcesContent":["import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        if (headers[headerName] == undefined) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n            unsignableHeaders?.has(canonicalHeaderName) ||\n            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\n"],"mappings":"AAAA,SAASA,yBAAT,EAAoCC,oBAApC,EAA0DC,kBAA1D,QAAoF,aAApF;AACA,OAAO,MAAMC,mBAAmB,GAAG,OAAcC,iBAAd,EAAiCC,eAAjC,KAAqD;EAAA,IAApD;IAAEC;EAAF,CAAoD;EACpF,MAAMC,SAAS,GAAG,EAAlB;;EACA,KAAK,MAAMC,UAAX,IAAyBC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,IAArB,EAAzB,EAAsD;IAClD,IAAIL,OAAO,CAACE,UAAD,CAAP,IAAuBI,SAA3B,EAAsC;MAClC;IACH;;IACD,MAAMC,mBAAmB,GAAGL,UAAU,CAACM,WAAX,EAA5B;;IACA,IAAID,mBAAmB,IAAIb,yBAAvB,IACAI,iBAAiB,EAAEW,GAAnB,CAAuBF,mBAAvB,CADA,IAEAZ,oBAAoB,CAACe,IAArB,CAA0BH,mBAA1B,CAFA,IAGAX,kBAAkB,CAACc,IAAnB,CAAwBH,mBAAxB,CAHJ,EAGkD;MAC9C,IAAI,CAACR,eAAD,IAAqBA,eAAe,IAAI,CAACA,eAAe,CAACU,GAAhB,CAAoBF,mBAApB,CAA7C,EAAwF;QACpF;MACH;IACJ;;IACDN,SAAS,CAACM,mBAAD,CAAT,GAAiCP,OAAO,CAACE,UAAD,CAAP,CAAoBS,IAApB,GAA2BC,OAA3B,CAAmC,MAAnC,EAA2C,GAA3C,CAAjC;EACH;;EACD,OAAOX,SAAP;AACH,CAlBM"},"metadata":{},"sourceType":"module"}