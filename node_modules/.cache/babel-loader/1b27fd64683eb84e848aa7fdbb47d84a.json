{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregationCursor = void 0;\n\nconst aggregate_1 = require(\"../operations/aggregate\");\n\nconst execute_operation_1 = require(\"../operations/execute_operation\");\n\nconst utils_1 = require(\"../utils\");\n\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @internal */\n\n\nconst kPipeline = Symbol('pipeline');\n/** @internal */\n\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\n\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this[kPipeline] = pipeline;\n    this[kOptions] = options;\n  }\n\n  get pipeline() {\n    return this[kPipeline];\n  }\n\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this[kPipeline], { ...clonedOptions\n    });\n  }\n\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n\n\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.client, aggregateOperation, (err, response) => {\n      if (err || response == null) return callback(err); // TODO: NODE-2882\n\n      callback(undefined, {\n        server: aggregateOperation.server,\n        session,\n        response\n      });\n    });\n  }\n  /** Execute the explain for the cursor */\n\n\n  async explain(verbosity) {\n    return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], { ...this[kOptions],\n      ...this.cursorOptions,\n      explain: verbosity ?? true\n    }));\n  }\n\n  group($group) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $group\n    });\n    return this;\n  }\n  /** Add a limit stage to the aggregation pipeline */\n\n\n  limit($limit) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $limit\n    });\n    return this;\n  }\n  /** Add a match stage to the aggregation pipeline */\n\n\n  match($match) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $match\n    });\n    return this;\n  }\n  /** Add an out stage to the aggregation pipeline */\n\n\n  out($out) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $out\n    });\n    return this;\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n\n\n  project($project) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $project\n    });\n    return this;\n  }\n  /** Add a lookup stage to the aggregation pipeline */\n\n\n  lookup($lookup) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $lookup\n    });\n    return this;\n  }\n  /** Add a redact stage to the aggregation pipeline */\n\n\n  redact($redact) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $redact\n    });\n    return this;\n  }\n  /** Add a skip stage to the aggregation pipeline */\n\n\n  skip($skip) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $skip\n    });\n    return this;\n  }\n  /** Add a sort stage to the aggregation pipeline */\n\n\n  sort($sort) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $sort\n    });\n    return this;\n  }\n  /** Add a unwind stage to the aggregation pipeline */\n\n\n  unwind($unwind) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $unwind\n    });\n    return this;\n  }\n  /** Add a geoNear stage to the aggregation pipeline */\n\n\n  geoNear($geoNear) {\n    (0, abstract_cursor_1.assertUninitialized)(this);\n    this[kPipeline].push({\n      $geoNear\n    });\n    return this;\n  }\n\n}\n\nexports.AggregationCursor = AggregationCursor;","map":{"version":3,"mappings":"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","names":["kPipeline","Symbol","kOptions","AggregationCursor","abstract_cursor_1","constructor","client","namespace","pipeline","options","clone","clonedOptions","session","map","transform","_initialize","callback","aggregateOperation","aggregate_1","cursorOptions","err","response","undefined","server","explain","verbosity","group","$group","push","limit","$limit","match","$match","out","$out","project","$project","lookup","$lookup","redact","$redact","skip","$skip","sort","$sort","unwind","$unwind","geoNear","$geoNear","exports"],"sources":["C:\\Users\\anshs\\OneDrive\\Documents\\Code\\WebDevelopement\\portfolioPersonal\\node_modules\\mongodb\\src\\cursor\\aggregation_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport { AggregateOperation, AggregateOptions } from '../operations/aggregate';\nimport { executeOperation, ExecutionResult } from '../operations/execute_operation';\nimport type { ClientSession } from '../sessions';\nimport type { Sort } from '../sort';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport { mergeOptions } from '../utils';\nimport type { AbstractCursorOptions } from './abstract_cursor';\nimport { AbstractCursor, assertUninitialized } from './abstract_cursor';\n\n/** @public */\nexport interface AggregationCursorOptions extends AbstractCursorOptions, AggregateOptions {}\n\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nexport class AggregationCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  /** @internal */\n  [kPipeline]: Document[];\n  /** @internal */\n  [kOptions]: AggregateOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: AggregateOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this[kPipeline] = pipeline;\n    this[kOptions] = options;\n  }\n\n  get pipeline(): Document[] {\n    return this[kPipeline];\n  }\n\n  clone(): AggregationCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this[kOptions]);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): AggregationCursor<T> {\n    return super.map(transform) as AggregationCursor<T>;\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const aggregateOperation = new AggregateOperation(this.namespace, this[kPipeline], {\n      ...this[kOptions],\n      ...this.cursorOptions,\n      session\n    });\n\n    executeOperation(this.client, aggregateOperation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: NODE-2882\n      callback(undefined, { server: aggregateOperation.server, session, response });\n    });\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike): Promise<Document> {\n    return executeOperation(\n      this.client,\n      new AggregateOperation(this.namespace, this[kPipeline], {\n        ...this[kOptions], // NOTE: order matters here, we may need to refine this\n        ...this.cursorOptions,\n        explain: verbosity ?? true\n      })\n    );\n  }\n\n  /** Add a group stage to the aggregation pipeline */\n  group<T = TSchema>($group: Document): AggregationCursor<T>;\n  group($group: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $group });\n    return this;\n  }\n\n  /** Add a limit stage to the aggregation pipeline */\n  limit($limit: number): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $limit });\n    return this;\n  }\n\n  /** Add a match stage to the aggregation pipeline */\n  match($match: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $match });\n    return this;\n  }\n\n  /** Add an out stage to the aggregation pipeline */\n  out($out: { db: string; coll: string } | string): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $out });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>($project: Document): AggregationCursor<T> {\n    assertUninitialized(this);\n    this[kPipeline].push({ $project });\n    return this as unknown as AggregationCursor<T>;\n  }\n\n  /** Add a lookup stage to the aggregation pipeline */\n  lookup($lookup: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $lookup });\n    return this;\n  }\n\n  /** Add a redact stage to the aggregation pipeline */\n  redact($redact: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $redact });\n    return this;\n  }\n\n  /** Add a skip stage to the aggregation pipeline */\n  skip($skip: number): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $skip });\n    return this;\n  }\n\n  /** Add a sort stage to the aggregation pipeline */\n  sort($sort: Sort): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $sort });\n    return this;\n  }\n\n  /** Add a unwind stage to the aggregation pipeline */\n  unwind($unwind: Document | string): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $unwind });\n    return this;\n  }\n\n  /** Add a geoNear stage to the aggregation pipeline */\n  geoNear($geoNear: Document): this {\n    assertUninitialized(this);\n    this[kPipeline].push({ $geoNear });\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}